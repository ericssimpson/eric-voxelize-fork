/*! For license information please see 1df93b7f.b4f03ebe.js.LICENSE.txt */
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3237],{7024:(g,I,C)=>{C.d(I,{E:()=>i});var A=C(7378),t=C(7853),e=C(6173),o=C(4246);const i=()=>{const g=(0,A.useRef)(null);return(0,A.useEffect)((()=>{if(!g.current)return;const I=g.current,C=new e.CP7({canvas:I,antialias:!0,alpha:!0});C.setPixelRatio(window.devicePixelRatio),C.setSize(I.clientWidth,I.clientHeight),C.outputColorSpace=e.KI_;const A=new e.xsS,o=new e.cPb(75,I.clientWidth/I.clientHeight,.1,1e3);o.position.set(0,.5,2.5),o.lookAt(0,-.5,0);const i=new t.zk;A.add(i);const l=new e.Pa4;let c=0,n=0;function d(g){const C=I.getBoundingClientRect();c=g.clientX-(C.x+I.clientWidth/2),n=g.clientY-(C.y+I.clientHeight/2)}document.addEventListener("mousemove",d,!1);const s=()=>{requestAnimationFrame(s),l.x=.02*c,l.y=.02*-n,l.z=o.position.z,i.set([0,0,0],[l.x,l.y-1,l.z]),i.update(),C.render(A,o)};s();const Z=I.parentElement;return window.addEventListener("resize",(()=>{I.width=Z.clientWidth,I.height=Z.clientHeight,o.aspect=Z.clientWidth/Z.clientHeight,o.updateProjectionMatrix(),C.setSize(Z.clientWidth,Z.clientHeight)})),()=>{document.removeEventListener("mousemove",d,!1)}}),[g]),(0,o.jsx)("canvas",{className:"w-full h-full",ref:g})}},3253:(g,I,C)=>{C.r(I),C.d(I,{default:()=>s});C(7378);var A=C(5594),t=C(1191),e=C(9939),o=C(2577),i=C(6156),l=C(5404),c=C(4246);const n=()=>{const{siteConfig:g}=(0,e.Z)();return(0,c.jsxs)("div",{className:"flex flex-col-reverse justify-end items-center min-h-[100vh] lg:flex-row md:min-h-[80vh]",children:[(0,c.jsxs)("div",{className:"flex flex-col justify-start items-center lg:items-start",children:[(0,c.jsxs)("div",{className:"my-10 flex flex-col items-center lg:items-start",children:[(0,c.jsx)("h1",{className:"font-display font-black text-6xl mb-3 md:text-8xl",children:g.title}),(0,c.jsx)(i.e,{sequence:["A multiplayer voxel game engine",1e3,"An immersive 3D web experience",1e3,"A 3D web framework",1e3,"A full-stack game framework",1e3,"A 3D voxel editor",1e3],wrapper:"div",cursor:!1,speed:50,repeat:1/0,className:"font-body text-2xl text-center lg:text-start"})]}),(0,c.jsx)(t.Z,{to:"/tutorials/intro/what-is-voxelize",children:(0,c.jsx)("button",{className:"button button--secondary button--lg",style:{verticalAlign:"middle"},children:"Get Started \u2192"})})]}),(0,c.jsx)("div",{className:"w-[400px] h-[400px] lg:h-[600px]",children:(0,c.jsx)(A.Z,{children:()=>{const g=C(7024).E;return(0,c.jsx)(g,{})}})})]})},d=l.ZP.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  width: 60%;
  margin: 0 auto;
  min-width: 300px;
`,s=()=>(0,c.jsx)(o.Z,{title:"Welcome",description:"\ud83c\udf44 A well-optimized, highly extensible full-stack library to create immersive multiplayer voxel experiences.",children:(0,c.jsx)(d,{children:(0,c.jsx)(n,{})})})},7853:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{zk:()=>Character});var three__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(6173),three_examples_jsm_libs_stats_module_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9597),postprocessing__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9249),commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:{};function commonjsRequire(g){throw new Error('Could not dynamically require "'+g+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}function iota$1(g){for(var I=new Array(g),C=0;C<g;++C)I[C]=C;return I}var iota_1=iota$1,isBuffer_1=function(g){return null!=g&&(isBuffer$1(g)||isSlowBuffer(g)||!!g._isBuffer)};function isBuffer$1(g){return!!g.constructor&&"function"==typeof g.constructor.isBuffer&&g.constructor.isBuffer(g)}function isSlowBuffer(g){return"function"==typeof g.readFloatLE&&"function"==typeof g.slice&&isBuffer$1(g.slice(0,0))}var iota=iota_1,isBuffer=isBuffer_1,hasTypedArrays="undefined"!=typeof Float64Array;function compare1st(g,I){return g[0]-I[0]}function order(){var g,I=this.stride,C=new Array(I.length);for(g=0;g<C.length;++g)C[g]=[Math.abs(I[g]),g];C.sort(compare1st);var A=new Array(C.length);for(g=0;g<A.length;++g)A[g]=C[g][1];return A}function compileConstructor(g,I){var C=["View",I,"d",g].join("");I<0&&(C="View_Nil"+g);var A="generic"===g;if(-1===I){var t="function "+C+"(a){this.data=a;};var proto="+C+".prototype;proto.dtype='"+g+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+C+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+C+"(a){return new "+C+"(a);}";return new Function(t)()}if(0===I){t="function "+C+"(a,d) {this.data = a;this.offset = d};var proto="+C+".prototype;proto.dtype='"+g+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+C+"_copy() {return new "+C+"(this.data,this.offset)};proto.pick=function "+C+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+C+"_get(){return "+(A?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+C+"_set(v){return "+(A?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+C+"(a,b,c,d){return new "+C+"(a,d)}";return new Function("TrivialArray",t)(CACHED_CONSTRUCTORS[g][0])}t=["'use strict'"];var e=iota(I),o=e.map((function(g){return"i"+g})),i="this.offset+"+e.map((function(g){return"this.stride["+g+"]*i"+g})).join("+"),l=e.map((function(g){return"b"+g})).join(","),c=e.map((function(g){return"c"+g})).join(",");t.push("function "+C+"(a,"+l+","+c+",d){this.data=a","this.shape=["+l+"]","this.stride=["+c+"]","this.offset=d|0}","var proto="+C+".prototype","proto.dtype='"+g+"'","proto.dimension="+I),t.push("Object.defineProperty(proto,'size',{get:function "+C+"_size(){return "+e.map((function(g){return"this.shape["+g+"]"})).join("*"),"}})"),1===I?t.push("proto.order=[0]"):(t.push("Object.defineProperty(proto,'order',{get:"),I<4?(t.push("function "+C+"_order(){"),2===I?t.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===I&&t.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):t.push("ORDER})")),t.push("proto.set=function "+C+"_set("+o.join(",")+",v){"),A?t.push("return this.data.set("+i+",v)}"):t.push("return this.data["+i+"]=v}"),t.push("proto.get=function "+C+"_get("+o.join(",")+"){"),A?t.push("return this.data.get("+i+")}"):t.push("return this.data["+i+"]}"),t.push("proto.index=function "+C+"_index(",o.join(),"){return "+i+"}"),t.push("proto.hi=function "+C+"_hi("+o.join(",")+"){return new "+C+"(this.data,"+e.map((function(g){return["(typeof i",g,"!=='number'||i",g,"<0)?this.shape[",g,"]:i",g,"|0"].join("")})).join(",")+","+e.map((function(g){return"this.stride["+g+"]"})).join(",")+",this.offset)}");var n=e.map((function(g){return"a"+g+"=this.shape["+g+"]"})),d=e.map((function(g){return"c"+g+"=this.stride["+g+"]"}));t.push("proto.lo=function "+C+"_lo("+o.join(",")+"){var b=this.offset,d=0,"+n.join(",")+","+d.join(","));for(var s=0;s<I;++s)t.push("if(typeof i"+s+"==='number'&&i"+s+">=0){d=i"+s+"|0;b+=c"+s+"*d;a"+s+"-=d}");t.push("return new "+C+"(this.data,"+e.map((function(g){return"a"+g})).join(",")+","+e.map((function(g){return"c"+g})).join(",")+",b)}"),t.push("proto.step=function "+C+"_step("+o.join(",")+"){var "+e.map((function(g){return"a"+g+"=this.shape["+g+"]"})).join(",")+","+e.map((function(g){return"b"+g+"=this.stride["+g+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(s=0;s<I;++s)t.push("if(typeof i"+s+"==='number'){d=i"+s+"|0;if(d<0){c+=b"+s+"*(a"+s+"-1);a"+s+"=ceil(-a"+s+"/d)}else{a"+s+"=ceil(a"+s+"/d)}b"+s+"*=d}");t.push("return new "+C+"(this.data,"+e.map((function(g){return"a"+g})).join(",")+","+e.map((function(g){return"b"+g})).join(",")+",c)}");var Z=new Array(I),b=new Array(I);for(s=0;s<I;++s)Z[s]="a[i"+s+"]",b[s]="b[i"+s+"]";t.push("proto.transpose=function "+C+"_transpose("+o+"){"+o.map((function(g,I){return g+"=("+g+"===undefined?"+I+":"+g+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+C+"(this.data,"+Z.join(",")+","+b.join(",")+",this.offset)}"),t.push("proto.pick=function "+C+"_pick("+o+"){var a=[],b=[],c=this.offset");for(s=0;s<I;++s)t.push("if(typeof i"+s+"==='number'&&i"+s+">=0){c=(c+this.stride["+s+"]*i"+s+")|0}else{a.push(this.shape["+s+"]);b.push(this.stride["+s+"])}");return t.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),t.push("return function construct_"+C+"(data,shape,stride,offset){return new "+C+"(data,"+e.map((function(g){return"shape["+g+"]"})).join(",")+","+e.map((function(g){return"stride["+g+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",t.join("\n"))(CACHED_CONSTRUCTORS[g],order)}function arrayDType(g){if(isBuffer(g))return"buffer";if(hasTypedArrays)switch(Object.prototype.toString.call(g)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(g)?"array":"generic"}var CACHED_CONSTRUCTORS={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};function wrappedNDArrayCtor(g,I,C,A){if(void 0===g)return(0,CACHED_CONSTRUCTORS.array[0])([]);"number"==typeof g&&(g=[g]),void 0===I&&(I=[g.length]);var t=I.length;if(void 0===C){C=new Array(t);for(var e=t-1,o=1;e>=0;--e)C[e]=o,o*=I[e]}if(void 0===A){A=0;for(e=0;e<t;++e)C[e]<0&&(A-=(I[e]-1)*C[e])}for(var i=arrayDType(g),l=CACHED_CONSTRUCTORS[i];l.length<=t+1;)l.push(compileConstructor(i,l.length-1));return(0,l[t+1])(g,I,C,A)}var ndarray=wrappedNDArrayCtor;function decodeBase64(g,I){var C=atob(g);if(I){for(var A=new Uint8Array(C.length),t=0,e=C.length;t<e;++t)A[t]=C.charCodeAt(t);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}function createURL(g,I,C){var A=void 0===I?null:I,t=decodeBase64(g,void 0!==C&&C),e=t.indexOf("\n",10)+1,o=t.substring(e)+(A?"//# sourceMappingURL="+A:""),i=new Blob([o],{type:"application/javascript"});return URL.createObjectURL(i)}function createBase64WorkerFactory(g,I,C){var A;return function(t){return A=A||createURL(g,I,C),new Worker(A,t)}}var WorkerFactory$4=createBase64WorkerFactory("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgaW1wb3J0U2NyaXB0cygiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9ub2lzZWpzQDIuMS4wL2luZGV4Lm1pbi5qcyIpOwogIGZ1bmN0aW9uIHNldChhcnIsIHgsIHksIHosIHN0cmlkZSwgdmFsdWUpIHsKICAgICAgYXJyW3ggKiBzdHJpZGVbMF0gKyB5ICogc3RyaWRlWzFdICsgeiAqIHN0cmlkZVsyXV0gPSB2YWx1ZTsKICB9CiAgLy8gQHRzLWlnbm9yZQogIGNvbnN0IGluc3RhbmNlID0gbmV3IE5vaXNlKCk7CiAgZnVuY3Rpb24gbm9pc2UoeCwgeSwgeiwgb2N0YXZlcywgZmFsbG9mZiwgbGFjdW5hcml0eSA9IDAuOCkgewogICAgICBsZXQgdG90YWwgPSAwOwogICAgICBsZXQgZnJlcXVlbmN5ID0gMS4wOwogICAgICBsZXQgYW1wbGl0dWRlID0gMS4wOwogICAgICBsZXQgbWF4VmFsID0gMC4wOwogICAgICBmb3IobGV0IGkgPSAwOyBpIDwgb2N0YXZlczsgaSsrKXsKICAgICAgICAgIHRvdGFsICs9IGluc3RhbmNlLnNpbXBsZXgzKHggKiBmcmVxdWVuY3ksIHkgKiBmcmVxdWVuY3ksIHogKiBmcmVxdWVuY3kpICogYW1wbGl0dWRlOwogICAgICAgICAgbWF4VmFsICs9IGFtcGxpdHVkZTsKICAgICAgICAgIGFtcGxpdHVkZSAqPSBmYWxsb2ZmOwogICAgICAgICAgZnJlcXVlbmN5ICo9IGxhY3VuYXJpdHk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRvdGFsIC8gbWF4VmFsOwogIH0KICAvLyBAdHMtaWdub3JlCiAgb25tZXNzYWdlID0gZnVuY3Rpb24oZSkgewogICAgICBjb25zdCB7IGRhdGEgLCBjb25maWdzOiB7IG1pbiAsIG1heCAsIG5vaXNlU2NhbGUgLCB0aHJlc2hvbGQgLCBzdHJpZGUgLCBvY3RhdmVzICwgZmFsbG9mZiAsIHNlZWQgIH0gIH0gPSBlLmRhdGE7CiAgICAgIGluc3RhbmNlLnNlZWQoc2VlZCk7CiAgICAgIGNvbnN0IFtzdGFydFgsIHN0YXJ0WSwgc3RhcnRaXSA9IG1pbjsKICAgICAgY29uc3QgW2VuZFgsIGVuZFksIGVuZFpdID0gbWF4OwogICAgICBmb3IobGV0IHZ4ID0gc3RhcnRYLCBseCA9IDA7IHZ4IDwgZW5kWDsgKyt2eCwgKytseCl7CiAgICAgICAgICBmb3IobGV0IHZ6ID0gc3RhcnRaLCBseiA9IDA7IHZ6IDwgZW5kWjsgKyt2eiwgKytseil7CiAgICAgICAgICAgICAgZm9yKGxldCB2eSA9IHN0YXJ0WSwgbHkgPSAwOyB2eSA8IGVuZFk7ICsrdnksICsrbHkpewogICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5vaXNlKHZ4ICogbm9pc2VTY2FsZSwgdnkgKiBub2lzZVNjYWxlLCB2eiAqIG5vaXNlU2NhbGUsIG9jdGF2ZXMsIGZhbGxvZmYpID4gdGhyZXNob2xkID8gMSA6IDA7CiAgICAgICAgICAgICAgICAgIHNldChkYXRhLCBseCwgbHksIGx6LCBzdHJpZGUsIHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gQHRzLWlnbm9yZQogICAgICBwb3N0TWVzc2FnZShkYXRhLCBbCiAgICAgICAgICBkYXRhLmJ1ZmZlcgogICAgICBdKTsKICB9OwoKfSkoKTsKCg==",null,!1),WorkerFactory$3=createBase64WorkerFactory("",null,!1);function _defineProperty$D(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}const defaultOptions$h={maxWorker:8};class WorkerPool{get isBusy(){return this.available.length<=0}get workingCount(){return this.workers.length-this.available.length}constructor(g,I){void 0===I&&(I=defaultOptions$h),_defineProperty$D(this,"Proto",void 0),_defineProperty$D(this,"options",void 0),_defineProperty$D(this,"queue",void 0),_defineProperty$D(this,"workers",void 0),_defineProperty$D(this,"available",void 0),_defineProperty$D(this,"addJob",void 0),_defineProperty$D(this,"postMessage",void 0),_defineProperty$D(this,"process",void 0),this.Proto=g,this.options=I,this.queue=[],this.workers=[],this.available=[],this.addJob=g=>{this.queue.push(g),this.process()},this.postMessage=(g,I)=>{for(const C of this.workers)C.postMessage(g,I)},this.process=()=>{if(0!==this.queue.length&&this.available.length>0){const g=this.available.pop(),I=this.workers[g],{message:C,buffers:A,resolve:t}=this.queue.shift();I.postMessage(C,A),WorkerPool.WORKING_COUNT++;const e=C=>{let{data:A}=C;WorkerPool.WORKING_COUNT--,I.removeEventListener("message",e),this.available.unshift(g),t(A),this.queue.length>0&&setTimeout(this.process,0)};I.addEventListener("message",e)}};const{maxWorker:C}=I;for(let A=0;A<C;A++){const I=new g;this.workers.push(I),this.available.push(A)}}}_defineProperty$D(WorkerPool,"WORKING_COUNT",0);const cullPool=new WorkerPool(WorkerFactory$3,{maxWorker:2});async function cull(g,I){const{stride:C,data:A}=g,{dimensions:t,min:e,max:o,realMin:i,realMax:l}=I;return new Promise((g=>{cullPool.addJob({message:{data:A,configs:{min:e,max:o,dimensions:t,stride:C,realMin:i,realMax:l}},resolve:g,buffers:[A.buffer.slice(0)]})}))}var CloudsFragmentShader="#define GLSLIFY 1\nuniform vec3 uFogColor;uniform vec3 uCloudColor;uniform float uFogNear;uniform float uFogFar;uniform float uCloudAlpha;varying vec4 vWorldPosition;void main(){gl_FragColor=vec4(uCloudColor,uCloudAlpha);vec3 fogOrigin=cameraPosition;float depth=sqrt(pow(vWorldPosition.x-fogOrigin.x,2.0)+pow(vWorldPosition.z-fogOrigin.z,2.0))/8.0;float fogFactor=smoothstep(uFogNear,uFogFar,depth);gl_FragColor.rgb=mix(gl_FragColor.rgb,uFogColor,fogFactor);}",CloudsVertexShader="#define GLSLIFY 1\nvarying vec4 vWorldPosition;void main(){vWorldPosition=modelMatrix*vec4(position,1.0);gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}";function _defineProperty$C(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$h(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$C(g,I,C[I])}))}return g}const defaultOptions$g={alpha:.8,color:"#fff",count:16,noiseScale:.08,width:8,height:3,dimensions:[20,20,20],speedFactor:8,lerpFactor:.3,threshold:.05,octaves:5,falloff:.9,seed:-1,cloudHeight:256};class Clouds extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{constructor(g){var I;void 0===g&&(g={}),super(),I=this,_defineProperty$C(this,"options",void 0),_defineProperty$C(this,"isInitialized",!1),_defineProperty$C(this,"material",void 0),_defineProperty$C(this,"meshes",[]),_defineProperty$C(this,"xOffset",0),_defineProperty$C(this,"zOffset",0),_defineProperty$C(this,"locatedCell",[0,0]),_defineProperty$C(this,"newPosition",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$C(this,"pool",new WorkerPool(WorkerFactory$4,{maxWorker:2})),_defineProperty$C(this,"clock",new three__WEBPACK_IMPORTED_MODULE_0__.SUY),_defineProperty$C(this,"reset",(async()=>{this.children.forEach((g=>{var I;g.parent&&(g.parent.remove(g),null===(I=g.geometry)||void 0===I||I.dispose())})),this.meshes.length=0,await this.initialize()})),_defineProperty$C(this,"update",(g=>{if(!this.isInitialized)return;const I=Math.min(.1,this.clock.getDelta()),{speedFactor:C,count:A,dimensions:t}=this.options;this.newPosition=this.position.clone(),this.newPosition.z-=C*I;const e=[Math.floor((g.x-this.position.x)/(A*t[0])),Math.floor((g.z-this.position.z)/(A*t[2]))];if(this.locatedCell[0]!==e[0]||this.locatedCell[1]!==e[1]){const g=e[0]-this.locatedCell[0],I=e[1]-this.locatedCell[1];this.locatedCell=e,Math.abs(g)>1||Math.abs(I)>1?this.reset():(g&&this.shiftX(g),I&&this.shiftZ(I))}this.position.lerp(this.newPosition,this.options.lerpFactor)})),_defineProperty$C(this,"initialize",(async()=>{const{width:g}=this.options,[I,C]=this.locatedCell;for(let A=0;A<g;A++){const t=[];for(let e=0;e<g;e++){const g=await this.makeCell(A+I,e+C);this.add(g),t.push(g)}this.meshes.push(t)}this.isInitialized=!0})),_defineProperty$C(this,"shiftX",(async function(g){void 0===g&&(g=1);const{width:C}=I.options,A=g>0?I.meshes.shift():I.meshes.pop();for(let t=0;t<C;t++)await I.makeCell(I.xOffset+(g>0?C:0),t+I.zOffset,A[t]);g>0?I.meshes.push(A):I.meshes.unshift(A),I.xOffset+=g})),_defineProperty$C(this,"shiftZ",(async function(g){void 0===g&&(g=1);const{width:C}=I.options;for(let A=0;A<C;A++){const t=I.meshes[A],e=g>0?t.shift():t.pop();await I.makeCell(A+I.xOffset,I.zOffset+(g>0?C:0),e),g>0?t.push(e):t.unshift(e)}I.zOffset+=g})),_defineProperty$C(this,"makeCell",(async(g,I,C)=>{const{width:A,height:t,count:e,noiseScale:o,seed:i,threshold:l,dimensions:c,cloudHeight:n,octaves:d,falloff:s}=this.options,Z=C?C.userData.data:ndarray(new Uint8Array((e+2)*t*(e+2)),[e+2,t,e+2]),b=[g*e-1,0,I*e-1],a=[(g+1)*e+1,t,(I+1)*e+1],m=await new Promise((g=>this.pool.addJob({message:{data:Z.data,configs:{min:b,max:a,noiseScale:o,threshold:l,stride:Z.stride,octaves:d,falloff:s,seed:i}},resolve:g,buffers:[Z.data.buffer.slice(0)]})));Z.data=m;const{positions:r,indices:h,normals:B}=await cull(Z,{dimensions:c,min:[1,0,1],max:[e+1,t,e+1],realMin:[0,0,0],realMax:[e+2,t,e+2]}),G=C?C.geometry:new three__WEBPACK_IMPORTED_MODULE_0__.u9r;return G.setAttribute("position",new three__WEBPACK_IMPORTED_MODULE_0__.a$l(r,3)),G.setAttribute("normal",new three__WEBPACK_IMPORTED_MODULE_0__.RNb(B,3)),G.setIndex(Array.from(h)),G.computeBoundingBox(),(C=C||new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(G,this.material)).position.setX((-A/2+g)*e*c[0]),C.position.setY(n),C.position.setZ((-A/2+I)*e*c[2]),C.userData.data=Z,C.renderOrder=-1,C})),this.options=_objectSpread$h({},defaultOptions$g,g);const{seed:C,color:A,alpha:t,uFogNear:e,uFogFar:o,uFogColor:i}=this.options;-1===C&&(this.options.seed=Math.floor(10230123*Math.random())),this.material=new three__WEBPACK_IMPORTED_MODULE_0__.jyz({transparent:!0,vertexShader:CloudsVertexShader,fragmentShader:CloudsFragmentShader,side:three__WEBPACK_IMPORTED_MODULE_0__.Wl3,uniforms:{uFogNear:e||{value:500},uFogFar:o||{value:1e3},uFogColor:i||{value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#fff")},uCloudColor:{value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(A)},uCloudAlpha:{value:t}}}),this.material.toneMapped=!1,this.initialize()}}function _defineProperty$B(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class DOMUtils{constructor(){}}_defineProperty$B(DOMUtils,"applyStyles",((g,I)=>{if(g)return Object.keys(I).forEach((C=>{const A=I[C];Array.isArray(g)?g.forEach((g=>g.style[C]=A)):g.style[C]=A})),g})),_defineProperty$B(DOMUtils,"rgba",((g,I,C,A)=>`rgba(${255*g}, ${255*I}, ${255*C}, ${A})`));var _AABB=class{get width(){return this.maxX-this.minX}get height(){return this.maxY-this.minY}get depth(){return this.maxZ-this.minZ}get mag(){return Math.sqrt((this.maxX-this.minX)**2+(this.maxY-this.minY)**2+(this.maxZ-this.minZ)**2)}computeOffsetX(g,I){const C=this.intersection(g);return C.height<=0||C.depth<=0?I:C.width>=0?0:I>0&&g.minX>=this.maxX?Math.min(g.minX-this.maxX,I):I<0&&g.maxX<=this.minX?Math.max(g.maxX-this.minX,I):I}computeOffsetY(g,I){const C=this.intersection(g);return C.width<=0||C.depth<=0?I:C.height>=0?0:I>0&&g.minY>=this.maxY?Math.min(g.minY-this.maxY,I):I<0&&g.maxY<=this.minY?Math.max(g.maxY-this.minY,I):I}computeOffsetZ(g,I){const C=this.intersection(g);return C.width<=0||C.height<=0?I:C.depth>=0?0:I>0&&g.minZ>=this.maxZ?Math.min(g.minZ-this.maxZ,I):I<0&&g.maxZ<=this.minZ?Math.max(g.maxZ-this.minZ,I):I}constructor(g,I,C,A,t,e){this.minX=g,this.minY=I,this.minZ=C,this.maxX=A,this.maxY=t,this.maxZ=e,this.getMin=g=>{if(0===g)return this.minX;if(1===g)return this.minY;if(2===g)return this.minZ;throw new Error("GetMinError: Unknown axis.")},this.setMin=(g,I)=>{if(0===g)this.minX=I;else if(1===g)this.minY=I;else{if(2!==g)throw new Error("SetMinError: Unknown axis.");this.minZ=I}},this.getMax=g=>{if(0===g)return this.maxX;if(1===g)return this.maxY;if(2===g)return this.maxZ;throw new Error("GetMaxError: Unknown axis.")},this.setMax=(g,I)=>{if(0===g)this.maxX=I;else if(1===g)this.maxY=I;else{if(2!==g)throw new Error("SetMaxError: Unknown axis.");this.maxZ=I}},this.translate=g=>{let[I,C,A]=g;return this.minX+=I,this.minY+=C,this.minZ+=A,this.maxX+=I,this.maxY+=C,this.maxZ+=A,this},this.translateAxis=(g,I)=>{if(0===g)this.minX+=I,this.maxX+=I;else if(1===g)this.minY+=I,this.maxY+=I;else{if(2!==g)throw new Error("TranslateAxisError: Unknown axis.");this.minZ+=I,this.maxZ+=I}return this},this.setPosition=g=>{let[I,C,A]=g;return this.maxX=I+this.width,this.maxY=C+this.height,this.maxZ=A+this.depth,this.minX=I,this.minY=C,this.minZ=A,this},this.intersects=g=>!(g.minX>=this.maxX)&&(!(g.minY>=this.maxY)&&(!(g.minZ>=this.maxZ)&&(!(g.maxX<=this.minX)&&(!(g.maxY<=this.minY)&&!(g.maxZ<=this.minZ))))),this.touches=g=>{const I=this.intersection(g);return null!==I&&(0===I.width||0===I.height||0===I.depth)},this.union=g=>new _AABB(Math.min(this.minX,g.minX),Math.min(this.minY,g.minY),Math.min(this.minZ,g.minZ),Math.max(this.maxX,g.maxX),Math.max(this.maxY,g.maxY),Math.max(this.maxZ,g.maxZ)),this.intersection=g=>new _AABB(Math.max(this.minX,g.minX),Math.max(this.minY,g.minY),Math.max(this.minZ,g.minZ),Math.min(this.maxX,g.maxX),Math.min(this.maxY,g.maxY),Math.min(this.maxZ,g.maxZ)),this.clone=()=>new _AABB(this.minX,this.minY,this.minZ,this.maxX,this.maxY,this.maxZ)}},AABB=_AABB;function _defineProperty$A(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}AABB.union=g=>{let I=g[0].minX,C=g[0].minY,A=g[0].minZ,t=g[0].maxX,e=g[0].maxY,o=g[0].maxZ;for(const i of g)I=Math.min(I,i.minX),C=Math.min(C,i.minY),A=Math.min(A,i.minZ),t=Math.max(t,i.maxX),e=Math.max(e,i.maxY),o=Math.max(o,i.maxZ);return new _AABB(I,C,A,t,e,o)};const PY_ROTATION=0,NY_ROTATION=1,PX_ROTATION=2,NX_ROTATION=3,PZ_ROTATION=4,NZ_ROTATION=5,Y_ROT_SEGMENTS=16,Y_ROT_MAP=[];for(let g=0;g<Y_ROT_SEGMENTS;g++)Y_ROT_MAP.push([g/Y_ROT_SEGMENTS*Math.PI*2,g]),Y_ROT_MAP.push([g/Y_ROT_SEGMENTS*Math.PI*2-2*Math.PI,g]);const PI=Math.PI,PI_2$1=Math.PI/2;class BlockRotation{rotateTransparency(g){let[I,C,A,t,e,o]=g;const i=this.value;if(Math.abs(i)<Number.EPSILON)return[I,C,A,t,e,o];const l=[1,2,3],c=[4,5,6];this.rotateNode(l,!0,!1),this.rotateNode(c,!0,!1);const n=l.map((g=>1===g?I:2===g?C:3===g?A:4===g?t:5===g?e:o)),d=c.map((g=>1===g?I:2===g?C:3===g?A:4===g?t:5===g?e:o));return[n[0],n[1],n[2],d[0],d[1],d[2]]}constructor(g,I){var C=this;void 0===g&&(g=PY_ROTATION),void 0===I&&(I=0),_defineProperty$A(this,"value",void 0),_defineProperty$A(this,"yRotation",void 0),_defineProperty$A(this,"rotateNode",(function(g,I,A){switch(void 0===I&&(I=!0),void 0===A&&(A=!0),I&&0!==C.yRotation&&(g[0]-=.5,g[2]-=.5,BlockRotation.rotateY(g,C.yRotation),g[0]+=.5,g[2]+=.5),C.value){case PX_ROTATION:BlockRotation.rotateZ(g,-PI_2$1),A&&(g[1]+=1);break;case NX_ROTATION:BlockRotation.rotateZ(g,PI_2$1),A&&(g[0]+=1);break;case PY_ROTATION:break;case NY_ROTATION:BlockRotation.rotateX(g,PI),A&&(g[1]+=1,g[2]+=1);break;case PZ_ROTATION:BlockRotation.rotateX(g,PI_2$1),A&&(g[1]+=1);break;case NZ_ROTATION:BlockRotation.rotateX(g,-PI_2$1),A&&(g[2]+=1)}})),_defineProperty$A(this,"rotateAABB",(function(g,I,A){void 0===I&&(I=!0),void 0===A&&(A=!0);const t=[g.minX,g.minY,g.minZ],e=[g.maxX,g.maxY,g.maxZ];let o=null,i=null,l=null,c=null;if(I&&0!==C.yRotation){[[g.minX,g.minY,g.minZ],[g.minX,g.minY,g.maxZ],[g.maxX,g.minY,g.minZ],[g.maxX,g.minY,g.maxZ]].forEach((g=>{C.rotateNode(g,!0,!0),o=null===o?g[0]:Math.min(o,g[0]),i=null===i?g[2]:Math.min(i,g[2])}));[[g.minX,g.maxY,g.minZ],[g.minX,g.maxY,g.maxZ],[g.maxX,g.maxY,g.minZ],[g.maxX,g.maxY,g.maxZ]].forEach((g=>{C.rotateNode(g,!0,!0),l=null===l?g[0]:Math.max(l,g[0]),c=null===c?g[2]:Math.max(c,g[2])}))}C.rotateNode(t,I,A),C.rotateNode(e,I,A);const n=g=>g<1e-4?0:g;t[0]=n(t[0]),t[1]=n(t[1]),t[2]=n(t[2]),e[0]=n(e[0]),e[1]=n(e[1]),e[2]=n(e[2]);const d=[null!==o?n(o):Math.min(t[0],e[0]),Math.min(t[1],e[1]),null!==i?n(i):Math.min(t[2],e[2])],s=[null!==l?n(l):Math.max(t[0],e[0]),Math.max(t[1],e[1]),null!==c?n(c):Math.max(t[2],e[2])];return new AABB(d[0],d[1],d[2],s[0],s[1],s[2])})),this.value=g,this.yRotation=I}}function _defineProperty$z(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}_defineProperty$A(BlockRotation,"encode",(function(g,I){void 0===I&&(I=0);const C=I*Math.PI*2/Y_ROT_SEGMENTS;return new BlockRotation(g,C)})),_defineProperty$A(BlockRotation,"decode",(g=>[g.value,Math.round(g.yRotation*Y_ROT_SEGMENTS/(2*Math.PI))%Y_ROT_SEGMENTS])),_defineProperty$A(BlockRotation,"rotateX",((g,I)=>{const C=Math.sin(I),A=Math.cos(I),[,t,e]=g;g[1]=t*A-e*C,g[2]=e*A+t*C})),_defineProperty$A(BlockRotation,"rotateY",((g,I)=>{const C=Math.sin(I),A=Math.cos(I),[t,,e]=g;g[0]=t*A+e*C,g[2]=e*A-t*C})),_defineProperty$A(BlockRotation,"rotateZ",((g,I)=>{const C=Math.sin(I),A=Math.cos(I),[t,e]=g;g[0]=t*A-e*C,g[1]=e*A+t*C}));const ROTATION_MASK=4293984255,Y_ROTATION_MASK=4279238655,STAGE_MASK=4043309055;class BlockUtils{static getBlockRotatedTransparency(g,I){return I.rotateTransparency(g.isTransparent)}constructor(){}}_defineProperty$z(BlockUtils,"extractID",(g=>65535&g)),_defineProperty$z(BlockUtils,"insertID",((g,I)=>4294901760&g|65535&I)),_defineProperty$z(BlockUtils,"extractRotation",(g=>{const I=g>>16&15,C=g>>20&15;return BlockRotation.encode(I,C)})),_defineProperty$z(BlockUtils,"insertRotation",((g,I)=>{const[C,A]=BlockRotation.decode(I);return(g&ROTATION_MASK|(15&C)<<16)&Y_ROTATION_MASK|(15&A)<<20})),_defineProperty$z(BlockUtils,"extractStage",(g=>g>>24&15)),_defineProperty$z(BlockUtils,"insertStage",((g,I)=>g&STAGE_MASK|I<<24)),_defineProperty$z(BlockUtils,"insertAll",((g,I,C)=>{let A=0;return A=BlockUtils.insertID(A,g),I&&(A=BlockUtils.insertRotation(A,I)),void 0!==C&&(A=BlockUtils.insertStage(A,C)),A})),_defineProperty$z(BlockUtils,"getBlockTorchLightLevel",((g,I)=>{switch(I){case"RED":return g.redLightLevel;case"GREEN":return g.greenLightLevel;case"BLUE":return g.blueLightLevel}return 0}));var epsilon=1e-6,create_1=create$2;function create$2(){var g=new Float32Array(3);return g[0]=0,g[1]=0,g[2]=0,g}var clone_1=clone;function clone(g){var I=new Float32Array(3);return I[0]=g[0],I[1]=g[1],I[2]=g[2],I}var fromValues_1=fromValues$1;function fromValues$1(g,I,C){var A=new Float32Array(3);return A[0]=g,A[1]=I,A[2]=C,A}var normalize_1=normalize$1;function normalize$1(g,I){var C=I[0],A=I[1],t=I[2],e=C*C+A*A+t*t;return e>0&&(e=1/Math.sqrt(e),g[0]=I[0]*e,g[1]=I[1]*e,g[2]=I[2]*e),g}var dot_1=dot$1;function dot$1(g,I){return g[0]*I[0]+g[1]*I[1]+g[2]*I[2]}var angle_1=angle,fromValues=fromValues_1,normalize=normalize_1,dot=dot_1;function angle(g,I){var C=fromValues(g[0],g[1],g[2]),A=fromValues(I[0],I[1],I[2]);normalize(C,C),normalize(A,A);var t=dot(C,A);return t>1?0:Math.acos(t)}var copy_1=copy;function copy(g,I){return g[0]=I[0],g[1]=I[1],g[2]=I[2],g}var set_1=set;function set(g,I,C,A){return g[0]=I,g[1]=C,g[2]=A,g}var equals_1=equals,EPSILON=epsilon;function equals(g,I){var C=g[0],A=g[1],t=g[2],e=I[0],o=I[1],i=I[2];return Math.abs(C-e)<=EPSILON*Math.max(1,Math.abs(C),Math.abs(e))&&Math.abs(A-o)<=EPSILON*Math.max(1,Math.abs(A),Math.abs(o))&&Math.abs(t-i)<=EPSILON*Math.max(1,Math.abs(t),Math.abs(i))}var exactEquals_1=exactEquals;function exactEquals(g,I){return g[0]===I[0]&&g[1]===I[1]&&g[2]===I[2]}var add_1=add;function add(g,I,C){return g[0]=I[0]+C[0],g[1]=I[1]+C[1],g[2]=I[2]+C[2],g}var subtract_1=subtract;function subtract(g,I,C){return g[0]=I[0]-C[0],g[1]=I[1]-C[1],g[2]=I[2]-C[2],g}var sub=subtract_1,multiply_1=multiply;function multiply(g,I,C){return g[0]=I[0]*C[0],g[1]=I[1]*C[1],g[2]=I[2]*C[2],g}var mul=multiply_1,divide_1=divide;function divide(g,I,C){return g[0]=I[0]/C[0],g[1]=I[1]/C[1],g[2]=I[2]/C[2],g}var div=divide_1,min_1=min;function min(g,I,C){return g[0]=Math.min(I[0],C[0]),g[1]=Math.min(I[1],C[1]),g[2]=Math.min(I[2],C[2]),g}var max_1=max;function max(g,I,C){return g[0]=Math.max(I[0],C[0]),g[1]=Math.max(I[1],C[1]),g[2]=Math.max(I[2],C[2]),g}var floor_1=floor;function floor(g,I){return g[0]=Math.floor(I[0]),g[1]=Math.floor(I[1]),g[2]=Math.floor(I[2]),g}var ceil_1=ceil;function ceil(g,I){return g[0]=Math.ceil(I[0]),g[1]=Math.ceil(I[1]),g[2]=Math.ceil(I[2]),g}var round_1=round;function round(g,I){return g[0]=Math.round(I[0]),g[1]=Math.round(I[1]),g[2]=Math.round(I[2]),g}var scale_1=scale;function scale(g,I,C){return g[0]=I[0]*C,g[1]=I[1]*C,g[2]=I[2]*C,g}var scaleAndAdd_1=scaleAndAdd;function scaleAndAdd(g,I,C,A){return g[0]=I[0]+C[0]*A,g[1]=I[1]+C[1]*A,g[2]=I[2]+C[2]*A,g}var distance_1=distance;function distance(g,I){var C=I[0]-g[0],A=I[1]-g[1],t=I[2]-g[2];return Math.sqrt(C*C+A*A+t*t)}var dist=distance_1,squaredDistance_1=squaredDistance;function squaredDistance(g,I){var C=I[0]-g[0],A=I[1]-g[1],t=I[2]-g[2];return C*C+A*A+t*t}var sqrDist=squaredDistance_1,length_1=length;function length(g){var I=g[0],C=g[1],A=g[2];return Math.sqrt(I*I+C*C+A*A)}var len=length_1,squaredLength_1=squaredLength;function squaredLength(g){var I=g[0],C=g[1],A=g[2];return I*I+C*C+A*A}var sqrLen=squaredLength_1,negate_1=negate;function negate(g,I){return g[0]=-I[0],g[1]=-I[1],g[2]=-I[2],g}var inverse_1=inverse;function inverse(g,I){return g[0]=1/I[0],g[1]=1/I[1],g[2]=1/I[2],g}var cross_1=cross;function cross(g,I,C){var A=I[0],t=I[1],e=I[2],o=C[0],i=C[1],l=C[2];return g[0]=t*l-e*i,g[1]=e*o-A*l,g[2]=A*i-t*o,g}var lerp_1=lerp;function lerp(g,I,C,A){var t=I[0],e=I[1],o=I[2];return g[0]=t+A*(C[0]-t),g[1]=e+A*(C[1]-e),g[2]=o+A*(C[2]-o),g}var random_1=random;function random(g,I){I=I||1;var C=2*Math.random()*Math.PI,A=2*Math.random()-1,t=Math.sqrt(1-A*A)*I;return g[0]=Math.cos(C)*t,g[1]=Math.sin(C)*t,g[2]=A*I,g}var transformMat4_1=transformMat4;function transformMat4(g,I,C){var A=I[0],t=I[1],e=I[2],o=C[3]*A+C[7]*t+C[11]*e+C[15];return o=o||1,g[0]=(C[0]*A+C[4]*t+C[8]*e+C[12])/o,g[1]=(C[1]*A+C[5]*t+C[9]*e+C[13])/o,g[2]=(C[2]*A+C[6]*t+C[10]*e+C[14])/o,g}var transformMat3_1=transformMat3;function transformMat3(g,I,C){var A=I[0],t=I[1],e=I[2];return g[0]=A*C[0]+t*C[3]+e*C[6],g[1]=A*C[1]+t*C[4]+e*C[7],g[2]=A*C[2]+t*C[5]+e*C[8],g}var transformQuat_1=transformQuat;function transformQuat(g,I,C){var A=I[0],t=I[1],e=I[2],o=C[0],i=C[1],l=C[2],c=C[3],n=c*A+i*e-l*t,d=c*t+l*A-o*e,s=c*e+o*t-i*A,Z=-o*A-i*t-l*e;return g[0]=n*c+Z*-o+d*-l-s*-i,g[1]=d*c+Z*-i+s*-o-n*-l,g[2]=s*c+Z*-l+n*-i-d*-o,g}var rotateX_1=rotateX;function rotateX(g,I,C,A){var t=C[1],e=C[2],o=I[1]-t,i=I[2]-e,l=Math.sin(A),c=Math.cos(A);return g[0]=I[0],g[1]=t+o*c-i*l,g[2]=e+o*l+i*c,g}var rotateY_1=rotateY$1;function rotateY$1(g,I,C,A){var t=C[0],e=C[2],o=I[0]-t,i=I[2]-e,l=Math.sin(A),c=Math.cos(A);return g[0]=t+i*l+o*c,g[1]=I[1],g[2]=e+i*c-o*l,g}var rotateZ_1=rotateZ;function rotateZ(g,I,C,A){var t=C[0],e=C[1],o=I[0]-t,i=I[1]-e,l=Math.sin(A),c=Math.cos(A);return g[0]=t+o*c-i*l,g[1]=e+o*l+i*c,g[2]=I[2],g}var forEach_1=forEach,vec=create_1();function forEach(g,I,C,A,t,e){var o,i;for(I||(I=3),C||(C=0),i=A?Math.min(A*I+C,g.length):g.length,o=C;o<i;o+=I)vec[0]=g[o],vec[1]=g[o+1],vec[2]=g[o+2],t(vec,vec,e),g[o]=vec[0],g[o+1]=vec[1],g[o+2]=vec[2];return g}var glVec3={EPSILON:epsilon,create:create_1,clone:clone_1,angle:angle_1,fromValues:fromValues_1,copy:copy_1,set:set_1,equals:equals_1,exactEquals:exactEquals_1,add:add_1,subtract:subtract_1,sub:sub,multiply:multiply_1,mul:mul,divide:divide_1,div:div,min:min_1,max:max_1,floor:floor_1,ceil:ceil_1,round:round_1,scale:scale_1,scaleAndAdd:scaleAndAdd_1,distance:distance_1,dist:dist,squaredDistance:squaredDistance_1,sqrDist:sqrDist,length:length_1,len:len,squaredLength:squaredLength_1,sqrLen:sqrLen,negate:negate_1,inverse:inverse_1,normalize:normalize_1,dot:dot_1,cross:cross_1,lerp:lerp_1,random:random_1,transformMat4:transformMat4_1,transformMat3:transformMat3_1,transformQuat:transformQuat_1,rotateX:rotateX_1,rotateY:rotateY_1,rotateZ:rotateZ_1,forEach:forEach_1};function _defineProperty$y(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class ChunkUtils{constructor(){}}function _defineProperty$x(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}_defineProperty$y(ChunkUtils,"getChunkName",(function(g,I){return void 0===I&&(I="|"),g[0]+I+g[1]})),_defineProperty$y(ChunkUtils,"getVoxelName",(function(g,I){return void 0===I&&(I="|"),(0|g[0])+I+(0|g[1])+I+(0|g[2])})),_defineProperty$y(ChunkUtils,"parseChunkName",(function(g,I){return void 0===I&&(I="|"),g.split(I).map((g=>parseInt(g,10)))})),_defineProperty$y(ChunkUtils,"scaleCoordsF",((g,I)=>{const C=glVec3.scale([0,0,0],g,I);return glVec3.floor(C,C)})),_defineProperty$y(ChunkUtils,"mapVoxelToChunkLocal",((g,I)=>{const[C,A]=ChunkUtils.mapVoxelToChunk(g,I),[t,e,o]=g;return[t-C*I,e,o-A*I]})),_defineProperty$y(ChunkUtils,"mapVoxelToChunk",((g,I)=>{const C=ChunkUtils.scaleCoordsF(g,1/I);return[C[0],C[2]]})),_defineProperty$y(ChunkUtils,"mapChunkToVoxel",((g,I)=>{const C=[0,0,0];return glVec3.copy(C,[g[0],0,g[1]]),glVec3.scale(C,C,I),C})),_defineProperty$y(ChunkUtils,"mapWorldToVoxel",(g=>ChunkUtils.scaleCoordsF(g,1)));class LightUtils{constructor(){}}_defineProperty$x(LightUtils,"extractSunlight",(g=>g>>12&15)),_defineProperty$x(LightUtils,"insertSunlight",((g,I)=>4095&g|I<<12)),_defineProperty$x(LightUtils,"extractRedLight",(g=>g>>8&15)),_defineProperty$x(LightUtils,"insertRedLight",((g,I)=>61695&g|I<<8)),_defineProperty$x(LightUtils,"extractGreenLight",(g=>g>>4&15)),_defineProperty$x(LightUtils,"insertGreenLight",((g,I)=>65295&g|I<<4)),_defineProperty$x(LightUtils,"extractBlueLight",(g=>15&g)),_defineProperty$x(LightUtils,"insertBlueLight",((g,I)=>65520&g|I)),_defineProperty$x(LightUtils,"canEnterInto",((g,I,C,A)=>{if(1!==Math.abs(I+C+A))throw new Error("This isn't supposed to happen. Light neighboring direction should be on 1 axis only.");const[t,e,o,i,l,c]=g;return 1===I?i:-1===I?t:1===C?l:-1===C?e:1===A?c:o})),_defineProperty$x(LightUtils,"canEnter",((g,I,C,A,t)=>{if(1!==Math.abs(C+A+t))throw new Error("This isn't supposed to happen. Light neighboring direction should be on 1 axis only.");const[e,o,i,l,c,n]=g,[d,s,Z,b,a,m]=I;return 1===C?e&&b:-1===C?l&&d:1===A?o&&a:-1===A?c&&s:1===t?i&&m:n&&Z}));const RED_LIGHT="RED",GREEN_LIGHT="GREEN",BLUE_LIGHT="BLUE",SUNLIGHT="SUNLIGHT";function _defineProperty$w(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}const TWO_PI=2*Math.PI;class MathUtils{constructor(){}}function _defineProperty$v(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$g(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$v(g,I,C[I])}))}return g}_defineProperty$w(MathUtils,"round",((g,I)=>Math.round(g*10**I)/10**I)),_defineProperty$w(MathUtils,"normalizeAngle",(g=>g-TWO_PI*Math.floor((g+Math.PI)/TWO_PI))),_defineProperty$w(MathUtils,"directionToQuaternion",((g,I,C)=>{const A=(()=>{const A=new three__WEBPACK_IMPORTED_MODULE_0__.yGw,t=new three__WEBPACK_IMPORTED_MODULE_0__._fP,e=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,0,0),o=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,1,0);return()=>t.setFromRotationMatrix(A.lookAt(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(-g,-I,-C),e,o))})();return A()}));const defaultOptions$f={gap:0,layers:1,width:1,widthSegments:8,side:three__WEBPACK_IMPORTED_MODULE_0__.Wl3,transparent:!1},BOX_SIDES=["back","front","top","bottom","left","right"];class BoxLayer extends three__WEBPACK_IMPORTED_MODULE_0__.Kj0{constructor(g,I,C,A,t,e,o,i){super(new three__WEBPACK_IMPORTED_MODULE_0__.DvJ(g,I,C)),_defineProperty$v(this,"materials",new Map),_defineProperty$v(this,"width",void 0),_defineProperty$v(this,"height",void 0),_defineProperty$v(this,"depth",void 0),_defineProperty$v(this,"widthSegments",void 0),_defineProperty$v(this,"heightSegments",void 0),_defineProperty$v(this,"depthSegments",void 0),_defineProperty$v(this,"side",void 0),_defineProperty$v(this,"transparent",void 0),_defineProperty$v(this,"paint",((g,I)=>{const C="all"===g?BOX_SIDES:"sides"===g?["front","back","left","right"]:Array.isArray(g)?g:[g];for(const t of C){var A;const g=this.materials.get(t);if(!g)continue;const C=null===(A=g.map)||void 0===A?void 0:A.image;if(!C)continue;const e=C.getContext("2d");if(!e)continue;e.imageSmoothingEnabled=!1;const{width:o,height:i}=this.getDimensionFromSide(t);I instanceof three__WEBPACK_IMPORTED_MODULE_0__.xEZ?e.drawImage(I.image,0,0,o,i):I instanceof three__WEBPACK_IMPORTED_MODULE_0__.Ilk?(e.save(),e.fillStyle=`rgb(${255*I.r},${255*I.g},${255*I.b})`,e.fillRect(0,0,o,i),e.restore()):"function"==typeof I?I(e,C):console.warn("Invalid art type: ",I),g.needsUpdate=!0,g.map.needsUpdate=!0}})),_defineProperty$v(this,"createCanvasMaterial",(g=>{const I=document.createElement("canvas"),{width:C,height:A}=this.getDimensionFromSide(g);I.width=C,I.height=A;const t=new three__WEBPACK_IMPORTED_MODULE_0__.vBJ({side:this.side,map:new three__WEBPACK_IMPORTED_MODULE_0__.xEZ(I),transparent:this.transparent,name:g});return t.toneMapped=!1,t.map&&(t.map.magFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,t.map.minFilter=three__WEBPACK_IMPORTED_MODULE_0__.FDw,t.map.wrapS=three__WEBPACK_IMPORTED_MODULE_0__.rpg,t.map.wrapT=three__WEBPACK_IMPORTED_MODULE_0__.rpg,t.map.needsUpdate=!0),t})),_defineProperty$v(this,"getDimensionFromSide",(g=>{switch(g){case"front":case"back":case"top":case"bottom":return{width:this.widthSegments,height:this.heightSegments};case"left":case"right":return{width:this.depthSegments,height:this.heightSegments};default:throw new Error("Cannot derive width/height from unknown side.")}})),this.width=g,this.height=I,this.depth=C,this.widthSegments=A,this.heightSegments=t,this.depthSegments=e,this.side=o,this.transparent=i;for(const n of BOX_SIDES)this.materials.set(n,this.createCanvasMaterial(n));const l=Array.from(this.materials.values()),c=l[0];l[0]=l[1],l[1]=c,this.material=l,this.rotation.y=Math.PI/2}}class CanvasBox extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{get boxMaterials(){return this.boxLayers[0].materials}constructor(g){var I;void 0===g&&(g={}),super(),I=this,_defineProperty$v(this,"options",void 0),_defineProperty$v(this,"boxLayers",[]),_defineProperty$v(this,"width",void 0),_defineProperty$v(this,"height",void 0),_defineProperty$v(this,"depth",void 0),_defineProperty$v(this,"paint",(function(g,C,A){if(void 0===A&&(A=0),A>=I.boxLayers.length)throw new Error("Canvas box layer does not exist.");I.boxLayers[A].paint(g,C)})),_defineProperty$v(this,"makeBoxes",(()=>{const{layers:g,gap:I,side:C,width:A,height:t,depth:e,widthSegments:o,heightSegments:i,depthSegments:l,transparent:c}=this.options;if(!A)throw new Error("CanvasBox width must be specified.");this.width=A,this.height=t||A,this.depth=e||A;for(let n=0;n<g;n++){const g=new BoxLayer(A+n*I*2,(t||A)+n*I*2,(e||A)+n*I*2,o,i||o,l||o,C,c);this.boxLayers.push(g),this.add(g)}})),this.options=_objectSpread$g({},defaultOptions$f,g),this.makeBoxes()}}const drawSun=function(g,I){return void 0===g&&(g=50),void 0===I&&(I="#f8ffb5"),(C,A)=>{const t=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(I);C.save(),C.beginPath();let e=A.width/2,o=A.height/2;const i=C.createRadialGradient(e,o,1,e,o,2*g);i.addColorStop(0,DOMUtils.rgba(1,1,1,.3)),i.addColorStop(1,DOMUtils.rgba(1,1,1,0)),C.arc(e,o,3*g,0,2*Math.PI,!1),C.fillStyle=i,C.fill(),C.closePath(),C.beginPath(),e=A.width/2-g/2,o=A.height/2-g/2,C.rect(e,o,g,g),C.fillStyle=DOMUtils.rgba(t.r,t.g,t.b,1),C.fill(),C.closePath(),C.beginPath();const l=g/1.6;e=A.width/2-l/2,o=A.height/2-l/2,C.rect(e,o,l,l),C.fillStyle=DOMUtils.rgba(1,1,1,.5),C.fill(),C.closePath(),C.restore()}},drawMoon=function(g,I,C){return void 0===g&&(g=20),void 0===I&&(I="#e6e2d1"),void 0===C&&(C=1),(A,t)=>{const e=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(I),o=t.width/2,i=t.height/2;A.beginPath();const l=A.createRadialGradient(o+g/2,i+g/2,1,o+g/2,i+g/2,2*g);l.addColorStop(0,DOMUtils.rgba(1,1,1,.3)),l.addColorStop(1,DOMUtils.rgba(1,1,1,0)),A.arc(o+g/2,i+g/2,2*g,0,2*Math.PI,!1),A.fillStyle=l,A.fill(),A.closePath(),A.save(),A.beginPath(),A.rect(o,i,g,g),A.clip(),A.beginPath(),A.rect(o,i,g,g),A.fillStyle=DOMUtils.rgba(e.r,e.g,e.b,1),A.fill(),A.translate(o,i),A.beginPath(),A.rect(4,4,g-8,g-8),A.fillStyle=DOMUtils.rgba(1,1,1,.8),A.fill();const c=C*g*2-g;A.beginPath(),A.rect(c,0,g,g),A.fillStyle=DOMUtils.rgba(0,0,0,.8),A.fill(),A.beginPath(),A.rect(2+c,2,g-4,g-4),A.fillStyle=DOMUtils.rgba(0,0,0,.9),A.fill(),A.restore()}},drawStars=function(g,I){return void 0===g&&(g=100),void 0===I&&(I=["#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#8589FF","#FF8585"]),(C,A)=>{const t=C.globalAlpha;for(let e=0;e<g;e++)C.globalAlpha=1*Math.random()+.5,C.beginPath(),C.arc(Math.random()*A.width,Math.random()*A.height,.5*Math.random(),0,2*Math.PI,!1),C.fillStyle=I[Math.floor(Math.random()*I.length)],C.fill();C.globalAlpha=t}},drawCrown=g=>{g.fillStyle="#f7ea00",[[0,0],[0,1],[0,2],[1,2],[2,2],[2,1],[3,0],[3,2],[4,0],[4,2],[5,1],[5,2],[6,2],[7,0],[7,1],[7,2]].forEach((I=>{let[C,A]=I;return g.fillRect(C,A,1,1)})),g.fillStyle="#51c2d5",[[1,1],[6,1]].forEach((I=>{let[C,A]=I;return g.fillRect(C,A,1,1)})),g.fillStyle="#ff005c",g.fillRect(3,1,1,1),g.fillRect(4,1,1,1)},artFunctions={drawCrown:drawCrown,drawSun:drawSun,drawMoon:drawMoon,drawStars:drawStars};var SkyFragmentShader="#define GLSLIFY 1\nuniform vec3 uTopColor;uniform vec3 uMiddleColor;uniform vec3 uBottomColor;uniform float uSkyOffset;uniform float uVoidOffset;uniform float uExponent;uniform float uExponent2;varying vec3 vWorldPosition;void main(){float h=normalize(vWorldPosition+uSkyOffset).y;float h2=normalize(vWorldPosition+uVoidOffset).y;vec3 color=mix(uMiddleColor,uTopColor,max(pow(max(h,0.0),uExponent),0.0));gl_FragColor=vec4(mix(color,uBottomColor,max(pow(max(-h2,0.0),uExponent2),0.0)),1.0);}",SkyVertexShader="#define GLSLIFY 1\nvarying vec3 vWorldPosition;void main(){vec4 worldPosition=modelMatrix*vec4(position,1.0);vWorldPosition=worldPosition.xyz;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}";function _defineProperty$u(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$f(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$u(g,I,C[I])}))}return g}const defaultOptions$e={dimension:2e3,lerpFactor:.1,transitionSpan:.05};class Sky extends CanvasBox{constructor(g){void 0===g&&(g={}),super({width:.8*(g.dimension?g.dimension:defaultOptions$e.dimension),side:three__WEBPACK_IMPORTED_MODULE_0__._Li,transparent:!0,widthSegments:512,heightSegments:512,depthSegments:512}),_defineProperty$u(this,"options",void 0),_defineProperty$u(this,"uTopColor",void 0),_defineProperty$u(this,"uMiddleColor",void 0),_defineProperty$u(this,"uBottomColor",void 0),_defineProperty$u(this,"uSkyOffset",void 0),_defineProperty$u(this,"uVoidOffset",void 0),_defineProperty$u(this,"shadingData",[]),_defineProperty$u(this,"setShadingPhases",(g=>{if(0!==g.length){if(1===g.length){const{top:I,middle:C,bottom:A}=g[0].color,t=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(I).convertLinearToSRGB(),e=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(C).convertLinearToSRGB(),o=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(A).convertLinearToSRGB();this.uTopColor.value.copy(t),this.uMiddleColor.value.copy(e),this.uBottomColor.value.copy(o),this.uSkyOffset.value=g[0].skyOffset,this.uVoidOffset.value=g[0].voidOffset}this.shadingData=g,this.shadingData.sort(((g,I)=>g.start-I.start))}})),_defineProperty$u(this,"getTopColor",(()=>this.uTopColor.value)),_defineProperty$u(this,"getMiddleColor",(()=>this.uMiddleColor.value)),_defineProperty$u(this,"getBottomColor",(()=>this.uBottomColor.value)),_defineProperty$u(this,"update",((g,I,C)=>{if(this.rotation.z=2*Math.PI*(I/C),["top","right","left","front","back"].forEach((g=>{this.boxMaterials.get(g)})),this.position.copy(g),this.shadingData.length<=1)return;const A=[],t=this.options.transitionSpan*C;for(let d=0;d<this.shadingData.length;d++){const g=this.shadingData[d],e=this.shadingData[(d+1)%this.shadingData.length],{start:o}=g,i=o*C,l=e.start*C;if(i<l?I>=i&&I<l:I<l||I>=i){const e=Math.max(Math.min(I>=i?(I-i)/t:(I+C-i)/t,1),0);if(A.push([e,g]),I>=i?I<i+t:I+C<i+t){const g=this.shadingData[(d-1<0?d-1+this.shadingData.length:d-1)%this.shadingData.length];A.push([1-e,g])}break}}const e=[0,0,0],o=[0,0,0],i=[0,0,0];let l=0,c=0;const n={r:0,g:0,b:0};A.forEach((g=>{let[I,C]=g;const{skyOffset:A,voidOffset:t,color:{top:d,middle:s,bottom:Z}}=C,b=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(d).convertLinearToSRGB(),a=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(s).convertLinearToSRGB(),m=new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(Z).convertLinearToSRGB();b.getRGB(n),e[0]+=n.r*I,e[1]+=n.g*I,e[2]+=n.b*I,a.getRGB(n),o[0]+=n.r*I,o[1]+=n.g*I,o[2]+=n.b*I,m.getRGB(n),i[0]+=n.r*I,i[1]+=n.g*I,i[2]+=n.b*I,l+=I*A,c+=I*t})),this.uTopColor.value.setRGB(e[0],e[1],e[2]),this.uMiddleColor.value.setRGB(o[0],o[1],o[2]),this.uBottomColor.value.setRGB(i[0],i[1],i[2]),this.uSkyOffset.value=l,this.uVoidOffset.value=c})),_defineProperty$u(this,"createSkyShading",(()=>{const{color:{top:g,middle:I,bottom:C},skyOffset:A,voidOffset:t}={color:{top:"#222",middle:"#222",bottom:"#222"},skyOffset:0,voidOffset:1200};this.uTopColor={value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(g)},this.uMiddleColor={value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(I)},this.uBottomColor={value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(C)},this.uSkyOffset={value:A},this.uVoidOffset={value:t};const e=new three__WEBPACK_IMPORTED_MODULE_0__.Kgo(this.options.dimension,2),o=new three__WEBPACK_IMPORTED_MODULE_0__.jyz({uniforms:{uTopColor:this.uTopColor,uMiddleColor:this.uMiddleColor,uBottomColor:this.uBottomColor,uSkyOffset:this.uSkyOffset,uVoidOffset:this.uVoidOffset,uExponent:{value:.6},uExponent2:{value:1.2}},vertexShader:SkyVertexShader,fragmentShader:SkyFragmentShader,depthWrite:!1,side:three__WEBPACK_IMPORTED_MODULE_0__._Li}),i=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(e,o);this.attach(i)})),this.options=_objectSpread$f({},this.options,defaultOptions$e,g),this.boxMaterials.forEach((g=>g.depthWrite=!1)),this.frustumCulled=!1,this.renderOrder=-1,this.createSkyShading()}}function _defineProperty$t(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$e(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$t(g,I,C[I])}))}return g}const defaultOptions$d={radius:.1,height:.8,coneRadius:.2,coneHeight:.2,color:"red"};class Arrow extends three__WEBPACK_IMPORTED_MODULE_0__.tGC{constructor(g){void 0===g&&(g={}),super(),_defineProperty$t(this,"options",void 0);const{radius:I,height:C,coneRadius:A,coneHeight:t}=this.options=_objectSpread$e({},defaultOptions$d,g),e="string"==typeof this.options.color?new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(this.options.color):this.options.color;[...this.children].forEach((g=>this.remove(g))),this.add(new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(new three__WEBPACK_IMPORTED_MODULE_0__.fHI(I,I,C),new three__WEBPACK_IMPORTED_MODULE_0__.vBJ({color:e})));const o=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(new three__WEBPACK_IMPORTED_MODULE_0__.fHI(0,A,t),new three__WEBPACK_IMPORTED_MODULE_0__.vBJ({color:e}));o.position.y=(t+C)/2,this.add(o)}}function _defineProperty$s(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class ColorText{static split(g,I){void 0===I&&(I="black");const C=g.split(new RegExp(`(\\${ColorText.SPLITTER}[^\\${ColorText.SPLITTER}]*\\${ColorText.SPLITTER})`)).filter(Boolean);C.length&&(C[0].includes(ColorText.SPLITTER)||C.unshift(`${ColorText.SPLITTER}${I}${ColorText.SPLITTER}`),C[C.length-1].includes(ColorText.SPLITTER)&&C.push(""));const A=[];for(let t=0;t<C.length;t+=2){const g=C[t].substring(1,C[t].length-1),I=C[t+1];A.push({color:g,text:I})}return A}}function _defineProperty$r(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}_defineProperty$s(ColorText,"SPLITTER","\u2206");class SpriteText extends three__WEBPACK_IMPORTED_MODULE_0__.jyi{get text(){return this._text}set text(g){this._text=g,this.generate()}get textHeight(){return this._textHeight}set textHeight(g){this._textHeight=g,this.generate()}get backgroundColor(){return this._backgroundColor}set backgroundColor(g){this._backgroundColor=g,this.generate()}get padding(){return this._padding}set padding(g){this._padding=g,this.generate()}get borderWidth(){return this._borderWidth}set borderWidth(g){this._borderWidth=g,this.generate()}get borderRadius(){return this._borderRadius}set borderRadius(g){this._borderRadius=g,this.generate()}get borderColor(){return this._borderColor}set borderColor(g){this._borderColor=g,this.generate()}get fontFace(){return this._fontFace}set fontFace(g){this._fontFace=g,this.generate()}get fontSize(){return this._fontSize}set fontSize(g){this._fontSize=g,this.generate()}get fontWeight(){return this._fontWeight}set fontWeight(g){this._fontWeight=g,this.generate()}get strokeWidth(){return this._strokeWidth}set strokeWidth(g){this._strokeWidth=g,this.generate()}get strokeColor(){return this._strokeColor}set strokeColor(g){this._strokeColor=g,this.generate()}constructor(g,I){void 0===g&&(g=""),void 0===I&&(I=10),super(new three__WEBPACK_IMPORTED_MODULE_0__.xeV),_defineProperty$r(this,"_text",void 0),_defineProperty$r(this,"_textHeight",void 0),_defineProperty$r(this,"_backgroundColor",void 0),_defineProperty$r(this,"_padding",0),_defineProperty$r(this,"_borderWidth",0),_defineProperty$r(this,"_borderRadius",0),_defineProperty$r(this,"_borderColor","white"),_defineProperty$r(this,"_strokeWidth",0),_defineProperty$r(this,"_strokeColor","white"),_defineProperty$r(this,"_fontFace","Arial"),_defineProperty$r(this,"_fontSize",90),_defineProperty$r(this,"_fontWeight","normal"),_defineProperty$r(this,"_canvas",document.createElement("canvas")),_defineProperty$r(this,"generate",(()=>{const g=this._canvas,I=g.getContext("2d"),C=Array.isArray(this.borderWidth)?this.borderWidth:[this.borderWidth,this.borderWidth],A=C.map((g=>g*this.fontSize*.1)),t=(Array.isArray(this.borderRadius)?this.borderRadius:[this.borderRadius,this.borderRadius,this.borderRadius,this.borderRadius]).map((g=>g*this.fontSize*.1)),e=Array.isArray(this.padding)?this.padding:[this.padding,this.padding],o=e.map((g=>g*this.fontSize*.1)),i=this.text.split("\n"),l=`${this.fontWeight} ${this.fontSize}px ${this.fontFace}`;I.font=l;const c=Math.max(...i.map((g=>{const C=ColorText.split(g);let A=0;return C.forEach((g=>{let{text:C}=g;return A+=I.measureText(C).width})),A}))),n=this.fontSize*i.length;if(g.width=c+2*A[0]+2*o[0],g.height=n+2*A[1]+2*o[1],this.borderWidth){if(I.strokeStyle=this.borderColor,A[0]){const C=A[0]/2;I.lineWidth=A[0],I.beginPath(),I.moveTo(C,t[0]),I.lineTo(C,g.height-t[3]),I.moveTo(g.width-C,t[1]),I.lineTo(g.width-C,g.height-t[2]),I.stroke()}if(A[1]){const C=A[1]/2;I.lineWidth=A[1],I.beginPath(),I.moveTo(Math.max(A[0],t[0]),C),I.lineTo(g.width-Math.max(A[0],t[1]),C),I.moveTo(Math.max(A[0],t[3]),g.height-C),I.lineTo(g.width-Math.max(A[0],t[2]),g.height-C),I.stroke()}if(this.borderRadius){const C=Math.max(...A),e=C/2;I.lineWidth=C,I.beginPath(),[!!t[0]&&[t[0],e,e,t[0]],!!t[1]&&[g.width-t[1],g.width-e,e,t[1]],!!t[2]&&[g.width-t[2],g.width-e,g.height-e,g.height-t[2]],!!t[3]&&[t[3],e,g.height-e,g.height-t[3]]].filter((g=>g)).forEach((g=>{let[C,A,t,e]=g;I.moveTo(C,t),I.quadraticCurveTo(A,t,A,e)})),I.stroke()}}this.backgroundColor&&(I.fillStyle=this.backgroundColor,this.borderRadius?(I.beginPath(),I.moveTo(A[0],t[0]),[[A[0],t[0],g.width-t[1],A[1],A[1],A[1]],[g.width-A[0],g.width-A[0],g.width-A[0],A[1],t[1],g.height-t[2]],[g.width-A[0],g.width-t[2],t[3],g.height-A[1],g.height-A[1],g.height-A[1]],[A[0],A[0],A[0],g.height-A[1],g.height-t[3],t[0]]].forEach((g=>{let[C,A,t,e,o,i]=g;I.quadraticCurveTo(C,e,A,o),I.lineTo(t,i)})),I.closePath(),I.fill()):I.fillRect(A[0],A[1],g.width-2*A[0],g.height-2*A[1])),I.translate(...A),I.translate(...o),I.font=l,I.textBaseline="bottom";const d=this.strokeWidth>0;d&&(I.lineWidth=this.strokeWidth*this.fontSize/10,I.strokeStyle=this.strokeColor),i.forEach(((g,C)=>{const A=ColorText.split(g,this.strokeColor);let t=0;A.forEach((g=>{let{text:C}=g;return t+=I.measureText(C).width}));let e=(c-t)/2;const o=(C+1)*this.fontSize;A.forEach((g=>{let{color:C,text:A}=g;I.fillStyle=C,I.fillText(A,e,o),d&&I.strokeText(A,e,o),I.fillText(A,e,o),e+=I.measureText(A).width}))})),this.material.map&&this.material.map.dispose();const s=this.material.map=new three__WEBPACK_IMPORTED_MODULE_0__.xEZ(g);s.minFilter=three__WEBPACK_IMPORTED_MODULE_0__.wem,s.needsUpdate=!0;const Z=this.textHeight*i.length+2*C[1]+2*e[1];this.scale.set(Z*g.width/g.height,Z,0)})),this._text=`${g}`,this._textHeight=I,this._backgroundColor=!1,this.generate()}}function _defineProperty$q(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$d(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$q(g,I,C[I])}))}return g}const defaultOptions$c={fontFace:"monospace",fontSize:.1,yOffset:0,color:"#ffffff",backgroundColor:"#00000077"};class NameTag extends SpriteText{constructor(g,I){var C;void 0===I&&(I={}),super(g,null!==(C=I.fontSize)&&void 0!==C?C:defaultOptions$c.fontSize);const{fontFace:A,yOffset:t,backgroundColor:e,color:o}=_objectSpread$d({},defaultOptions$c,I);this.fontFace=A,this.position.y+=t,this.backgroundColor=e,this.material.depthTest=!1,this.renderOrder=1e12,this.strokeColor=o;const i=this.material.map;i&&(i.minFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,i.magFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD)}}function _defineProperty$p(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$c(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$p(g,I,C[I])}))}return g}function ownKeys$2(g,I){var C=Object.keys(g);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(g);I&&(A=A.filter((function(I){return Object.getOwnPropertyDescriptor(g,I).enumerable}))),C.push.apply(C,A)}return C}function _objectSpreadProps$2(g,I){return I=null!=I?I:{},Object.getOwnPropertyDescriptors?Object.defineProperties(g,Object.getOwnPropertyDescriptors(I)):ownKeys$2(Object(I)).forEach((function(C){Object.defineProperty(g,C,Object.getOwnPropertyDescriptor(I,C))})),g}const CHARACTER_SCALE=.9,defaultCharacterOptions={swingLerp:.8,walkingSpeed:1.4,positionLerp:.7,rotationLerp:.2,idleArmSwing:.06},defaultHeadOptions={gap:.1*CHARACTER_SCALE,layers:1,side:three__WEBPACK_IMPORTED_MODULE_0__.ehD,width:.5*CHARACTER_SCALE,widthSegments:16,height:.25*CHARACTER_SCALE,heightSegments:8,depth:.5*CHARACTER_SCALE,depthSegments:16,neckGap:.05*CHARACTER_SCALE},defaultBodyOptions={gap:.1*CHARACTER_SCALE,layers:1,side:three__WEBPACK_IMPORTED_MODULE_0__.ehD,width:1*CHARACTER_SCALE,widthSegments:16},defaultArmsOptions={gap:.1*CHARACTER_SCALE,layers:1,side:three__WEBPACK_IMPORTED_MODULE_0__.ehD,width:.25*CHARACTER_SCALE,height:.5*CHARACTER_SCALE,depth:.25*CHARACTER_SCALE,widthSegments:8,heightSegments:16,depthSegments:8,shoulderGap:.05*CHARACTER_SCALE,shoulderDrop:.25*CHARACTER_SCALE},defaultLegsOptions={gap:.1*CHARACTER_SCALE,layers:1,side:three__WEBPACK_IMPORTED_MODULE_0__.ehD,width:.25*CHARACTER_SCALE,height:.25*CHARACTER_SCALE,depth:.25*CHARACTER_SCALE,widthSegments:3,heightSegments:3,depthSegments:3,betweenLegsGap:.2*CHARACTER_SCALE};class Character extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{update(){this.calculateDelta(),this.playArmSwingAnimation(),this.playWalkingAnimation(),this.lerpAll()}set(g,I){g&&I&&(this.newPosition.set(g[0],g[1],g[2]),this.newDirection.copy(MathUtils.directionToQuaternion(I[0],I[1],I[2])),this.newBodyDirection.copy(MathUtils.directionToQuaternion(I[0],0,I[2])))}set username(g){var I;this.nametag||(this.nametag=new NameTag(g,_objectSpread$c({yOffset:this.head.height/2+.2,fontSize:.2},null!==(I=this.options.nameTagOptions)&&void 0!==I?I:{})),this.add(this.nametag));g?this.nametag.text=g:this.nametag.visible=!1}get username(){return this.nametag?this.nametag.text:""}get eyeHeight(){return this.options.legs.height+this.options.body.height+this.options.head.neckGap+this.options.head.height/2}get totalHeight(){return this.options.legs.height+this.options.body.height+this.options.head.neckGap+this.options.head.height}constructor(g){var I,C,A,t,e,o,i,l,c;void 0===g&&(g={}),super(),_defineProperty$p(this,"options",void 0),_defineProperty$p(this,"headGroup",void 0),_defineProperty$p(this,"bodyGroup",void 0),_defineProperty$p(this,"leftArmGroup",void 0),_defineProperty$p(this,"rightArmGroup",void 0),_defineProperty$p(this,"leftLegGroup",void 0),_defineProperty$p(this,"rightLegGroup",void 0),_defineProperty$p(this,"head",void 0),_defineProperty$p(this,"body",void 0),_defineProperty$p(this,"leftArm",void 0),_defineProperty$p(this,"rightArm",void 0),_defineProperty$p(this,"leftLeg",void 0),_defineProperty$p(this,"rightLeg",void 0),_defineProperty$p(this,"nametag",void 0),_defineProperty$p(this,"speed",0),_defineProperty$p(this,"newPosition",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$p(this,"newBodyDirection",new three__WEBPACK_IMPORTED_MODULE_0__._fP),_defineProperty$p(this,"newDirection",new three__WEBPACK_IMPORTED_MODULE_0__._fP),_defineProperty$p(this,"onMove",void 0),_defineProperty$p(this,"onIdle",void 0),_defineProperty$p(this,"createModel",(()=>{const g=new CanvasBox(_objectSpread$c({},defaultHeadOptions,this.options.head?this.options.head:{})),I=new CanvasBox(_objectSpread$c({},defaultBodyOptions,this.options.body?this.options.body:{})),C=new CanvasBox(_objectSpread$c({},defaultArmsOptions,this.options.arms?this.options.arms:{})),A=new CanvasBox(_objectSpread$c({},defaultArmsOptions,this.options.arms?this.options.arms:{})),t=new CanvasBox(_objectSpread$c({},defaultLegsOptions,this.options.legs?this.options.legs:{})),e=new CanvasBox(_objectSpread$c({},defaultLegsOptions,this.options.legs?this.options.legs:{}));this.headGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.bodyGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.leftArmGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.rightArmGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.leftLegGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.rightLegGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.headGroup.add(g),g.position.y+=g.height/2,this.headGroup.position.y+=I.height+t.height,this.options.head&&this.options.head.neckGap&&(this.headGroup.position.y+=this.options.head.neckGap),this.bodyGroup.add(I),I.position.y+=I.height/2,this.bodyGroup.position.y+=t.height,this.leftArmGroup.add(C),C.position.y-=C.height/2,C.position.x-=C.width/2,this.leftArmGroup.position.y+=I.height,this.leftArmGroup.position.x-=I.width/2,this.rightArmGroup.add(A),A.position.y-=A.height/2,A.position.x+=A.width/2,this.rightArmGroup.position.y+=I.height,this.rightArmGroup.position.x+=I.width/2,this.options.arms&&(this.options.arms.shoulderDrop&&(this.leftArmGroup.position.y-=this.options.arms.shoulderDrop,this.rightArmGroup.position.y-=this.options.arms.shoulderDrop),this.options.arms.shoulderGap&&(this.leftArmGroup.position.x-=this.options.arms.shoulderGap,this.rightArmGroup.position.x+=this.options.arms.shoulderGap)),this.leftLegGroup.add(t),t.position.y-=t.height/2,t.position.x-=t.width/2,this.rightLegGroup.add(e),e.position.y-=e.height/2,e.position.x+=e.width/2,this.options.legs&&this.options.legs.betweenLegsGap&&(this.leftLegGroup.position.x-=this.options.legs.betweenLegsGap/2,this.rightLegGroup.position.x+=this.options.legs.betweenLegsGap/2),g.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#96baff")),g.paint("front",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#f99999")),I.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#2b2e42")),C.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#548ca8")),A.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#548ca8")),t.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#96baff")),e.paint("all",new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#96baff")),this.add(this.headGroup,this.bodyGroup),this.bodyGroup.add(this.leftArmGroup,this.rightArmGroup,this.leftLegGroup,this.rightLegGroup),this.headGroup.position.y-=this.eyeHeight,this.bodyGroup.position.y-=this.eyeHeight,this.head=g,this.body=I,this.leftArm=C,this.rightArm=A,this.leftLeg=t,this.rightLeg=e})),_defineProperty$p(this,"calculateDelta",(()=>{const g=this.position.clone(),I=this.newPosition.clone();g.y=I.y=0;var C,A;g.distanceTo(I)>1e-5?(0===this.speed&&(null===(C=this.onMove)||void 0===C||C.call(this)),this.speed=this.options.walkingSpeed):(this.speed>0&&(null===(A=this.onIdle)||void 0===A||A.call(this)),this.speed=0)})),_defineProperty$p(this,"lerpAll",(()=>{0!==this.newPosition.length()&&this.position.lerp(this.newPosition,this.options.positionLerp),0!==this.newDirection.length()&&this.headGroup.rotation.setFromQuaternion(this.newDirection),0!==this.newBodyDirection.length()&&this.bodyGroup.quaternion.slerp(this.newBodyDirection,this.options.rotationLerp)})),_defineProperty$p(this,"playArmSwingAnimation",(()=>{const g=100,I=Math.max(this.speed,this.options.idleArmSwing),C=1*I;this.leftArmGroup.rotation.x=three__WEBPACK_IMPORTED_MODULE_0__.M8C.lerp(this.leftArmGroup.rotation.x,Math.sin(performance.now()*I/g)*C,this.options.swingLerp),this.leftArmGroup.rotation.z=three__WEBPACK_IMPORTED_MODULE_0__.M8C.lerp(this.leftArmGroup.rotation.z,Math.cos(performance.now()*I/g)**2*C*.1,this.options.swingLerp),this.rightArmGroup.rotation.x=three__WEBPACK_IMPORTED_MODULE_0__.M8C.lerp(this.rightArmGroup.rotation.x,Math.sin(performance.now()*I/g+Math.PI)*C,this.options.swingLerp),this.rightArmGroup.rotation.z=three__WEBPACK_IMPORTED_MODULE_0__.M8C.lerp(this.rightArmGroup.rotation.z,-(Math.sin(performance.now()*I/g)**2)*C*.1,this.options.swingLerp)})),_defineProperty$p(this,"playWalkingAnimation",(()=>{const g=1*this.speed;this.leftLegGroup.rotation.x=-Math.sin(performance.now()*this.speed/100)*g,this.rightLegGroup.rotation.x=Math.sin(performance.now()*this.speed/100)*g})),this.options=_objectSpreadProps$2(_objectSpread$c({},defaultCharacterOptions,g),{head:_objectSpreadProps$2(_objectSpread$c({},defaultHeadOptions,g.head||{}),{depth:(null===(I=g.head)||void 0===I?void 0:I.depth)||(null===(C=g.head)||void 0===C?void 0:C.width)||defaultHeadOptions.width,height:(null===(A=g.head)||void 0===A?void 0:A.height)||defaultHeadOptions.height||defaultHeadOptions.width}),body:_objectSpreadProps$2(_objectSpread$c({},defaultBodyOptions,g.body||{}),{depth:(null===(t=g.body)||void 0===t?void 0:t.depth)||defaultBodyOptions.depth||defaultBodyOptions.width,height:(null===(e=g.body)||void 0===e?void 0:e.height)||defaultBodyOptions.height||defaultBodyOptions.width}),arms:_objectSpreadProps$2(_objectSpread$c({},defaultArmsOptions,g.arms||{}),{depth:(null===(o=g.arms)||void 0===o?void 0:o.depth)||defaultArmsOptions.width,height:(null===(i=g.arms)||void 0===i?void 0:i.height)||defaultArmsOptions.height}),legs:_objectSpreadProps$2(_objectSpread$c({},defaultLegsOptions,g.legs||{}),{depth:(null===(l=g.legs)||void 0===l?void 0:l.depth)||defaultLegsOptions.width,height:(null===(c=g.legs)||void 0===c?void 0:c.height)||defaultLegsOptions.height})}),this.createModel()}}function _defineProperty$o(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$b(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$o(g,I,C[I])}))}return g}const defaultOptions$b={stats:!0,onByDefault:!0,entryStyles:{},entriesClass:"debug-entries",lineStyles:{},lineClass:"debug-line",dataStyles:{},dataClass:"debug-data",showVoxelize:!0,asyncPeriod:1e3};class Debug extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{constructor(g,I){var C;void 0===g&&(g=document.body),void 0===I&&(I={}),super(),C=this,_defineProperty$o(this,"options",void 0),_defineProperty$o(this,"stats",void 0),_defineProperty$o(this,"dataWrapper",void 0),_defineProperty$o(this,"entriesWrapper",void 0),_defineProperty$o(this,"domElement",void 0),_defineProperty$o(this,"dataEntries",[]),_defineProperty$o(this,"registerDisplay",(function(g,I,A,t){void 0===t&&(t=g=>g);const e=C.makeDataEntry(),o={title:g,element:e,object:I,formatter:t,attribute:A};return C.dataEntries.push(o),C.entriesWrapper.insertBefore(e,C.entriesWrapper.firstChild),"AsyncFunction"===I.constructor.name&&setInterval((()=>{I().then((I=>{e.textContent=`${g?`${g}: `:""}${t(I)}`}))}),C.options.asyncPeriod),C})),_defineProperty$o(this,"removeDisplay",(g=>{const I=this.dataEntries.findIndex((I=>I.title===g)),C=this.dataEntries.splice(I,1)[0];C&&this.entriesWrapper.removeChild(C.element)})),_defineProperty$o(this,"displayTitle",(g=>{const I=this.makeDataEntry(!0);return I.textContent=g,this.entriesWrapper.insertBefore(I,this.entriesWrapper.firstChild),this})),_defineProperty$o(this,"displayNewline",(()=>{const g=this.makeDataEntry(!0);return this.entriesWrapper.insertBefore(g,this.entriesWrapper.firstChild),this})),_defineProperty$o(this,"toggle",(function(g){void 0===g&&(g=null),C.visible=null!==g?g:!C.visible;const I=C.entriesWrapper.style.visibility,A=g?"visible":"visible"===I?"hidden":"visible";C.entriesWrapper.style.visibility=A,C.dataWrapper.style.visibility=A,C.stats&&(C.stats.dom.style.visibility=A)})),_defineProperty$o(this,"update",(()=>{var g;for(const{element:I,title:C,attribute:A,object:t,formatter:e}of this.dataEntries){if("AsyncFunction"===t.constructor.name)continue;const g=t?"function"==typeof t?t():A?t[A]:"":"";I.textContent=`${C?`${C}: `:""}${e(g)}`}null===(g=this.stats)||void 0===g||g.update()})),_defineProperty$o(this,"makeDataEntry",(function(g){void 0===g&&(g=!1);const I=document.createElement("p");return I.classList.add(C.options.lineClass),DOMUtils.applyStyles(I,_objectSpread$b({},g?{height:"16px"}:{},C.options.lineStyles||{})),I})),_defineProperty$o(this,"makeDOM",(()=>{var g;(this.dataWrapper=document.createElement("div"),this.dataWrapper.id="data-wrapper",this.dataWrapper.classList.add(this.options.dataClass),this.entriesWrapper=document.createElement("div"),this.entriesWrapper.classList.add(this.options.entriesClass),DOMUtils.applyStyles(this.dataWrapper,this.options.dataStyles),DOMUtils.applyStyles(this.entriesWrapper,this.options.entryStyles),this.options.stats)&&(this.stats=new three_examples_jsm_libs_stats_module_js__WEBPACK_IMPORTED_MODULE_1__.Z,null===(g=this.stats.dom.parentNode)||void 0===g||g.removeChild(this.stats.dom),DOMUtils.applyStyles(this.stats.dom,{position:"relative",top:"unset",bottom:"unset",left:"unset",zIndex:"1000000000000",marginTop:"13.333px"}))})),_defineProperty$o(this,"setup",(()=>{this.options.showVoxelize&&(this.displayTitle("Voxelize 0.1.150"),this.displayNewline())})),_defineProperty$o(this,"mount",(()=>{var g;(this.dataWrapper.appendChild(this.entriesWrapper),this.stats)&&this.dataWrapper.appendChild(null===(g=this.stats)||void 0===g?void 0:g.dom);this.domElement.appendChild(this.dataWrapper)})),this.domElement=g;const{onByDefault:A}=this.options=_objectSpread$b({},defaultOptions$b,I);this.makeDOM(),this.setup(),this.mount(),this.toggle(A)}}var OverlayFragmentShader="#define GLSLIFY 1\nuniform vec3 overlay;uniform float opacity;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){outputColor=vec4(mix(inputColor.rgb,overlay,opacity),inputColor.a);}";function _defineProperty$n(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class BlockOverlayEffect extends postprocessing__WEBPACK_IMPORTED_MODULE_2__.Qm{get opacity(){return this.uniforms.get("opacity").value}set opacity(g){this.uniforms.get("opacity").value=g}get overlay(){return this.uniforms.get("overlay").value}set overlay(g){const I=this.uniforms.get("overlay").value;I.x=g.r,I.y=g.g,I.z=g.b}constructor(g,I){super("BlockOverlayEffect",OverlayFragmentShader,{uniforms:new Map([["overlay",new three__WEBPACK_IMPORTED_MODULE_0__.xWb(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,0,1))],["opacity",new three__WEBPACK_IMPORTED_MODULE_0__.xWb(0)]])}),_defineProperty$n(this,"world",void 0),_defineProperty$n(this,"camera",void 0),_defineProperty$n(this,"overlays",void 0),_defineProperty$n(this,"oldId",void 0),_defineProperty$n(this,"addOverlay",void 0),_defineProperty$n(this,"update",void 0),this.world=g,this.camera=I,this.overlays=new Map,this.addOverlay=(g,I,C)=>{this.overlays.set("number"==typeof g?g:g.toLowerCase(),[I,C])},this.update=()=>{if(!this.world.isInitialized)return;const g=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;this.camera.getWorldPosition(g);const I=this.world.getVoxelAt(g.x,g.y,g.z);if(this.oldId===I)return;this.oldId=I;const C=this.world.getBlockById(I),A=this.overlays.get(I)||this.overlays.get(C.name.toLowerCase());A?(this.overlay=A[0],this.opacity=A[1]):this.opacity=0}}}function _defineProperty$m(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$a(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$m(g,I,C[I])}))}return g}const defaultOptions$a={maxDistance:10,maxRadius:.5};class Shadow extends three__WEBPACK_IMPORTED_MODULE_0__.Kj0{constructor(g,I){void 0===I&&(I={}),super(Shadow.GEOMETRY,Shadow.MATERIAL),_defineProperty$m(this,"world",void 0),_defineProperty$m(this,"options",void 0),_defineProperty$m(this,"update",void 0),this.world=g,this.update=()=>{if(!this.parent)return;const g=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;this.parent.getWorldPosition(g);const{maxDistance:I}=this.options,C=this.world.raycastVoxels(g.toArray(),[0,-1,0],I);if(this.visible=!!C,!C)return;const{point:A}=C;if(isNaN(A[0]))return;const t=Math.sqrt((A[0]-g.x)**2+(A[1]-g.y)**2+(A[2]-g.z)**2),e=Math.max(1-t/I,0)**2,o=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(A[0],A[1]+Shadow.Y_OFFSET,A[2]);o.sub(g),this.position.copy(o),this.scale.set(e,e,1)},this.options=_objectSpread$a({},defaultOptions$a,I),this.rotateX(Math.PI/2),this.renderOrder=-1}}_defineProperty$m(Shadow,"MATERIAL",new three__WEBPACK_IMPORTED_MODULE_0__.vBJ({side:three__WEBPACK_IMPORTED_MODULE_0__.ehD,color:"rgb(0,0,0)",opacity:.3,depthWrite:!1,transparent:!0})),_defineProperty$m(Shadow,"GEOMETRY",new three__WEBPACK_IMPORTED_MODULE_0__.zf8(defaultOptions$a.maxRadius,30)),_defineProperty$m(Shadow,"Y_OFFSET",.01);class Shadows extends Array{constructor(g){var I;if(super(),I=this,_defineProperty$m(this,"world",void 0),_defineProperty$m(this,"update",(()=>{this.forEach(((g,I)=>{g.parent||this.splice(I,1)})),this.forEach((g=>{g.update()}))})),_defineProperty$m(this,"add",(function(g,C){void 0===C&&(C={});const A=new Shadow(I.world,C);g.add(A),I.push(A)})),!g)throw new Error("Shadows: world is required.");this.world=g}}function _defineProperty$l(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$9(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$l(g,I,C[I])}))}return g}const position=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,defaultOptions$9={lerpFactor:.1};class LightShined{constructor(g,I){var C=this;void 0===I&&(I={}),_defineProperty$l(this,"world",void 0),_defineProperty$l(this,"options",void 0),_defineProperty$l(this,"list",void 0),_defineProperty$l(this,"ignored",void 0),_defineProperty$l(this,"add",void 0),_defineProperty$l(this,"remove",void 0),_defineProperty$l(this,"update",void 0),_defineProperty$l(this,"ignore",void 0),_defineProperty$l(this,"updateObject",void 0),_defineProperty$l(this,"recursiveUpdate",void 0),this.world=g,this.list=new Set,this.ignored=new Set,this.add=g=>{this.list.add(g)},this.remove=g=>{this.list.delete(g)},this.update=()=>{this.list.forEach((g=>{this.recursiveUpdate(g)}))},this.ignore=function(){for(var g=arguments.length,I=new Array(g),A=0;A<g;A++)I[A]=arguments[A];I.forEach((g=>{C.ignored.add(g)}))},this.updateObject=(g,I)=>{for(const C of this.ignored)if(g instanceof C)return;if(g instanceof three__WEBPACK_IMPORTED_MODULE_0__.Kj0){(Array.isArray(g.material)?g.material:[g.material]).forEach((g=>{g&&g.color&&g.color.copy(I)}))}},this.recursiveUpdate=function(g,I){if(void 0===I&&(I=null),g.parent){for(const I of C.ignored)if(g instanceof I)return;if(null===I){g.getWorldPosition(position);const A=ChunkUtils.mapWorldToVoxel(position.toArray());if(!C.world.getChunkByPosition(...A))return;I=C.world.getLightColorAt(...A)}if(g.userData.voxelizeLightShined){const C=g.userData.voxelizeLightShined.sub(I);if(C.r**2+C.g**2+C.b**2<.01)return}C.updateObject(g,I),g.traverse((g=>{C.updateObject(g,I)}))}},this.options=_objectSpread$9({},defaultOptions$9,I),this.ignore(Shadow),this.ignore(NameTag)}}var isMergeableObject=function(g){return isNonNullObject(g)&&!isSpecial(g)};function isNonNullObject(g){return!!g&&"object"==typeof g}function isSpecial(g){var I=Object.prototype.toString.call(g);return"[object RegExp]"===I||"[object Date]"===I||isReactElement(g)}var canUseSymbol="function"==typeof Symbol&&Symbol.for,REACT_ELEMENT_TYPE=canUseSymbol?Symbol.for("react.element"):60103;function isReactElement(g){return g.$$typeof===REACT_ELEMENT_TYPE}function emptyTarget(g){return Array.isArray(g)?[]:{}}function cloneUnlessOtherwiseSpecified(g,I){return!1!==I.clone&&I.isMergeableObject(g)?deepmerge(emptyTarget(g),g,I):g}function defaultArrayMerge(g,I,C){return g.concat(I).map((function(g){return cloneUnlessOtherwiseSpecified(g,C)}))}function getMergeFunction(g,I){if(!I.customMerge)return deepmerge;var C=I.customMerge(g);return"function"==typeof C?C:deepmerge}function getEnumerableOwnPropertySymbols(g){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(g).filter((function(I){return Object.propertyIsEnumerable.call(g,I)})):[]}function getKeys(g){return Object.keys(g).concat(getEnumerableOwnPropertySymbols(g))}function propertyIsOnObject(g,I){try{return I in g}catch(C){return!1}}function propertyIsUnsafe(g,I){return propertyIsOnObject(g,I)&&!(Object.hasOwnProperty.call(g,I)&&Object.propertyIsEnumerable.call(g,I))}function mergeObject(g,I,C){var A={};return C.isMergeableObject(g)&&getKeys(g).forEach((function(I){A[I]=cloneUnlessOtherwiseSpecified(g[I],C)})),getKeys(I).forEach((function(t){propertyIsUnsafe(g,t)||(propertyIsOnObject(g,t)&&C.isMergeableObject(I[t])?A[t]=getMergeFunction(t,C)(g[t],I[t],C):A[t]=cloneUnlessOtherwiseSpecified(I[t],C))})),A}function deepmerge(g,I,C){(C=C||{}).arrayMerge=C.arrayMerge||defaultArrayMerge,C.isMergeableObject=C.isMergeableObject||isMergeableObject,C.cloneUnlessOtherwiseSpecified=cloneUnlessOtherwiseSpecified;var A=Array.isArray(I);return A===Array.isArray(g)?A?C.arrayMerge(g,I,C):mergeObject(g,I,C):cloneUnlessOtherwiseSpecified(I,C)}deepmerge.all=function(g,I){if(!Array.isArray(g))throw new Error("first argument should be an array");return g.reduce((function(g,C){return deepmerge(g,C,I)}),{})};var deepmerge_1=deepmerge,cjs=deepmerge_1;const TRANSPARENT_RENDER_ORDER=1e5,OPAQUE_RENDER_ORDER=100,empty=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,TRANSPARENT_SORT=g=>(I,C)=>{if(I.object&&I.object.isMesh&&I.object.userData.isChunk&&C.object&&C.object.isMesh&&C.object.userData.isChunk){const A=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,t=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,{object:e}=I,{object:o}=C,{geometry:i}=e,{geometry:l}=o;return i.boundingBox||i.computeBoundingBox(),l.boundingBox||l.computeBoundingBox(),i&&i.boundingBox?(i.boundingBox.getCenter(A),A.add(e.getWorldPosition(empty))):e.getWorldPosition(A),l&&l.boundingBox?(l.boundingBox.getCenter(t),t.add(o.getWorldPosition(empty))):o.getWorldPosition(t),t.distanceToSquared(g.position)-A.distanceToSquared(g.position)>0?1:-1}return I.groupOrder!==C.groupOrder?I.groupOrder-C.groupOrder:I.renderOrder!==C.renderOrder?I.renderOrder-C.renderOrder:I.z!==C.z?C.z-I.z:I.id-C.id},noop$1=()=>{};function _defineProperty$k(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$8(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$k(g,I,C[I])}))}return g}function ownKeys$1(g,I){var C=Object.keys(g);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(g);I&&(A=A.filter((function(I){return Object.getOwnPropertyDescriptor(g,I).enumerable}))),C.push.apply(C,A)}return C}function _objectSpreadProps$1(g,I){return I=null!=I?I:{},Object.getOwnPropertyDescriptors?Object.defineProperties(g,Object.getOwnPropertyDescriptors(I)):ownKeys$1(Object(I)).forEach((function(C){Object.defineProperty(g,C,Object.getOwnPropertyDescriptor(I,C))})),g}const defaultOptions$8={wrapperClass:"item-slots",wrapperStyles:{},slotClass:"item-slots-slot",slotHoverClass:"item-slots-slot-hover",slotFocusClass:"item-slots-slot-focus",slotSubscriptClass:"item-slots-slot-subscript",slotMargin:2,slotPadding:2,slotWidth:50,slotHeight:50,slotStyles:{},slotSubscriptStyles:{},horizontalCount:5,verticalCount:1,focusFirstByDefault:!0,activatedByDefault:!0,zoom:1,perspective:"pxyz",scrollable:!0};class ItemSlot{constructor(g,I){_defineProperty$k(this,"row",void 0),_defineProperty$k(this,"col",void 0),_defineProperty$k(this,"scene",void 0),_defineProperty$k(this,"object",void 0),_defineProperty$k(this,"light",void 0),_defineProperty$k(this,"camera",new three__WEBPACK_IMPORTED_MODULE_0__.iKG(-1,1,1,-1,0,10)),_defineProperty$k(this,"element",void 0),_defineProperty$k(this,"subscriptElement",void 0),_defineProperty$k(this,"subscript",void 0),_defineProperty$k(this,"content",void 0),_defineProperty$k(this,"zoom",1),_defineProperty$k(this,"lightRotationOffset",-Math.PI/8),_defineProperty$k(this,"offset",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$k(this,"getObject",(()=>this.object)),_defineProperty$k(this,"setObject",(g=>{this.object&&this.scene.remove(this.object),this.object=g,this.scene.add(g)})),_defineProperty$k(this,"getContent",(()=>this.content)),_defineProperty$k(this,"setContent",(g=>{this.content=g})),_defineProperty$k(this,"getSubscript",(()=>this.subscript)),_defineProperty$k(this,"setSubscript",(g=>{this.subscript=g,this.subscriptElement.innerText=g})),_defineProperty$k(this,"setZoom",(g=>{this.zoom=g,this.camera.far=3*g+1,this.updateCamera()})),_defineProperty$k(this,"setPerspective",(g=>{const I=g.startsWith("n")?-1:1,C=g.includes("x")?1:0,A=g.includes("y")?1:0,t=g.includes("z")?1:0;this.offset.set(C,A,t).multiplyScalar(I),this.updateCamera()})),_defineProperty$k(this,"applyClass",(g=>{this.element.classList.add(g)})),_defineProperty$k(this,"removeClass",(g=>{this.element.classList.remove(g)})),_defineProperty$k(this,"applySubscriptClass",(g=>{this.subscriptElement.classList.add(g)})),_defineProperty$k(this,"removeSubscriptClass",(g=>{this.subscriptElement.classList.remove(g)})),_defineProperty$k(this,"applyStyles",(g=>{DOMUtils.applyStyles(this.element,g)})),_defineProperty$k(this,"applySubscriptStyles",(g=>{DOMUtils.applyStyles(this.subscriptElement,g)})),_defineProperty$k(this,"updateCamera",(()=>{this.camera.position.copy(this.offset.clone().multiplyScalar(3.5*(this.zoom||1))),this.camera.lookAt(0,0,0);const g=this.camera.position.clone();g.applyAxisAngle(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,1,0),this.lightRotationOffset),this.light.position.copy(g)})),this.row=g,this.col=I,this.scene=new three__WEBPACK_IMPORTED_MODULE_0__.xsS,this.camera=new three__WEBPACK_IMPORTED_MODULE_0__.iKG(-1,1,1,-1,0,10),this.element=document.createElement("div"),this.subscriptElement=document.createElement("div"),this.element.appendChild(this.subscriptElement),this.offset=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,this.light=new three__WEBPACK_IMPORTED_MODULE_0__.Ox3(16777215,3),this.scene.add(this.light),this.updateCamera()}}class ItemSlots{get element(){return this.wrapper}constructor(g){var I=this;void 0===g&&(g={}),_defineProperty$k(this,"options",void 0),_defineProperty$k(this,"wrapper",void 0),_defineProperty$k(this,"canvas",void 0),_defineProperty$k(this,"renderer",void 0),_defineProperty$k(this,"focusedRow",-1),_defineProperty$k(this,"focusedCol",-1),_defineProperty$k(this,"activated",!1),_defineProperty$k(this,"slotTotalWidth",void 0),_defineProperty$k(this,"slotTotalHeight",void 0),_defineProperty$k(this,"onSlotClick",noop$1),_defineProperty$k(this,"onSlotUpdate",noop$1),_defineProperty$k(this,"onFocusChange",noop$1),_defineProperty$k(this,"slots",void 0),_defineProperty$k(this,"animationFrame",-1),_defineProperty$k(this,"activate",(()=>{this.activated||(this.activated=!0,DOMUtils.applyStyles(this.wrapper,{display:"flex"}),this.render())})),_defineProperty$k(this,"deactivate",(()=>{this.activated&&(this.activated=!1,DOMUtils.applyStyles(this.wrapper,{display:"none"}),cancelAnimationFrame(this.animationFrame))})),_defineProperty$k(this,"setObject",((g,I,C)=>{var A;if(!this.slots[g]||!this.slots[g][I])return;const t=this.slots[g][I];t.setObject(C),null===(A=this.onSlotUpdate)||void 0===A||A.call(this,t)})),_defineProperty$k(this,"setContent",((g,I,C)=>{var A;if(!this.slots[g]||!this.slots[g][I])return;const t=this.slots[g][I];t.setContent(C),null===(A=this.onSlotUpdate)||void 0===A||A.call(this,t)})),_defineProperty$k(this,"setSubscript",((g,I,C)=>{var A;if(!this.slots[g]||!this.slots[g][I])return;const t=this.slots[g][I];t.setSubscript(C),null===(A=this.onSlotUpdate)||void 0===A||A.call(this,t)})),_defineProperty$k(this,"setFocused",((g,I)=>{if(g===this.focusedRow&&I===this.focusedCol)return;const C=-1!==this.focusedRow&&-1!==this.focusedCol&&(this.focusedRow!==g||this.focusedCol!==I);if(C){this.slots[this.focusedRow][this.focusedCol].element.classList.remove(this.options.slotFocusClass)}this.focusedRow=g,this.focusedCol=I;const A=this.slots[this.focusedRow][this.focusedCol];this.onFocusChange(C?this.slots[this.focusedRow][this.focusedCol]:null,A),A.element.classList.add(this.options.slotFocusClass),this.onSlotClick(A)})),_defineProperty$k(this,"getObject",((g,I)=>this.slots[g]&&this.slots[g][I]?this.slots[g][I].object:null)),_defineProperty$k(this,"getContent",((g,I)=>this.slots[g]&&this.slots[g][I]?this.slots[g][I].content:null)),_defineProperty$k(this,"getSubscript",((g,I)=>this.slots[g]&&this.slots[g][I]?this.slots[g][I].subscript:null)),_defineProperty$k(this,"getFocused",(()=>-1===this.focusedRow||-1===this.focusedCol?null:this.slots[this.focusedRow][this.focusedCol])),_defineProperty$k(this,"getRowColFromEvent",(g=>{const I=this.canvas.getBoundingClientRect(),C=g.clientX-I.left,A=(g.clientY-I.top)/this.slotTotalHeight,t=C/this.slotTotalWidth,{slotMargin:e,slotWidth:o,slotHeight:i}=this.options,{verticalCount:l,horizontalCount:c}=this.options;return A<0||A>=l||t<0||t>=c||A%1<e/i||A%1>1-e/i||t%1<e/o||t%1>1-e/o?{row:-1,col:-1}:{row:Math.floor(A),col:Math.floor(t)}})),_defineProperty$k(this,"getSlot",((g,I)=>g<0||g>=this.options.verticalCount||I<0||I>=this.options.horizontalCount?null:this.slots[g][I])),_defineProperty$k(this,"connect",(function(g,C){void 0===C&&(C="*");const{slotHoverClass:A,scrollable:t}=I.options;let e=null,o=null;I.canvas.onmouseenter=()=>{I.activated&&(I.canvas.onmousemove=g=>{const{row:C,col:t}=I.getRowColFromEvent(g);-1!==C&&-1!==t?(null===e||null===o||C===e&&t===o||I.slots[e][o].element.classList.remove(A),I.slots[C][t].element.classList.add(A),DOMUtils.applyStyles(I.canvas,{cursor:"pointer"}),e=C,o=t):null!==e&&null!==o&&(I.slots[e][o].element.classList.remove(A),DOMUtils.applyStyles(I.canvas,{cursor:"default"}))})},I.canvas.onmouseleave=()=>{I.activated&&(null!==e&&null!==o&&(I.slots[e][o].element.classList.remove(A),DOMUtils.applyStyles(I.canvas,{cursor:"default"})),I.canvas.onmousemove=null)},I.canvas.onmousedown=g=>{if(!I.activated)return;const{row:C,col:A}=I.getRowColFromEvent(g);-1!==C&&-1!==A&&I.setFocused(C,A)};const i=t?g.scroll((()=>{if(!I.activated)return;if(-1===I.focusedRow||-1===I.focusedCol)return;const{horizontalCount:g,verticalCount:C}=I.options,A=I.focusedRow,t=I.focusedCol;0===t?I.setFocused(0===A?C-1:A-1,g-1):I.setFocused(A,t-1)}),(()=>{if(!I.activated)return;if(-1===I.focusedRow||-1===I.focusedCol)return;const{horizontalCount:g,verticalCount:C}=I.options,A=I.focusedRow,t=I.focusedCol;t===g-1?I.setFocused(A===C-1?0:A+1,0):I.setFocused(A,t+1)}),C):noop$1;return()=>{try{i(),I.canvas.onmousedown=null,I.canvas.onmouseenter=null,I.canvas.onmouseleave=null}catch(g){}}})),_defineProperty$k(this,"render",(()=>{if(this.animationFrame=requestAnimationFrame(this.render),!this.activated)return;const{horizontalCount:g,verticalCount:I,slotMargin:C,slotPadding:A}=this.options,t=this.canvas.clientWidth,e=this.canvas.clientHeight;this.canvas.width===t&&this.canvas.height===e||this.renderer.setSize(t,e,!1),this.renderer.setScissorTest(!1),this.renderer.clear(),this.renderer.setScissorTest(!0);const o=this.renderer.domElement.getBoundingClientRect();let i=!1;for(let l=0;l<I;l++)for(let I=0;I<g;I++){const{scene:g,camera:t,element:e,object:c}=this.slots[l][I];if(!c)continue;const n=e.getBoundingClientRect();if(n.top+n.height<o.top||n.top>o.top+o.height||n.left+n.width<o.left||n.left>o.left+o.width)continue;i=!0;const d=n.right-n.left-2*C-2*A,s=n.bottom-n.top-2*C-2*A;if(d<=0||s<=0)continue;const Z=n.left-o.left+C+A,b=o.height-(n.bottom-o.top)+C+A;this.renderer.setViewport(Z,b,d,s),this.renderer.setScissor(Z,b,d,s),this.renderer.render(g,t)}i||(this.renderer.setViewport(0,0,t,e),this.renderer.setScissor(0,0,t,e),this.renderer.render(this.slots[0][0].scene,this.slots[0][0].camera))})),_defineProperty$k(this,"generate",(()=>{const{wrapperClass:g,wrapperStyles:I,slotClass:C,slotStyles:A,slotSubscriptClass:t,slotSubscriptStyles:e,horizontalCount:o,verticalCount:i,zoom:l,perspective:c}=this.options,{slotWidth:n,slotHeight:d,slotMargin:s,slotPadding:Z}=this.options,b=(n+2*s+2*Z)*o,a=(d+2*s+2*Z)*i;this.wrapper=document.createElement("div"),this.wrapper.classList.add(g),DOMUtils.applyStyles(this.wrapper,_objectSpreadProps$1(_objectSpread$8({},I),{width:`${b}px`,height:`${a}px`,display:"none"})),this.slots=[];for(let m=0;m<i;m++){this.slots[m]=[];for(let g=0;g<o;g++){const I=new ItemSlot(m,g);I.applyClass(C),I.applyStyles(_objectSpread$8({width:`${n}px`,height:`${d}px`,borderRadius:.1*n+"px",borderWidth:.08*n+"px",boxShadow:`inset 0 0 ${.05*n}px var(--item-slots-slot-color)`},A)),I.applySubscriptClass(t),I.applySubscriptStyles(e),I.applyStyles({position:"absolute",top:`${(d+2*s+2*Z)*m+s}px`,left:`${(n+2*s+2*Z)*g+s}px`}),I.setZoom(l),I.setPerspective(c),this.slots[m][g]=I,this.wrapper.appendChild(I.element)}}this.canvas=document.createElement("canvas"),this.canvas.width=b,this.canvas.height=a,DOMUtils.applyStyles(this.canvas,{position:"absolute",background:"transparent",top:"0",left:"0",zIndex:"-1"}),this.wrapper.appendChild(this.canvas),this.renderer=new three__WEBPACK_IMPORTED_MODULE_0__.CP7({canvas:this.canvas,antialias:!1,alpha:!0}),this.renderer.outputColorSpace=three__WEBPACK_IMPORTED_MODULE_0__.KI_,this.renderer.setSize(b,a)}));const{focusFirstByDefault:C,activatedByDefault:A,slotHeight:t,slotMargin:e,slotWidth:o,slotPadding:i}=this.options=cjs(defaultOptions$8,g);this.slotTotalWidth=o+2*e+2*i,this.slotTotalHeight=t+2*e+2*i,this.generate(),C&&this.setFocused(0,0),A&&this.activate()}}function _defineProperty$j(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$7(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$j(g,I,C[I])}))}return g}const defaultOptions$7={maxDistance:5,blockMargin:.3,lerpFactor:.5,ignoreSeeThrough:!0,ignoreFluids:!0};class Perspective{set state(g){const{camera:I}=this.controls;var C;("first"===g?I.position.copy(this.firstPersonPosition):I.position.set(0,0,0),I.quaternion.set(0,0,0,0),g!==this._state)&&(null===(C=this.onChangeState)||void 0===C||C.call(this,g),this._state=g)}get state(){return this._state}constructor(g,I,C){var A=this;if(void 0===C&&(C={}),_defineProperty$j(this,"options",void 0),_defineProperty$j(this,"controls",void 0),_defineProperty$j(this,"world",void 0),_defineProperty$j(this,"inputs",void 0),_defineProperty$j(this,"_state","first"),_defineProperty$j(this,"firstPersonPosition",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$j(this,"onChangeState",void 0),_defineProperty$j(this,"connect",(function(g,I){void 0===I&&(I="*");const C=g.bind("c",A.toggle,I,{identifier:Perspective.INPUT_IDENTIFIER});return A.inputs=g,()=>{try{C()}catch(g){}}})),_defineProperty$j(this,"toggle",(()=>{switch(this.state){case"first":this.state="third";break;case"second":this.state="first";break;case"third":this.state="second"}})),_defineProperty$j(this,"update",(()=>{const{object:g,camera:I}=this.controls;this.controls.character&&("first"===this.state&&this.controls.character.visible?this.controls.character.visible=!1:"first"===this.state||this.controls.character.visible||(this.controls.character.visible=!0));const C=()=>{const C=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;("second"===this.state?g:I).getWorldDirection(C),C.normalize(),C.multiplyScalar(-1);const A=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;g.getWorldPosition(A),A.add(C.clone().multiplyScalar(this.options.blockMargin));const t=this.world.raycastVoxels(A.toArray(),C.toArray(),this.options.maxDistance,{ignoreFluids:this.options.ignoreFluids,ignoreSeeThrough:this.options.ignoreSeeThrough});return t?A.distanceTo(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(...t.point)):this.options.maxDistance};switch(this.state){case"first":break;case"second":{const A=I.position.clone();A.z=-C(),I.position.lerp(A,this.options.lerpFactor),I.lookAt(g.position);break}case"third":{const g=I.position.clone();g.z=C(),I.position.lerp(g,this.options.lerpFactor);break}}})),!g)throw new Error("Perspective: invalid rigid controls.");if(!I)throw new Error("Perspective: invalid world.");this.controls=g,this.world=I,this.options=_objectSpread$7({},defaultOptions$7,C),this.firstPersonPosition.copy(this.controls.camera.position),this.state="first"}}function _defineProperty$i(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$6(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$i(g,I,C[I])}))}return g}_defineProperty$j(Perspective,"INPUT_IDENTIFIER","voxelize-perspective");const defaultOptions$6={zoom:1,perspective:"pxyz",width:100,height:100,renderOnce:!1,lightRotationOffset:-Math.PI/8};class Portrait{constructor(g,I){if(void 0===I&&(I={}),_defineProperty$i(this,"options",void 0),_defineProperty$i(this,"camera",void 0),_defineProperty$i(this,"scene",void 0),_defineProperty$i(this,"canvas",void 0),_defineProperty$i(this,"object",void 0),_defineProperty$i(this,"animationFrameId",-1),_defineProperty$i(this,"setObject",(g=>{this.object&&this.scene.remove(this.object),this.scene.add(g),this.object=g})),_defineProperty$i(this,"dispose",(()=>{cancelAnimationFrame(this.animationFrameId),this.scene.remove(this.object),this.object=null})),_defineProperty$i(this,"render",(()=>{this.animationFrameId=requestAnimationFrame(this.render);const g=Portrait.renderer,{renderOnce:I}=this.options,{width:C,height:A}=g.getSize(new three__WEBPACK_IMPORTED_MODULE_0__.FM8(0,0));C===this.canvas.width&&A===this.canvas.height||g.setSize(this.canvas.width,this.canvas.height),g.render(this.scene,this.camera);const t=g.domElement,e=this.canvas.getContext("2d");e.globalCompositeOperation="copy",e.drawImage(t,0,t.height-A,C,A,0,0,C,A),I&&this.dispose()})),!g)throw new Error("A target object is required for portraits.");Portrait.renderer.outputColorSpace=three__WEBPACK_IMPORTED_MODULE_0__.KI_;const{width:C,height:A,zoom:t,perspective:e,lightRotationOffset:o}=this.options=_objectSpread$6({},defaultOptions$6,I);this.canvas=document.createElement("canvas"),this.canvas.width=C,this.canvas.height=A,this.scene=new three__WEBPACK_IMPORTED_MODULE_0__.xsS;const i=e.includes("n")?-1:1,l=e.includes("x")?1:0,c=e.includes("y")?1:0,n=e.includes("z")?1:0;this.camera=new three__WEBPACK_IMPORTED_MODULE_0__.iKG(-t,t,t,-t),this.camera.far=10*t+1,this.camera.near=.1,this.camera.position.set(i*l*t*3.5,i*c*t*3.5,i*n*t*3.5),this.camera.lookAt(0,0,0);const d=this.camera.position.clone();d.applyAxisAngle(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,1,0),o);const s=new three__WEBPACK_IMPORTED_MODULE_0__.Ox3(16777215,3);s.position.copy(d),this.scene.add(s),this.setObject(g),this.render()}}function _defineProperty$h(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}_defineProperty$i(Portrait,"renderer",new three__WEBPACK_IMPORTED_MODULE_0__.CP7({antialias:!1}));const defaultOptions$5={maxWorker:8};class SharedWorkerPool{get isBusy(){return this.available.length<=0}get workingCount(){return this.workers.length-this.available.length}constructor(g,I){void 0===I&&(I=defaultOptions$5),_defineProperty$h(this,"Proto",void 0),_defineProperty$h(this,"options",void 0),_defineProperty$h(this,"queue",void 0),_defineProperty$h(this,"workers",void 0),_defineProperty$h(this,"available",void 0),_defineProperty$h(this,"addJob",void 0),_defineProperty$h(this,"process",void 0),this.Proto=g,this.options=I,this.queue=[],this.workers=[],this.available=[],this.addJob=g=>{this.queue.push(g),this.process()},this.process=()=>{if(0!==this.queue.length&&this.available.length>0){const g=this.available.shift(),I=this.workers[g],{message:C,buffers:A,resolve:t}=this.queue.shift();I.port.postMessage(C,A||[]),SharedWorkerPool.WORKING_COUNT++;const e=C=>{let{data:A}=C;SharedWorkerPool.WORKING_COUNT--,I.port.removeEventListener("message",e),this.available.push(g),t(A),0!==this.queue.length&&this.available.length>0&&setTimeout(this.process,0)};I.port.addEventListener("message",e)}};const{maxWorker:C}=I;for(let A=0;A<C;A++){const I=new g;I.port.start(),this.workers.push(I),this.available.push(A)}}}function _defineProperty$g(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$5(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$g(g,I,C[I])}))}return g}_defineProperty$h(SharedWorkerPool,"WORKING_COUNT",0);const defaultOptions$4={reachDistance:32,ignoreFluids:!0,highlightType:"box",highlightScale:1.002,highlightLerp:1,inverseDirection:!1,highlightColor:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("white"),highlightOpacity:.1,potentialVisuals:!1};class VoxelInteract extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{get lookingAt(){return this.target?this.world.getBlockAt(this.target[0],this.target[1],this.target[2]):null}constructor(g,I,C){var A;if(void 0===C&&(C={}),super(),A=this,_defineProperty$g(this,"object",void 0),_defineProperty$g(this,"world",void 0),_defineProperty$g(this,"options",void 0),_defineProperty$g(this,"active",void 0),_defineProperty$g(this,"potential",void 0),_defineProperty$g(this,"target",void 0),_defineProperty$g(this,"newTargetScale",void 0),_defineProperty$g(this,"newTargetPosition",void 0),_defineProperty$g(this,"targetGroup",void 0),_defineProperty$g(this,"potentialGroup",void 0),_defineProperty$g(this,"potentialArrow",void 0),_defineProperty$g(this,"yRotArrow",void 0),_defineProperty$g(this,"toggle",void 0),_defineProperty$g(this,"update",void 0),_defineProperty$g(this,"setup",void 0),this.object=g,this.world=I,this.active=!0,this.potential={voxel:[0,0,0],rotation:PY_ROTATION,yRotation:0},this.target=[0,0,0],this.newTargetScale=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,this.newTargetPosition=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,this.targetGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.potentialGroup=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu,this.toggle=function(g){void 0===g&&(g=null),A.active=null===g?!A.active:g,A.potential=null,A.target=null,A.visible=A.active},this.update=()=>{if(!this.active)return;const{reachDistance:g,highlightScale:I}=this.options;this.targetGroup.scale.lerp(this.newTargetScale,this.options.highlightLerp),this.targetGroup.position.lerp(this.newTargetPosition,this.options.highlightLerp);const C=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,A=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;this.object.getWorldPosition(C),this.object.getWorldDirection(A),A.normalize(),this.options.inverseDirection&&A.multiplyScalar(-1);const t=this.world.raycastVoxels(C.toArray(),A.toArray(),g,{ignoreFluids:this.options.ignoreFluids});if(!t)return this.visible=!1,this.target=null,void(this.potential=null);const{voxel:e,normal:o}=t,[i,l,c]=o,n=ChunkUtils.mapWorldToVoxel(e);if(0===this.world.getVoxelAt(...n))return this.visible=!1,this.target=null,void(this.potential=null);this.visible=!0,this.target=n;const{lookingAt:d}=this;if(d&&this.target){const{isDynamic:g,dynamicFn:C}=d,A=g?C(e).aabbs:d.aabbs;if(!A.length)return;const t=this.world.getVoxelRotationAt(...this.target);let o=t.rotateAABB(A[0]);for(let I=1;I<A.length;I++){const g=t.rotateAABB(A[I]);o=o.union(g)}o.translate(this.target);let{width:i,height:l,depth:c}=o;i*=I,l*=I,c*=I,this.newTargetScale.set(i,l,c),this.newTargetPosition.set(o.minX,o.minY,o.minZ)}const s=[this.target[0]+i,this.target[1]+l,this.target[2]+c],Z=0!==i?i>0?PX_ROTATION:NX_ROTATION:0!==l?l>0?PY_ROTATION:NY_ROTATION:0!==c?c>0?PZ_ROTATION:NZ_ROTATION:0,b=(()=>{if(0!==Math.abs(l)){this.yRotArrow.visible=!0;const[g,I,A]=[C.x,C.y,C.z],[t,e,o]=[s[0]+.5,s[1]+.5,s[2]+.5];let i=l>0?Math.atan2(g-t,A-o):Math.atan2(A-o,g-t);l<0&&(i+=Math.PI/2);const c=MathUtils.normalizeAngle(i);let n,d,Z=1/0;Y_ROT_MAP.forEach((g=>{let[I,C]=g;Math.abs(c-I)<Z&&(Z=Math.abs(c-I),n=C,d=I)}));const b=l<0?Math.cos(d-Math.PI/2):Math.sin(d),a=l<0?Math.sin(d-Math.PI/2):Math.cos(d);return this.yRotArrow.setDirection(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(b,0,a).normalize()),n}return this.yRotArrow.visible=!1,0})();this.potential={voxel:s,rotation:Z,yRotation:b},this.potential&&(this.potentialGroup.position.set(this.potential.voxel[0]+.5,this.potential.voxel[1]+.5,this.potential.voxel[2]+.5),this.potentialArrow.setDirection(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(i,l,c)))},this.setup=()=>{const{highlightType:g,highlightScale:I,highlightColor:C,highlightOpacity:A}=this.options,t=new three__WEBPACK_IMPORTED_MODULE_0__.vBJ({color:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(C),opacity:A,transparent:!0});if("outline"===g){const g=.01,C=I,A=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(new three__WEBPACK_IMPORTED_MODULE_0__.DvJ(C,g,g),t);for(let I=-1;I<=1;I+=2)for(let t=-1;t<=1;t+=2){const e=A.clone();e.position.y=(C-g)/2*I,e.position.z=(C-g)/2*t,this.targetGroup.add(e)}for(let I=-1;I<=1;I+=2)for(let t=-1;t<=1;t+=2){const e=A.clone();e.position.z=(C-g)/2*I,e.position.x=(C-g)/2*t,e.rotation.z=Math.PI/2,this.targetGroup.add(e)}for(let I=-1;I<=1;I+=2)for(let t=-1;t<=1;t+=2){const e=A.clone();e.position.x=(C-g)/2*I,e.position.y=(C-g)/2*t,e.rotation.y=Math.PI/2,this.targetGroup.add(e)}const e=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(.5,.5,.5);this.targetGroup.children.forEach((g=>{g.position.add(e)}))}else{if("box"!==g)throw new Error("Invalid highlight type");{const g=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(new three__WEBPACK_IMPORTED_MODULE_0__.DvJ(I,I,I),t);g.position.x+=.5,g.position.y+=.5,g.position.z+=.5,this.targetGroup.add(g)}}this.potentialArrow=new Arrow({color:"red"}),this.yRotArrow=new Arrow({color:"green"}),this.potentialGroup.add(this.potentialArrow,this.yRotArrow),this.targetGroup.frustumCulled=!1,this.targetGroup.renderOrder=1e6},!g)throw new Error("VoxelInteract: object is required.");if(!I)throw new Error("VoxelInteract: a world is required to be operated on");const{potentialVisuals:t}=this.options=_objectSpread$5({},defaultOptions$4,C);this.setup(),this.add(this.targetGroup,this.potentialGroup),this.potentialGroup.visible=t}}function _defineProperty$f(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$4(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$f(g,I,C[I])}))}return g}const emptyQ$1=new three__WEBPACK_IMPORTED_MODULE_0__._fP,emptyP=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4,defaultOptions$3={countSelf:!1,updateChildren:!0};class Peers extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{setOwnPeer(g){this.ownPeer=g,this.add(g)}setOwnUsername(g){this.ownUsername=g}packInfo(){const{x:g,y:I,z:C}=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,0,-1).applyQuaternion(this.object.getWorldQuaternion(emptyQ$1)).normalize(),{x:A,y:t,z:e}=this.object.getWorldPosition(emptyP);return{id:this.ownID,username:this.ownUsername,metadata:{position:[A,t,e],direction:[g,I,C]}}}update(){if(!this.object)return;const g=this.packInfo();if(this.ownPeer&&g&&this.onPeerUpdate(this.ownPeer,g.metadata,{id:g.id,username:g.username}),g){const I={type:"PEER",peers:[g]};this.packets.push(I)}this.options.updateChildren&&this.children.forEach((g=>{g!==this.ownPeer&&g instanceof Character&&g.update()}))}constructor(g,I){void 0===I&&(I={}),super(),_defineProperty$f(this,"object",void 0),_defineProperty$f(this,"options",void 0),_defineProperty$f(this,"ownID",void 0),_defineProperty$f(this,"ownUsername",void 0),_defineProperty$f(this,"ownPeer",void 0),_defineProperty$f(this,"packets",void 0),_defineProperty$f(this,"createPeer",void 0),_defineProperty$f(this,"onPeerJoin",void 0),_defineProperty$f(this,"onPeerUpdate",void 0),_defineProperty$f(this,"onPeerLeave",void 0),_defineProperty$f(this,"onMessage",void 0),_defineProperty$f(this,"getPeerById",void 0),this.object=g,this.ownID="",this.ownUsername="",this.packets=[],this.onMessage=(g,I)=>{let{username:C}=I;this.ownUsername=C;const A=g=>{const I=this.createPeer(g);return I.name=g,this.add(I),I};switch(g.type){case"INIT":{const{id:I}=g.json;this.ownID=I;break}case"JOIN":{var t;const{text:I}=g;if(!(this.options.countSelf||this.ownID&&this.ownID!==I))return;if(!this.createPeer)return void console.warn("Peers.createPeer is not defined, skipping peer join.");if(this.getObjectByName(I))break;A(I),null===(t=this.onPeerJoin)||void 0===t||t.call(this,I);break}case"LEAVE":{var e;const{text:I}=g,C=this.getObjectByName(I);C&&this.remove(C),null===(e=this.onPeerLeave)||void 0===e||e.call(this,I);break}}const{peers:o}=g;o&&o.forEach((I=>{var C;if(!(this.options.countSelf||this.ownID&&I.id!==this.ownID))return;"INIT"===g.type&&(null===(C=this.onPeerJoin)||void 0===C||C.call(this,I.id));let t=this.getObjectByName(I.id);t||(t=A(I.id)),this.onPeerUpdate?this.onPeerUpdate(t,I.metadata,{id:I.id,username:I.username}):console.warn("Peers.onPeerUpdate is not defined, skipping peer update.")}))},this.getPeerById=g=>this.getObjectByName(g),this.options=_objectSpread$4({},defaultOptions$3,I)}}var indexMinimal={},minimal$1={},aspromise=asPromise;function asPromise(g,I){for(var C=new Array(arguments.length-1),A=0,t=2,e=!0;t<arguments.length;)C[A++]=arguments[t++];return new Promise((function(t,o){C[A]=function(g){if(e)if(e=!1,g)o(g);else{for(var I=new Array(arguments.length-1),C=0;C<I.length;)I[C++]=arguments[C];t.apply(null,I)}};try{g.apply(I||null,C)}catch(i){e&&(e=!1,o(i))}}))}var base64$1={};!function(g){var I=g;I.length=function(g){var I=g.length;if(!I)return 0;for(var C=0;--I%4>1&&"="===g.charAt(I);)++C;return Math.ceil(3*g.length)/4-C};for(var C=new Array(64),A=new Array(123),t=0;t<64;)A[C[t]=t<26?t+65:t<52?t+71:t<62?t-4:t-59|43]=t++;I.encode=function(g,I,A){for(var t,e=null,o=[],i=0,l=0;I<A;){var c=g[I++];switch(l){case 0:o[i++]=C[c>>2],t=(3&c)<<4,l=1;break;case 1:o[i++]=C[t|c>>4],t=(15&c)<<2,l=2;break;case 2:o[i++]=C[t|c>>6],o[i++]=C[63&c],l=0}i>8191&&((e||(e=[])).push(String.fromCharCode.apply(String,o)),i=0)}return l&&(o[i++]=C[t],o[i++]=61,1===l&&(o[i++]=61)),e?(i&&e.push(String.fromCharCode.apply(String,o.slice(0,i))),e.join("")):String.fromCharCode.apply(String,o.slice(0,i))};var e="invalid encoding";I.decode=function(g,I,C){for(var t,o=C,i=0,l=0;l<g.length;){var c=g.charCodeAt(l++);if(61===c&&i>1)break;if(void 0===(c=A[c]))throw Error(e);switch(i){case 0:t=c,i=1;break;case 1:I[C++]=t<<2|(48&c)>>4,t=c,i=2;break;case 2:I[C++]=(15&t)<<4|(60&c)>>2,t=c,i=3;break;case 3:I[C++]=(3&t)<<6|c,i=0}}if(1===i)throw Error(e);return C-o},I.test=function(g){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(g)}}(base64$1);var eventemitter=EventEmitter$1;function EventEmitter$1(){this._listeners={}}EventEmitter$1.prototype.on=function(g,I,C){return(this._listeners[g]||(this._listeners[g]=[])).push({fn:I,ctx:C||this}),this},EventEmitter$1.prototype.off=function(g,I){if(void 0===g)this._listeners={};else if(void 0===I)this._listeners[g]=[];else for(var C=this._listeners[g],A=0;A<C.length;)C[A].fn===I?C.splice(A,1):++A;return this},EventEmitter$1.prototype.emit=function(g){var I=this._listeners[g];if(I){for(var C=[],A=1;A<arguments.length;)C.push(arguments[A++]);for(A=0;A<I.length;)I[A].fn.apply(I[A++].ctx,C)}return this};var float=factory(factory);function factory(g){return"undefined"!=typeof Float32Array?function(){var I=new Float32Array([-0]),C=new Uint8Array(I.buffer),A=128===C[3];function t(g,A,t){I[0]=g,A[t]=C[0],A[t+1]=C[1],A[t+2]=C[2],A[t+3]=C[3]}function e(g,A,t){I[0]=g,A[t]=C[3],A[t+1]=C[2],A[t+2]=C[1],A[t+3]=C[0]}function o(g,A){return C[0]=g[A],C[1]=g[A+1],C[2]=g[A+2],C[3]=g[A+3],I[0]}function i(g,A){return C[3]=g[A],C[2]=g[A+1],C[1]=g[A+2],C[0]=g[A+3],I[0]}g.writeFloatLE=A?t:e,g.writeFloatBE=A?e:t,g.readFloatLE=A?o:i,g.readFloatBE=A?i:o}():function(){function I(g,I,C,A){var t=I<0?1:0;if(t&&(I=-I),0===I)g(1/I>0?0:2147483648,C,A);else if(isNaN(I))g(2143289344,C,A);else if(I>34028234663852886e22)g((t<<31|2139095040)>>>0,C,A);else if(I<11754943508222875e-54)g((t<<31|Math.round(I/1401298464324817e-60))>>>0,C,A);else{var e=Math.floor(Math.log(I)/Math.LN2);g((t<<31|e+127<<23|8388607&Math.round(I*Math.pow(2,-e)*8388608))>>>0,C,A)}}function C(g,I,C){var A=g(I,C),t=2*(A>>31)+1,e=A>>>23&255,o=8388607&A;return 255===e?o?NaN:t*(1/0):0===e?1401298464324817e-60*t*o:t*Math.pow(2,e-150)*(o+8388608)}g.writeFloatLE=I.bind(null,writeUintLE),g.writeFloatBE=I.bind(null,writeUintBE),g.readFloatLE=C.bind(null,readUintLE),g.readFloatBE=C.bind(null,readUintBE)}(),"undefined"!=typeof Float64Array?function(){var I=new Float64Array([-0]),C=new Uint8Array(I.buffer),A=128===C[7];function t(g,A,t){I[0]=g,A[t]=C[0],A[t+1]=C[1],A[t+2]=C[2],A[t+3]=C[3],A[t+4]=C[4],A[t+5]=C[5],A[t+6]=C[6],A[t+7]=C[7]}function e(g,A,t){I[0]=g,A[t]=C[7],A[t+1]=C[6],A[t+2]=C[5],A[t+3]=C[4],A[t+4]=C[3],A[t+5]=C[2],A[t+6]=C[1],A[t+7]=C[0]}function o(g,A){return C[0]=g[A],C[1]=g[A+1],C[2]=g[A+2],C[3]=g[A+3],C[4]=g[A+4],C[5]=g[A+5],C[6]=g[A+6],C[7]=g[A+7],I[0]}function i(g,A){return C[7]=g[A],C[6]=g[A+1],C[5]=g[A+2],C[4]=g[A+3],C[3]=g[A+4],C[2]=g[A+5],C[1]=g[A+6],C[0]=g[A+7],I[0]}g.writeDoubleLE=A?t:e,g.writeDoubleBE=A?e:t,g.readDoubleLE=A?o:i,g.readDoubleBE=A?i:o}():function(){function I(g,I,C,A,t,e){var o=A<0?1:0;if(o&&(A=-A),0===A)g(0,t,e+I),g(1/A>0?0:2147483648,t,e+C);else if(isNaN(A))g(0,t,e+I),g(2146959360,t,e+C);else if(A>17976931348623157e292)g(0,t,e+I),g((o<<31|2146435072)>>>0,t,e+C);else{var i;if(A<22250738585072014e-324)g((i=A/5e-324)>>>0,t,e+I),g((o<<31|i/4294967296)>>>0,t,e+C);else{var l=Math.floor(Math.log(A)/Math.LN2);1024===l&&(l=1023),g(4503599627370496*(i=A*Math.pow(2,-l))>>>0,t,e+I),g((o<<31|l+1023<<20|1048576*i&1048575)>>>0,t,e+C)}}}function C(g,I,C,A,t){var e=g(A,t+I),o=g(A,t+C),i=2*(o>>31)+1,l=o>>>20&2047,c=4294967296*(1048575&o)+e;return 2047===l?c?NaN:i*(1/0):0===l?5e-324*i*c:i*Math.pow(2,l-1075)*(c+4503599627370496)}g.writeDoubleLE=I.bind(null,writeUintLE,0,4),g.writeDoubleBE=I.bind(null,writeUintBE,4,0),g.readDoubleLE=C.bind(null,readUintLE,0,4),g.readDoubleBE=C.bind(null,readUintBE,4,0)}(),g}function writeUintLE(g,I,C){I[C]=255&g,I[C+1]=g>>>8&255,I[C+2]=g>>>16&255,I[C+3]=g>>>24}function writeUintBE(g,I,C){I[C]=g>>>24,I[C+1]=g>>>16&255,I[C+2]=g>>>8&255,I[C+3]=255&g}function readUintLE(g,I){return(g[I]|g[I+1]<<8|g[I+2]<<16|g[I+3]<<24)>>>0}function readUintBE(g,I){return(g[I]<<24|g[I+1]<<16|g[I+2]<<8|g[I+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}var utf8$2={};!function(g){var I=g;I.length=function(g){for(var I=0,C=0,A=0;A<g.length;++A)(C=g.charCodeAt(A))<128?I+=1:C<2048?I+=2:55296==(64512&C)&&56320==(64512&g.charCodeAt(A+1))?(++A,I+=4):I+=3;return I},I.read=function(g,I,C){if(C-I<1)return"";for(var A,t=null,e=[],o=0;I<C;)(A=g[I++])<128?e[o++]=A:A>191&&A<224?e[o++]=(31&A)<<6|63&g[I++]:A>239&&A<365?(A=((7&A)<<18|(63&g[I++])<<12|(63&g[I++])<<6|63&g[I++])-65536,e[o++]=55296+(A>>10),e[o++]=56320+(1023&A)):e[o++]=(15&A)<<12|(63&g[I++])<<6|63&g[I++],o>8191&&((t||(t=[])).push(String.fromCharCode.apply(String,e)),o=0);return t?(o&&t.push(String.fromCharCode.apply(String,e.slice(0,o))),t.join("")):String.fromCharCode.apply(String,e.slice(0,o))},I.write=function(g,I,C){for(var A,t,e=C,o=0;o<g.length;++o)(A=g.charCodeAt(o))<128?I[C++]=A:A<2048?(I[C++]=A>>6|192,I[C++]=63&A|128):55296==(64512&A)&&56320==(64512&(t=g.charCodeAt(o+1)))?(A=65536+((1023&A)<<10)+(1023&t),++o,I[C++]=A>>18|240,I[C++]=A>>12&63|128,I[C++]=A>>6&63|128,I[C++]=63&A|128):(I[C++]=A>>12|224,I[C++]=A>>6&63|128,I[C++]=63&A|128);return C-e}}(utf8$2);var pool_1=pool;function pool(g,I,C){var A=C||8192,t=A>>>1,e=null,o=A;return function(C){if(C<1||C>t)return g(C);o+C>A&&(e=g(A),o=0);var i=I.call(e,o,o+=C);return 7&o&&(o=1+(7|o)),i}}var longbits=LongBits$2,util$5=minimal$1;function LongBits$2(g,I){this.lo=g>>>0,this.hi=I>>>0}var zero=LongBits$2.zero=new LongBits$2(0,0);zero.toNumber=function(){return 0},zero.zzEncode=zero.zzDecode=function(){return this},zero.length=function(){return 1};var zeroHash=LongBits$2.zeroHash="\0\0\0\0\0\0\0\0";LongBits$2.fromNumber=function(g){if(0===g)return zero;var I=g<0;I&&(g=-g);var C=g>>>0,A=(g-C)/4294967296>>>0;return I&&(A=~A>>>0,C=~C>>>0,++C>4294967295&&(C=0,++A>4294967295&&(A=0))),new LongBits$2(C,A)},LongBits$2.from=function(g){if("number"==typeof g)return LongBits$2.fromNumber(g);if(util$5.isString(g)){if(!util$5.Long)return LongBits$2.fromNumber(parseInt(g,10));g=util$5.Long.fromString(g)}return g.low||g.high?new LongBits$2(g.low>>>0,g.high>>>0):zero},LongBits$2.prototype.toNumber=function(g){if(!g&&this.hi>>>31){var I=1+~this.lo>>>0,C=~this.hi>>>0;return I||(C=C+1>>>0),-(I+4294967296*C)}return this.lo+4294967296*this.hi},LongBits$2.prototype.toLong=function(g){return util$5.Long?new util$5.Long(0|this.lo,0|this.hi,Boolean(g)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(g)}};var charCodeAt=String.prototype.charCodeAt;LongBits$2.fromHash=function(g){return g===zeroHash?zero:new LongBits$2((charCodeAt.call(g,0)|charCodeAt.call(g,1)<<8|charCodeAt.call(g,2)<<16|charCodeAt.call(g,3)<<24)>>>0,(charCodeAt.call(g,4)|charCodeAt.call(g,5)<<8|charCodeAt.call(g,6)<<16|charCodeAt.call(g,7)<<24)>>>0)},LongBits$2.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},LongBits$2.prototype.zzEncode=function(){var g=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^g)>>>0,this.lo=(this.lo<<1^g)>>>0,this},LongBits$2.prototype.zzDecode=function(){var g=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^g)>>>0,this.hi=(this.hi>>>1^g)>>>0,this},LongBits$2.prototype.length=function(){var g=this.lo,I=(this.lo>>>28|this.hi<<4)>>>0,C=this.hi>>>24;return 0===C?0===I?g<16384?g<128?1:2:g<2097152?3:4:I<16384?I<128?5:6:I<2097152?7:8:C<128?9:10},function(g){var I=g;function C(g,I,C){for(var A=Object.keys(I),t=0;t<A.length;++t)void 0!==g[A[t]]&&C||(g[A[t]]=I[A[t]]);return g}function A(g){function I(g,A){if(!(this instanceof I))return new I(g,A);Object.defineProperty(this,"message",{get:function(){return g}}),Error.captureStackTrace?Error.captureStackTrace(this,I):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),A&&C(this,A)}return I.prototype=Object.create(Error.prototype,{constructor:{value:I,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return g},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),I}I.asPromise=aspromise,I.base64=base64$1,I.EventEmitter=eventemitter,I.float=float,I.inquire=inquire_1,I.utf8=utf8$2,I.pool=pool_1,I.LongBits=longbits,I.isNode=Boolean(void 0!==commonjsGlobal&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),I.global=I.isNode&&commonjsGlobal||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||commonjsGlobal,I.emptyArray=Object.freeze?Object.freeze([]):[],I.emptyObject=Object.freeze?Object.freeze({}):{},I.isInteger=Number.isInteger||function(g){return"number"==typeof g&&isFinite(g)&&Math.floor(g)===g},I.isString=function(g){return"string"==typeof g||g instanceof String},I.isObject=function(g){return g&&"object"==typeof g},I.isset=I.isSet=function(g,I){var C=g[I];return!(null==C||!g.hasOwnProperty(I))&&("object"!=typeof C||(Array.isArray(C)?C.length:Object.keys(C).length)>0)},I.Buffer=function(){try{var g=I.inquire("buffer").Buffer;return g.prototype.utf8Write?g:null}catch(C){return null}}(),I._Buffer_from=null,I._Buffer_allocUnsafe=null,I.newBuffer=function(g){return"number"==typeof g?I.Buffer?I._Buffer_allocUnsafe(g):new I.Array(g):I.Buffer?I._Buffer_from(g):"undefined"==typeof Uint8Array?g:new Uint8Array(g)},I.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,I.Long=I.global.dcodeIO&&I.global.dcodeIO.Long||I.global.Long||I.inquire("long"),I.key2Re=/^true|false|0|1$/,I.key32Re=/^-?(?:0|[1-9][0-9]*)$/,I.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,I.longToHash=function(g){return g?I.LongBits.from(g).toHash():I.LongBits.zeroHash},I.longFromHash=function(g,C){var A=I.LongBits.fromHash(g);return I.Long?I.Long.fromBits(A.lo,A.hi,C):A.toNumber(Boolean(C))},I.merge=C,I.lcFirst=function(g){return g.charAt(0).toLowerCase()+g.substring(1)},I.newError=A,I.ProtocolError=A("ProtocolError"),I.oneOfGetter=function(g){for(var I={},C=0;C<g.length;++C)I[g[C]]=1;return function(){for(var g=Object.keys(this),C=g.length-1;C>-1;--C)if(1===I[g[C]]&&void 0!==this[g[C]]&&null!==this[g[C]])return g[C]}},I.oneOfSetter=function(g){return function(I){for(var C=0;C<g.length;++C)g[C]!==I&&delete this[g[C]]}},I.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},I._configure=function(){var g=I.Buffer;g?(I._Buffer_from=g.from!==Uint8Array.from&&g.from||function(I,C){return new g(I,C)},I._Buffer_allocUnsafe=g.allocUnsafe||function(I){return new g(I)}):I._Buffer_from=I._Buffer_allocUnsafe=null}}(minimal$1);var writer=Writer$1,util$4=minimal$1,BufferWriter$1,LongBits$1=util$4.LongBits,base64=util$4.base64,utf8$1=util$4.utf8;function Op(g,I,C){this.fn=g,this.len=I,this.next=void 0,this.val=C}function noop(){}function State(g){this.head=g.head,this.tail=g.tail,this.len=g.len,this.next=g.states}function Writer$1(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var create$1=function(){return util$4.Buffer?function(){return(Writer$1.create=function(){return new BufferWriter$1})()}:function(){return new Writer$1}};function writeByte(g,I,C){I[C]=255&g}function writeVarint32(g,I,C){for(;g>127;)I[C++]=127&g|128,g>>>=7;I[C]=g}function VarintOp(g,I){this.len=g,this.next=void 0,this.val=I}function writeVarint64(g,I,C){for(;g.hi;)I[C++]=127&g.lo|128,g.lo=(g.lo>>>7|g.hi<<25)>>>0,g.hi>>>=7;for(;g.lo>127;)I[C++]=127&g.lo|128,g.lo=g.lo>>>7;I[C++]=g.lo}function writeFixed32(g,I,C){I[C]=255&g,I[C+1]=g>>>8&255,I[C+2]=g>>>16&255,I[C+3]=g>>>24}Writer$1.create=create$1(),Writer$1.alloc=function(g){return new util$4.Array(g)},util$4.Array!==Array&&(Writer$1.alloc=util$4.pool(Writer$1.alloc,util$4.Array.prototype.subarray)),Writer$1.prototype._push=function(g,I,C){return this.tail=this.tail.next=new Op(g,I,C),this.len+=I,this},VarintOp.prototype=Object.create(Op.prototype),VarintOp.prototype.fn=writeVarint32,Writer$1.prototype.uint32=function(g){return this.len+=(this.tail=this.tail.next=new VarintOp((g>>>=0)<128?1:g<16384?2:g<2097152?3:g<268435456?4:5,g)).len,this},Writer$1.prototype.int32=function(g){return g<0?this._push(writeVarint64,10,LongBits$1.fromNumber(g)):this.uint32(g)},Writer$1.prototype.sint32=function(g){return this.uint32((g<<1^g>>31)>>>0)},Writer$1.prototype.uint64=function(g){var I=LongBits$1.from(g);return this._push(writeVarint64,I.length(),I)},Writer$1.prototype.int64=Writer$1.prototype.uint64,Writer$1.prototype.sint64=function(g){var I=LongBits$1.from(g).zzEncode();return this._push(writeVarint64,I.length(),I)},Writer$1.prototype.bool=function(g){return this._push(writeByte,1,g?1:0)},Writer$1.prototype.fixed32=function(g){return this._push(writeFixed32,4,g>>>0)},Writer$1.prototype.sfixed32=Writer$1.prototype.fixed32,Writer$1.prototype.fixed64=function(g){var I=LongBits$1.from(g);return this._push(writeFixed32,4,I.lo)._push(writeFixed32,4,I.hi)},Writer$1.prototype.sfixed64=Writer$1.prototype.fixed64,Writer$1.prototype.float=function(g){return this._push(util$4.float.writeFloatLE,4,g)},Writer$1.prototype.double=function(g){return this._push(util$4.float.writeDoubleLE,8,g)};var writeBytes=util$4.Array.prototype.set?function(g,I,C){I.set(g,C)}:function(g,I,C){for(var A=0;A<g.length;++A)I[C+A]=g[A]};Writer$1.prototype.bytes=function(g){var I=g.length>>>0;if(!I)return this._push(writeByte,1,0);if(util$4.isString(g)){var C=Writer$1.alloc(I=base64.length(g));base64.decode(g,C,0),g=C}return this.uint32(I)._push(writeBytes,I,g)},Writer$1.prototype.string=function(g){var I=utf8$1.length(g);return I?this.uint32(I)._push(utf8$1.write,I,g):this._push(writeByte,1,0)},Writer$1.prototype.fork=function(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this},Writer$1.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this},Writer$1.prototype.ldelim=function(){var g=this.head,I=this.tail,C=this.len;return this.reset().uint32(C),C&&(this.tail.next=g.next,this.tail=I,this.len+=C),this},Writer$1.prototype.finish=function(){for(var g=this.head.next,I=this.constructor.alloc(this.len),C=0;g;)g.fn(g.val,I,C),C+=g.len,g=g.next;return I},Writer$1._configure=function(g){BufferWriter$1=g,Writer$1.create=create$1(),BufferWriter$1._configure()};var writer_buffer=BufferWriter,Writer=writer;(BufferWriter.prototype=Object.create(Writer.prototype)).constructor=BufferWriter;var util$3=minimal$1;function BufferWriter(){Writer.call(this)}function writeStringBuffer(g,I,C){g.length<40?util$3.utf8.write(g,I,C):I.utf8Write?I.utf8Write(g,C):I.write(g,C)}BufferWriter._configure=function(){BufferWriter.alloc=util$3._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=util$3.Buffer&&util$3.Buffer.prototype instanceof Uint8Array&&"set"===util$3.Buffer.prototype.set.name?function(g,I,C){I.set(g,C)}:function(g,I,C){if(g.copy)g.copy(I,C,0,g.length);else for(var A=0;A<g.length;)I[C++]=g[A++]}},BufferWriter.prototype.bytes=function(g){util$3.isString(g)&&(g=util$3._Buffer_from(g,"base64"));var I=g.length>>>0;return this.uint32(I),I&&this._push(BufferWriter.writeBytesBuffer,I,g),this},BufferWriter.prototype.string=function(g){var I=util$3.Buffer.byteLength(g);return this.uint32(I),I&&this._push(writeStringBuffer,I,g),this},BufferWriter._configure();var reader=Reader$1,util$2=minimal$1,BufferReader$1,LongBits=util$2.LongBits,utf8=util$2.utf8;function indexOutOfRange(g,I){return RangeError("index out of range: "+g.pos+" + "+(I||1)+" > "+g.len)}function Reader$1(g){this.buf=g,this.pos=0,this.len=g.length}var create_array="undefined"!=typeof Uint8Array?function(g){if(g instanceof Uint8Array||Array.isArray(g))return new Reader$1(g);throw Error("illegal buffer")}:function(g){if(Array.isArray(g))return new Reader$1(g);throw Error("illegal buffer")},create=function(){return util$2.Buffer?function(g){return(Reader$1.create=function(g){return util$2.Buffer.isBuffer(g)?new BufferReader$1(g):create_array(g)})(g)}:create_array},value;function readLongVarint(){var g=new LongBits(0,0),I=0;if(!(this.len-this.pos>4)){for(;I<3;++I){if(this.pos>=this.len)throw indexOutOfRange(this);if(g.lo=(g.lo|(127&this.buf[this.pos])<<7*I)>>>0,this.buf[this.pos++]<128)return g}return g.lo=(g.lo|(127&this.buf[this.pos++])<<7*I)>>>0,g}for(;I<4;++I)if(g.lo=(g.lo|(127&this.buf[this.pos])<<7*I)>>>0,this.buf[this.pos++]<128)return g;if(g.lo=(g.lo|(127&this.buf[this.pos])<<28)>>>0,g.hi=(g.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return g;if(I=0,this.len-this.pos>4){for(;I<5;++I)if(g.hi=(g.hi|(127&this.buf[this.pos])<<7*I+3)>>>0,this.buf[this.pos++]<128)return g}else for(;I<5;++I){if(this.pos>=this.len)throw indexOutOfRange(this);if(g.hi=(g.hi|(127&this.buf[this.pos])<<7*I+3)>>>0,this.buf[this.pos++]<128)return g}throw Error("invalid varint encoding")}function readFixed32_end(g,I){return(g[I-4]|g[I-3]<<8|g[I-2]<<16|g[I-1]<<24)>>>0}function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader$1.create=create(),Reader$1.prototype._slice=util$2.Array.prototype.subarray||util$2.Array.prototype.slice,Reader$1.prototype.uint32=(value=4294967295,function(){if(value=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return value;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return value}),Reader$1.prototype.int32=function(){return 0|this.uint32()},Reader$1.prototype.sint32=function(){var g=this.uint32();return g>>>1^-(1&g)|0},Reader$1.prototype.bool=function(){return 0!==this.uint32()},Reader$1.prototype.fixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)},Reader$1.prototype.sfixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return 0|readFixed32_end(this.buf,this.pos+=4)},Reader$1.prototype.float=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var g=util$2.float.readFloatLE(this.buf,this.pos);return this.pos+=4,g},Reader$1.prototype.double=function(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var g=util$2.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,g},Reader$1.prototype.bytes=function(){var g=this.uint32(),I=this.pos,C=this.pos+g;if(C>this.len)throw indexOutOfRange(this,g);return this.pos+=g,Array.isArray(this.buf)?this.buf.slice(I,C):I===C?new this.buf.constructor(0):this._slice.call(this.buf,I,C)},Reader$1.prototype.string=function(){var g=this.bytes();return utf8.read(g,0,g.length)},Reader$1.prototype.skip=function(g){if("number"==typeof g){if(this.pos+g>this.len)throw indexOutOfRange(this,g);this.pos+=g}else do{if(this.pos>=this.len)throw indexOutOfRange(this)}while(128&this.buf[this.pos++]);return this},Reader$1.prototype.skipType=function(g){switch(g){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(g=7&this.uint32());)this.skipType(g);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+g+" at offset "+this.pos)}return this},Reader$1._configure=function(g){BufferReader$1=g,Reader$1.create=create(),BufferReader$1._configure();var I=util$2.Long?"toLong":"toNumber";util$2.merge(Reader$1.prototype,{int64:function(){return readLongVarint.call(this)[I](!1)},uint64:function(){return readLongVarint.call(this)[I](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[I](!1)},fixed64:function(){return readFixed64.call(this)[I](!0)},sfixed64:function(){return readFixed64.call(this)[I](!1)}})};var reader_buffer=BufferReader,Reader=reader;(BufferReader.prototype=Object.create(Reader.prototype)).constructor=BufferReader;var util$1=minimal$1;function BufferReader(g){Reader.call(this,g)}BufferReader._configure=function(){util$1.Buffer&&(BufferReader.prototype._slice=util$1.Buffer.prototype.slice)},BufferReader.prototype.string=function(){var g=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+g,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+g,this.len))},BufferReader._configure();var rpc={},service=Service,util=minimal$1,exports;function Service(g,I,C){if("function"!=typeof g)throw TypeError("rpcImpl must be a function");util.EventEmitter.call(this),this.rpcImpl=g,this.requestDelimited=Boolean(I),this.responseDelimited=Boolean(C)}(Service.prototype=Object.create(util.EventEmitter.prototype)).constructor=Service,Service.prototype.rpcCall=function g(I,C,A,t,e){if(!t)throw TypeError("request must be specified");var o=this;if(!e)return util.asPromise(g,o,I,C,A,t);if(o.rpcImpl)try{return o.rpcImpl(I,C[o.requestDelimited?"encodeDelimited":"encode"](t).finish(),(function(g,C){if(g)return o.emit("error",g,I),e(g);if(null!==C){if(!(C instanceof A))try{C=A[o.responseDelimited?"decodeDelimited":"decode"](C)}catch(g){return o.emit("error",g,I),e(g)}return o.emit("data",C,I),e(null,C)}o.end(!0)}))}catch(i){return o.emit("error",i,I),void setTimeout((function(){e(i)}),0)}else setTimeout((function(){e(Error("already ended"))}),0)},Service.prototype.end=function(g){return this.rpcImpl&&(g||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this},exports=rpc,exports.Service=service;var roots={};!function(g){var I=g;function C(){I.util._configure(),I.Writer._configure(I.BufferWriter),I.Reader._configure(I.BufferReader)}I.build="minimal",I.Writer=writer,I.BufferWriter=writer_buffer,I.Reader=reader,I.BufferReader=reader_buffer,I.util=minimal$1,I.rpc=rpc,I.roots=roots,I.configure=C,C()}(indexMinimal);var minimal=indexMinimal,$protobuf=minimal,$Reader=$protobuf.Reader,$Writer=$protobuf.Writer,$util=$protobuf.util,$root=$protobuf.roots.default||($protobuf.roots.default={});$root.protocol=function(){var g={};return g.Geometry=function(){function g(g){if(this.positions=[],this.uvs=[],this.indices=[],this.lights=[],g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}var I;return g.prototype.voxel=0,g.prototype.faceName=null,g.prototype.positions=$util.emptyArray,g.prototype.uvs=$util.emptyArray,g.prototype.indices=$util.emptyArray,g.prototype.lights=$util.emptyArray,Object.defineProperty(g.prototype,"_faceName",{get:$util.oneOfGetter(I=["faceName"]),set:$util.oneOfSetter(I)}),g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.voxel&&Object.hasOwnProperty.call(g,"voxel")&&I.uint32(8).uint32(g.voxel),null!=g.faceName&&Object.hasOwnProperty.call(g,"faceName")&&I.uint32(18).string(g.faceName),null!=g.positions&&g.positions.length){I.uint32(26).fork();for(var C=0;C<g.positions.length;++C)I.float(g.positions[C]);I.ldelim()}if(null!=g.uvs&&g.uvs.length){I.uint32(34).fork();for(C=0;C<g.uvs.length;++C)I.float(g.uvs[C]);I.ldelim()}if(null!=g.indices&&g.indices.length){I.uint32(42).fork();for(C=0;C<g.indices.length;++C)I.int32(g.indices[C]);I.ldelim()}if(null!=g.lights&&g.lights.length){I.uint32(50).fork();for(C=0;C<g.lights.length;++C)I.int32(g.lights[C]);I.ldelim()}return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Geometry;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.voxel=g.uint32();break;case 2:A.faceName=g.string();break;case 3:if(A.positions&&A.positions.length||(A.positions=[]),2==(7&t))for(var e=g.uint32()+g.pos;g.pos<e;)A.positions.push(g.float());else A.positions.push(g.float());break;case 4:if(A.uvs&&A.uvs.length||(A.uvs=[]),2==(7&t))for(e=g.uint32()+g.pos;g.pos<e;)A.uvs.push(g.float());else A.uvs.push(g.float());break;case 5:if(A.indices&&A.indices.length||(A.indices=[]),2==(7&t))for(e=g.uint32()+g.pos;g.pos<e;)A.indices.push(g.int32());else A.indices.push(g.int32());break;case 6:if(A.lights&&A.lights.length||(A.lights=[]),2==(7&t))for(e=g.uint32()+g.pos;g.pos<e;)A.lights.push(g.int32());else A.lights.push(g.int32());break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.voxel&&g.hasOwnProperty("voxel")&&!$util.isInteger(g.voxel))return"voxel: integer expected";if(null!=g.faceName&&g.hasOwnProperty("faceName")&&!$util.isString(g.faceName))return"faceName: string expected";if(null!=g.positions&&g.hasOwnProperty("positions")){if(!Array.isArray(g.positions))return"positions: array expected";for(var I=0;I<g.positions.length;++I)if("number"!=typeof g.positions[I])return"positions: number[] expected"}if(null!=g.uvs&&g.hasOwnProperty("uvs")){if(!Array.isArray(g.uvs))return"uvs: array expected";for(I=0;I<g.uvs.length;++I)if("number"!=typeof g.uvs[I])return"uvs: number[] expected"}if(null!=g.indices&&g.hasOwnProperty("indices")){if(!Array.isArray(g.indices))return"indices: array expected";for(I=0;I<g.indices.length;++I)if(!$util.isInteger(g.indices[I]))return"indices: integer[] expected"}if(null!=g.lights&&g.hasOwnProperty("lights")){if(!Array.isArray(g.lights))return"lights: array expected";for(I=0;I<g.lights.length;++I)if(!$util.isInteger(g.lights[I]))return"lights: integer[] expected"}return null},g.fromObject=function(g){if(g instanceof $root.protocol.Geometry)return g;var I=new $root.protocol.Geometry;if(null!=g.voxel&&(I.voxel=g.voxel>>>0),null!=g.faceName&&(I.faceName=String(g.faceName)),g.positions){if(!Array.isArray(g.positions))throw TypeError(".protocol.Geometry.positions: array expected");I.positions=[];for(var C=0;C<g.positions.length;++C)I.positions[C]=Number(g.positions[C])}if(g.uvs){if(!Array.isArray(g.uvs))throw TypeError(".protocol.Geometry.uvs: array expected");I.uvs=[];for(C=0;C<g.uvs.length;++C)I.uvs[C]=Number(g.uvs[C])}if(g.indices){if(!Array.isArray(g.indices))throw TypeError(".protocol.Geometry.indices: array expected");I.indices=[];for(C=0;C<g.indices.length;++C)I.indices[C]=0|g.indices[C]}if(g.lights){if(!Array.isArray(g.lights))throw TypeError(".protocol.Geometry.lights: array expected");I.lights=[];for(C=0;C<g.lights.length;++C)I.lights[C]=0|g.lights[C]}return I},g.toObject=function(g,I){I||(I={});var C={};if((I.arrays||I.defaults)&&(C.positions=[],C.uvs=[],C.indices=[],C.lights=[]),I.defaults&&(C.voxel=0),null!=g.voxel&&g.hasOwnProperty("voxel")&&(C.voxel=g.voxel),null!=g.faceName&&g.hasOwnProperty("faceName")&&(C.faceName=g.faceName,I.oneofs&&(C._faceName="faceName")),g.positions&&g.positions.length){C.positions=[];for(var A=0;A<g.positions.length;++A)C.positions[A]=I.json&&!isFinite(g.positions[A])?String(g.positions[A]):g.positions[A]}if(g.uvs&&g.uvs.length){C.uvs=[];for(A=0;A<g.uvs.length;++A)C.uvs[A]=I.json&&!isFinite(g.uvs[A])?String(g.uvs[A]):g.uvs[A]}if(g.indices&&g.indices.length){C.indices=[];for(A=0;A<g.indices.length;++A)C.indices[A]=g.indices[A]}if(g.lights&&g.lights.length){C.lights=[];for(A=0;A<g.lights.length;++A)C.lights[A]=g.lights[A]}return C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Geometry"},g}(),g.Mesh=function(){function g(g){if(this.geometries=[],g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.level=0,g.prototype.geometries=$util.emptyArray,g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.level&&Object.hasOwnProperty.call(g,"level")&&I.uint32(8).int32(g.level),null!=g.geometries&&g.geometries.length)for(var C=0;C<g.geometries.length;++C)$root.protocol.Geometry.encode(g.geometries[C],I.uint32(18).fork()).ldelim();return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Mesh;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.level=g.int32();break;case 2:A.geometries&&A.geometries.length||(A.geometries=[]),A.geometries.push($root.protocol.Geometry.decode(g,g.uint32()));break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.level&&g.hasOwnProperty("level")&&!$util.isInteger(g.level))return"level: integer expected";if(null!=g.geometries&&g.hasOwnProperty("geometries")){if(!Array.isArray(g.geometries))return"geometries: array expected";for(var I=0;I<g.geometries.length;++I){var C=$root.protocol.Geometry.verify(g.geometries[I]);if(C)return"geometries."+C}}return null},g.fromObject=function(g){if(g instanceof $root.protocol.Mesh)return g;var I=new $root.protocol.Mesh;if(null!=g.level&&(I.level=0|g.level),g.geometries){if(!Array.isArray(g.geometries))throw TypeError(".protocol.Mesh.geometries: array expected");I.geometries=[];for(var C=0;C<g.geometries.length;++C){if("object"!=typeof g.geometries[C])throw TypeError(".protocol.Mesh.geometries: object expected");I.geometries[C]=$root.protocol.Geometry.fromObject(g.geometries[C])}}return I},g.toObject=function(g,I){I||(I={});var C={};if((I.arrays||I.defaults)&&(C.geometries=[]),I.defaults&&(C.level=0),null!=g.level&&g.hasOwnProperty("level")&&(C.level=g.level),g.geometries&&g.geometries.length){C.geometries=[];for(var A=0;A<g.geometries.length;++A)C.geometries[A]=$root.protocol.Geometry.toObject(g.geometries[A],I)}return C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Mesh"},g}(),g.Chunk=function(){function g(g){if(this.meshes=[],this.voxels=[],this.lights=[],g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.x=0,g.prototype.z=0,g.prototype.id="",g.prototype.meshes=$util.emptyArray,g.prototype.voxels=$util.emptyArray,g.prototype.lights=$util.emptyArray,g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.x&&Object.hasOwnProperty.call(g,"x")&&I.uint32(8).int32(g.x),null!=g.z&&Object.hasOwnProperty.call(g,"z")&&I.uint32(16).int32(g.z),null!=g.id&&Object.hasOwnProperty.call(g,"id")&&I.uint32(26).string(g.id),null!=g.meshes&&g.meshes.length)for(var C=0;C<g.meshes.length;++C)$root.protocol.Mesh.encode(g.meshes[C],I.uint32(34).fork()).ldelim();if(null!=g.voxels&&g.voxels.length){I.uint32(42).fork();for(C=0;C<g.voxels.length;++C)I.uint32(g.voxels[C]);I.ldelim()}if(null!=g.lights&&g.lights.length){I.uint32(50).fork();for(C=0;C<g.lights.length;++C)I.uint32(g.lights[C]);I.ldelim()}return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Chunk;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.x=g.int32();break;case 2:A.z=g.int32();break;case 3:A.id=g.string();break;case 4:A.meshes&&A.meshes.length||(A.meshes=[]),A.meshes.push($root.protocol.Mesh.decode(g,g.uint32()));break;case 5:if(A.voxels&&A.voxels.length||(A.voxels=[]),2==(7&t))for(var e=g.uint32()+g.pos;g.pos<e;)A.voxels.push(g.uint32());else A.voxels.push(g.uint32());break;case 6:if(A.lights&&A.lights.length||(A.lights=[]),2==(7&t))for(e=g.uint32()+g.pos;g.pos<e;)A.lights.push(g.uint32());else A.lights.push(g.uint32());break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.x&&g.hasOwnProperty("x")&&!$util.isInteger(g.x))return"x: integer expected";if(null!=g.z&&g.hasOwnProperty("z")&&!$util.isInteger(g.z))return"z: integer expected";if(null!=g.id&&g.hasOwnProperty("id")&&!$util.isString(g.id))return"id: string expected";if(null!=g.meshes&&g.hasOwnProperty("meshes")){if(!Array.isArray(g.meshes))return"meshes: array expected";for(var I=0;I<g.meshes.length;++I){var C=$root.protocol.Mesh.verify(g.meshes[I]);if(C)return"meshes."+C}}if(null!=g.voxels&&g.hasOwnProperty("voxels")){if(!Array.isArray(g.voxels))return"voxels: array expected";for(I=0;I<g.voxels.length;++I)if(!$util.isInteger(g.voxels[I]))return"voxels: integer[] expected"}if(null!=g.lights&&g.hasOwnProperty("lights")){if(!Array.isArray(g.lights))return"lights: array expected";for(I=0;I<g.lights.length;++I)if(!$util.isInteger(g.lights[I]))return"lights: integer[] expected"}return null},g.fromObject=function(g){if(g instanceof $root.protocol.Chunk)return g;var I=new $root.protocol.Chunk;if(null!=g.x&&(I.x=0|g.x),null!=g.z&&(I.z=0|g.z),null!=g.id&&(I.id=String(g.id)),g.meshes){if(!Array.isArray(g.meshes))throw TypeError(".protocol.Chunk.meshes: array expected");I.meshes=[];for(var C=0;C<g.meshes.length;++C){if("object"!=typeof g.meshes[C])throw TypeError(".protocol.Chunk.meshes: object expected");I.meshes[C]=$root.protocol.Mesh.fromObject(g.meshes[C])}}if(g.voxels){if(!Array.isArray(g.voxels))throw TypeError(".protocol.Chunk.voxels: array expected");I.voxels=[];for(C=0;C<g.voxels.length;++C)I.voxels[C]=g.voxels[C]>>>0}if(g.lights){if(!Array.isArray(g.lights))throw TypeError(".protocol.Chunk.lights: array expected");I.lights=[];for(C=0;C<g.lights.length;++C)I.lights[C]=g.lights[C]>>>0}return I},g.toObject=function(g,I){I||(I={});var C={};if((I.arrays||I.defaults)&&(C.meshes=[],C.voxels=[],C.lights=[]),I.defaults&&(C.x=0,C.z=0,C.id=""),null!=g.x&&g.hasOwnProperty("x")&&(C.x=g.x),null!=g.z&&g.hasOwnProperty("z")&&(C.z=g.z),null!=g.id&&g.hasOwnProperty("id")&&(C.id=g.id),g.meshes&&g.meshes.length){C.meshes=[];for(var A=0;A<g.meshes.length;++A)C.meshes[A]=$root.protocol.Mesh.toObject(g.meshes[A],I)}if(g.voxels&&g.voxels.length){C.voxels=[];for(A=0;A<g.voxels.length;++A)C.voxels[A]=g.voxels[A]}if(g.lights&&g.lights.length){C.lights=[];for(A=0;A<g.lights.length;++A)C.lights[A]=g.lights[A]}return C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Chunk"},g}(),g.Peer=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.id="",g.prototype.username="",g.prototype.metadata="",g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.id&&Object.hasOwnProperty.call(g,"id")&&I.uint32(10).string(g.id),null!=g.username&&Object.hasOwnProperty.call(g,"username")&&I.uint32(18).string(g.username),null!=g.metadata&&Object.hasOwnProperty.call(g,"metadata")&&I.uint32(26).string(g.metadata),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Peer;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.id=g.string();break;case 2:A.username=g.string();break;case 3:A.metadata=g.string();break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){return"object"!=typeof g||null===g?"object expected":null!=g.id&&g.hasOwnProperty("id")&&!$util.isString(g.id)?"id: string expected":null!=g.username&&g.hasOwnProperty("username")&&!$util.isString(g.username)?"username: string expected":null!=g.metadata&&g.hasOwnProperty("metadata")&&!$util.isString(g.metadata)?"metadata: string expected":null},g.fromObject=function(g){if(g instanceof $root.protocol.Peer)return g;var I=new $root.protocol.Peer;return null!=g.id&&(I.id=String(g.id)),null!=g.username&&(I.username=String(g.username)),null!=g.metadata&&(I.metadata=String(g.metadata)),I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.id="",C.username="",C.metadata=""),null!=g.id&&g.hasOwnProperty("id")&&(C.id=g.id),null!=g.username&&g.hasOwnProperty("username")&&(C.username=g.username),null!=g.metadata&&g.hasOwnProperty("metadata")&&(C.metadata=g.metadata),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Peer"},g}(),g.Entity=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}var I,C;return g.prototype.operation=0,g.prototype.id="",g.prototype.type="",g.prototype.metadata="",g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.operation&&Object.hasOwnProperty.call(g,"operation")&&I.uint32(8).int32(g.operation),null!=g.id&&Object.hasOwnProperty.call(g,"id")&&I.uint32(18).string(g.id),null!=g.type&&Object.hasOwnProperty.call(g,"type")&&I.uint32(26).string(g.type),null!=g.metadata&&Object.hasOwnProperty.call(g,"metadata")&&I.uint32(34).string(g.metadata),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Entity;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.operation=g.int32();break;case 2:A.id=g.string();break;case 3:A.type=g.string();break;case 4:A.metadata=g.string();break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.operation&&g.hasOwnProperty("operation"))switch(g.operation){default:return"operation: enum value expected";case 0:case 1:case 2:}return null!=g.id&&g.hasOwnProperty("id")&&!$util.isString(g.id)?"id: string expected":null!=g.type&&g.hasOwnProperty("type")&&!$util.isString(g.type)?"type: string expected":null!=g.metadata&&g.hasOwnProperty("metadata")&&!$util.isString(g.metadata)?"metadata: string expected":null},g.fromObject=function(g){if(g instanceof $root.protocol.Entity)return g;var I=new $root.protocol.Entity;switch(g.operation){default:if("number"==typeof g.operation){I.operation=g.operation;break}break;case"CREATE":case 0:I.operation=0;break;case"DELETE":case 1:I.operation=1;break;case"UPDATE":case 2:I.operation=2}return null!=g.id&&(I.id=String(g.id)),null!=g.type&&(I.type=String(g.type)),null!=g.metadata&&(I.metadata=String(g.metadata)),I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.operation=I.enums===String?"CREATE":0,C.id="",C.type="",C.metadata=""),null!=g.operation&&g.hasOwnProperty("operation")&&(C.operation=I.enums===String?void 0===$root.protocol.Entity.Operation[g.operation]?g.operation:$root.protocol.Entity.Operation[g.operation]:g.operation),null!=g.id&&g.hasOwnProperty("id")&&(C.id=g.id),null!=g.type&&g.hasOwnProperty("type")&&(C.type=g.type),null!=g.metadata&&g.hasOwnProperty("metadata")&&(C.metadata=g.metadata),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Entity"},g.Operation=(I={},(C=Object.create(I))[I[0]="CREATE"]=0,C[I[1]="DELETE"]=1,C[I[2]="UPDATE"]=2,C),g}(),g.Event=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.name="",g.prototype.payload=null,g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.name&&Object.hasOwnProperty.call(g,"name")&&I.uint32(10).string(g.name),null!=g.payload&&Object.hasOwnProperty.call(g,"payload")&&$root.google.protobuf.Struct.encode(g.payload,I.uint32(18).fork()).ldelim(),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Event;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.name=g.string();break;case 2:A.payload=$root.google.protobuf.Struct.decode(g,g.uint32());break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.name&&g.hasOwnProperty("name")&&!$util.isString(g.name))return"name: string expected";if(null!=g.payload&&g.hasOwnProperty("payload")){var I=$root.google.protobuf.Struct.verify(g.payload);if(I)return"payload."+I}return null},g.fromObject=function(g){if(g instanceof $root.protocol.Event)return g;var I=new $root.protocol.Event;if(null!=g.name&&(I.name=String(g.name)),null!=g.payload){if("object"!=typeof g.payload)throw TypeError(".protocol.Event.payload: object expected");I.payload=$root.google.protobuf.Struct.fromObject(g.payload)}return I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.name="",C.payload=null),null!=g.name&&g.hasOwnProperty("name")&&(C.name=g.name),null!=g.payload&&g.hasOwnProperty("payload")&&(C.payload=$root.google.protobuf.Struct.toObject(g.payload,I)),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Event"},g}(),g.Method=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.name="",g.prototype.payload="",g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.name&&Object.hasOwnProperty.call(g,"name")&&I.uint32(10).string(g.name),null!=g.payload&&Object.hasOwnProperty.call(g,"payload")&&I.uint32(18).string(g.payload),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Method;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.name=g.string();break;case 2:A.payload=g.string();break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){return"object"!=typeof g||null===g?"object expected":null!=g.name&&g.hasOwnProperty("name")&&!$util.isString(g.name)?"name: string expected":null!=g.payload&&g.hasOwnProperty("payload")&&!$util.isString(g.payload)?"payload: string expected":null},g.fromObject=function(g){if(g instanceof $root.protocol.Method)return g;var I=new $root.protocol.Method;return null!=g.name&&(I.name=String(g.name)),null!=g.payload&&(I.payload=String(g.payload)),I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.name="",C.payload=""),null!=g.name&&g.hasOwnProperty("name")&&(C.name=g.name),null!=g.payload&&g.hasOwnProperty("payload")&&(C.payload=g.payload),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Method"},g}(),g.Update=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.vx=0,g.prototype.vy=0,g.prototype.vz=0,g.prototype.voxel=0,g.prototype.light=0,g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.vx&&Object.hasOwnProperty.call(g,"vx")&&I.uint32(8).int32(g.vx),null!=g.vy&&Object.hasOwnProperty.call(g,"vy")&&I.uint32(16).int32(g.vy),null!=g.vz&&Object.hasOwnProperty.call(g,"vz")&&I.uint32(24).int32(g.vz),null!=g.voxel&&Object.hasOwnProperty.call(g,"voxel")&&I.uint32(32).uint32(g.voxel),null!=g.light&&Object.hasOwnProperty.call(g,"light")&&I.uint32(40).uint32(g.light),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Update;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.vx=g.int32();break;case 2:A.vy=g.int32();break;case 3:A.vz=g.int32();break;case 4:A.voxel=g.uint32();break;case 5:A.light=g.uint32();break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){return"object"!=typeof g||null===g?"object expected":null!=g.vx&&g.hasOwnProperty("vx")&&!$util.isInteger(g.vx)?"vx: integer expected":null!=g.vy&&g.hasOwnProperty("vy")&&!$util.isInteger(g.vy)?"vy: integer expected":null!=g.vz&&g.hasOwnProperty("vz")&&!$util.isInteger(g.vz)?"vz: integer expected":null!=g.voxel&&g.hasOwnProperty("voxel")&&!$util.isInteger(g.voxel)?"voxel: integer expected":null!=g.light&&g.hasOwnProperty("light")&&!$util.isInteger(g.light)?"light: integer expected":null},g.fromObject=function(g){if(g instanceof $root.protocol.Update)return g;var I=new $root.protocol.Update;return null!=g.vx&&(I.vx=0|g.vx),null!=g.vy&&(I.vy=0|g.vy),null!=g.vz&&(I.vz=0|g.vz),null!=g.voxel&&(I.voxel=g.voxel>>>0),null!=g.light&&(I.light=g.light>>>0),I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.vx=0,C.vy=0,C.vz=0,C.voxel=0,C.light=0),null!=g.vx&&g.hasOwnProperty("vx")&&(C.vx=g.vx),null!=g.vy&&g.hasOwnProperty("vy")&&(C.vy=g.vy),null!=g.vz&&g.hasOwnProperty("vz")&&(C.vz=g.vz),null!=g.voxel&&g.hasOwnProperty("voxel")&&(C.voxel=g.voxel),null!=g.light&&g.hasOwnProperty("light")&&(C.light=g.light),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Update"},g}(),g.ChatMessage=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.type="",g.prototype.sender="",g.prototype.body="",g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.type&&Object.hasOwnProperty.call(g,"type")&&I.uint32(10).string(g.type),null!=g.sender&&Object.hasOwnProperty.call(g,"sender")&&I.uint32(18).string(g.sender),null!=g.body&&Object.hasOwnProperty.call(g,"body")&&I.uint32(26).string(g.body),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.ChatMessage;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.type=g.string();break;case 2:A.sender=g.string();break;case 3:A.body=g.string();break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){return"object"!=typeof g||null===g?"object expected":null!=g.type&&g.hasOwnProperty("type")&&!$util.isString(g.type)?"type: string expected":null!=g.sender&&g.hasOwnProperty("sender")&&!$util.isString(g.sender)?"sender: string expected":null!=g.body&&g.hasOwnProperty("body")&&!$util.isString(g.body)?"body: string expected":null},g.fromObject=function(g){if(g instanceof $root.protocol.ChatMessage)return g;var I=new $root.protocol.ChatMessage;return null!=g.type&&(I.type=String(g.type)),null!=g.sender&&(I.sender=String(g.sender)),null!=g.body&&(I.body=String(g.body)),I},g.toObject=function(g,I){I||(I={});var C={};return I.defaults&&(C.type="",C.sender="",C.body=""),null!=g.type&&g.hasOwnProperty("type")&&(C.type=g.type),null!=g.sender&&g.hasOwnProperty("sender")&&(C.sender=g.sender),null!=g.body&&g.hasOwnProperty("body")&&(C.body=g.body),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.ChatMessage"},g}(),g.Message=function(){function g(g){if(this.peers=[],this.entities=[],this.chunks=[],this.events=[],this.updates=[],g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}var I,C;return g.prototype.type=0,g.prototype.json="",g.prototype.text="",g.prototype.method=null,g.prototype.chat=null,g.prototype.peers=$util.emptyArray,g.prototype.entities=$util.emptyArray,g.prototype.chunks=$util.emptyArray,g.prototype.events=$util.emptyArray,g.prototype.updates=$util.emptyArray,g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.type&&Object.hasOwnProperty.call(g,"type")&&I.uint32(8).int32(g.type),null!=g.json&&Object.hasOwnProperty.call(g,"json")&&I.uint32(18).string(g.json),null!=g.text&&Object.hasOwnProperty.call(g,"text")&&I.uint32(26).string(g.text),null!=g.method&&Object.hasOwnProperty.call(g,"method")&&$root.protocol.Method.encode(g.method,I.uint32(34).fork()).ldelim(),null!=g.chat&&Object.hasOwnProperty.call(g,"chat")&&$root.protocol.ChatMessage.encode(g.chat,I.uint32(42).fork()).ldelim(),null!=g.peers&&g.peers.length)for(var C=0;C<g.peers.length;++C)$root.protocol.Peer.encode(g.peers[C],I.uint32(50).fork()).ldelim();if(null!=g.entities&&g.entities.length)for(C=0;C<g.entities.length;++C)$root.protocol.Entity.encode(g.entities[C],I.uint32(58).fork()).ldelim();if(null!=g.chunks&&g.chunks.length)for(C=0;C<g.chunks.length;++C)$root.protocol.Chunk.encode(g.chunks[C],I.uint32(66).fork()).ldelim();if(null!=g.events&&g.events.length)for(C=0;C<g.events.length;++C)$root.protocol.Event.encode(g.events[C],I.uint32(74).fork()).ldelim();if(null!=g.updates&&g.updates.length)for(C=0;C<g.updates.length;++C)$root.protocol.Update.encode(g.updates[C],I.uint32(82).fork()).ldelim();return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.protocol.Message;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.type=g.int32();break;case 2:A.json=g.string();break;case 3:A.text=g.string();break;case 4:A.method=$root.protocol.Method.decode(g,g.uint32());break;case 5:A.chat=$root.protocol.ChatMessage.decode(g,g.uint32());break;case 6:A.peers&&A.peers.length||(A.peers=[]),A.peers.push($root.protocol.Peer.decode(g,g.uint32()));break;case 7:A.entities&&A.entities.length||(A.entities=[]),A.entities.push($root.protocol.Entity.decode(g,g.uint32()));break;case 8:A.chunks&&A.chunks.length||(A.chunks=[]),A.chunks.push($root.protocol.Chunk.decode(g,g.uint32()));break;case 9:A.events&&A.events.length||(A.events=[]),A.events.push($root.protocol.Event.decode(g,g.uint32()));break;case 10:A.updates&&A.updates.length||(A.updates=[]),A.updates.push($root.protocol.Update.decode(g,g.uint32()));break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.type&&g.hasOwnProperty("type"))switch(g.type){default:return"type: enum value expected";case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:}if(null!=g.json&&g.hasOwnProperty("json")&&!$util.isString(g.json))return"json: string expected";if(null!=g.text&&g.hasOwnProperty("text")&&!$util.isString(g.text))return"text: string expected";if(null!=g.method&&g.hasOwnProperty("method")&&(C=$root.protocol.Method.verify(g.method)))return"method."+C;if(null!=g.chat&&g.hasOwnProperty("chat")&&(C=$root.protocol.ChatMessage.verify(g.chat)))return"chat."+C;if(null!=g.peers&&g.hasOwnProperty("peers")){if(!Array.isArray(g.peers))return"peers: array expected";for(var I=0;I<g.peers.length;++I){if(C=$root.protocol.Peer.verify(g.peers[I]))return"peers."+C}}if(null!=g.entities&&g.hasOwnProperty("entities")){if(!Array.isArray(g.entities))return"entities: array expected";for(I=0;I<g.entities.length;++I){if(C=$root.protocol.Entity.verify(g.entities[I]))return"entities."+C}}if(null!=g.chunks&&g.hasOwnProperty("chunks")){if(!Array.isArray(g.chunks))return"chunks: array expected";for(I=0;I<g.chunks.length;++I){if(C=$root.protocol.Chunk.verify(g.chunks[I]))return"chunks."+C}}if(null!=g.events&&g.hasOwnProperty("events")){if(!Array.isArray(g.events))return"events: array expected";for(I=0;I<g.events.length;++I){if(C=$root.protocol.Event.verify(g.events[I]))return"events."+C}}if(null!=g.updates&&g.hasOwnProperty("updates")){if(!Array.isArray(g.updates))return"updates: array expected";for(I=0;I<g.updates.length;++I){var C;if(C=$root.protocol.Update.verify(g.updates[I]))return"updates."+C}}return null},g.fromObject=function(g){if(g instanceof $root.protocol.Message)return g;var I=new $root.protocol.Message;switch(g.type){default:if("number"==typeof g.type){I.type=g.type;break}break;case"INIT":case 0:I.type=0;break;case"JOIN":case 1:I.type=1;break;case"LEAVE":case 2:I.type=2;break;case"ERROR":case 3:I.type=3;break;case"PEER":case 4:I.type=4;break;case"ENTITY":case 5:I.type=5;break;case"LOAD":case 6:I.type=6;break;case"UNLOAD":case 7:I.type=7;break;case"UPDATE":case 8:I.type=8;break;case"METHOD":case 9:I.type=9;break;case"CHAT":case 10:I.type=10;break;case"TRANSPORT":case 11:I.type=11;break;case"EVENT":case 12:I.type=12;break;case"ACTION":case 13:I.type=13;break;case"STATS":case 14:I.type=14}if(null!=g.json&&(I.json=String(g.json)),null!=g.text&&(I.text=String(g.text)),null!=g.method){if("object"!=typeof g.method)throw TypeError(".protocol.Message.method: object expected");I.method=$root.protocol.Method.fromObject(g.method)}if(null!=g.chat){if("object"!=typeof g.chat)throw TypeError(".protocol.Message.chat: object expected");I.chat=$root.protocol.ChatMessage.fromObject(g.chat)}if(g.peers){if(!Array.isArray(g.peers))throw TypeError(".protocol.Message.peers: array expected");I.peers=[];for(var C=0;C<g.peers.length;++C){if("object"!=typeof g.peers[C])throw TypeError(".protocol.Message.peers: object expected");I.peers[C]=$root.protocol.Peer.fromObject(g.peers[C])}}if(g.entities){if(!Array.isArray(g.entities))throw TypeError(".protocol.Message.entities: array expected");I.entities=[];for(C=0;C<g.entities.length;++C){if("object"!=typeof g.entities[C])throw TypeError(".protocol.Message.entities: object expected");I.entities[C]=$root.protocol.Entity.fromObject(g.entities[C])}}if(g.chunks){if(!Array.isArray(g.chunks))throw TypeError(".protocol.Message.chunks: array expected");I.chunks=[];for(C=0;C<g.chunks.length;++C){if("object"!=typeof g.chunks[C])throw TypeError(".protocol.Message.chunks: object expected");I.chunks[C]=$root.protocol.Chunk.fromObject(g.chunks[C])}}if(g.events){if(!Array.isArray(g.events))throw TypeError(".protocol.Message.events: array expected");I.events=[];for(C=0;C<g.events.length;++C){if("object"!=typeof g.events[C])throw TypeError(".protocol.Message.events: object expected");I.events[C]=$root.protocol.Event.fromObject(g.events[C])}}if(g.updates){if(!Array.isArray(g.updates))throw TypeError(".protocol.Message.updates: array expected");I.updates=[];for(C=0;C<g.updates.length;++C){if("object"!=typeof g.updates[C])throw TypeError(".protocol.Message.updates: object expected");I.updates[C]=$root.protocol.Update.fromObject(g.updates[C])}}return I},g.toObject=function(g,I){I||(I={});var C={};if((I.arrays||I.defaults)&&(C.peers=[],C.entities=[],C.chunks=[],C.events=[],C.updates=[]),I.defaults&&(C.type=I.enums===String?"INIT":0,C.json="",C.text="",C.method=null,C.chat=null),null!=g.type&&g.hasOwnProperty("type")&&(C.type=I.enums===String?void 0===$root.protocol.Message.Type[g.type]?g.type:$root.protocol.Message.Type[g.type]:g.type),null!=g.json&&g.hasOwnProperty("json")&&(C.json=g.json),null!=g.text&&g.hasOwnProperty("text")&&(C.text=g.text),null!=g.method&&g.hasOwnProperty("method")&&(C.method=$root.protocol.Method.toObject(g.method,I)),null!=g.chat&&g.hasOwnProperty("chat")&&(C.chat=$root.protocol.ChatMessage.toObject(g.chat,I)),g.peers&&g.peers.length){C.peers=[];for(var A=0;A<g.peers.length;++A)C.peers[A]=$root.protocol.Peer.toObject(g.peers[A],I)}if(g.entities&&g.entities.length){C.entities=[];for(A=0;A<g.entities.length;++A)C.entities[A]=$root.protocol.Entity.toObject(g.entities[A],I)}if(g.chunks&&g.chunks.length){C.chunks=[];for(A=0;A<g.chunks.length;++A)C.chunks[A]=$root.protocol.Chunk.toObject(g.chunks[A],I)}if(g.events&&g.events.length){C.events=[];for(A=0;A<g.events.length;++A)C.events[A]=$root.protocol.Event.toObject(g.events[A],I)}if(g.updates&&g.updates.length){C.updates=[];for(A=0;A<g.updates.length;++A)C.updates[A]=$root.protocol.Update.toObject(g.updates[A],I)}return C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/protocol.Message"},g.Type=(I={},(C=Object.create(I))[I[0]="INIT"]=0,C[I[1]="JOIN"]=1,C[I[2]="LEAVE"]=2,C[I[3]="ERROR"]=3,C[I[4]="PEER"]=4,C[I[5]="ENTITY"]=5,C[I[6]="LOAD"]=6,C[I[7]="UNLOAD"]=7,C[I[8]="UPDATE"]=8,C[I[9]="METHOD"]=9,C[I[10]="CHAT"]=10,C[I[11]="TRANSPORT"]=11,C[I[12]="EVENT"]=12,C[I[13]="ACTION"]=13,C[I[14]="STATS"]=14,C),g}(),g}(),$root.google=function(){var g,I,C,A={};return A.protobuf=((C={}).Struct=function(){function g(g){if(this.fields={},g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.fields=$util.emptyObject,g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.fields&&Object.hasOwnProperty.call(g,"fields"))for(var C=Object.keys(g.fields),A=0;A<C.length;++A)I.uint32(10).fork().uint32(10).string(C[A]),$root.google.protobuf.Value.encode(g.fields[C[A]],I.uint32(18).fork()).ldelim().ldelim();return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C,A,t=void 0===I?g.len:g.pos+I,e=new $root.google.protobuf.Struct;g.pos<t;){var o=g.uint32();if(o>>>3==1){e.fields===$util.emptyObject&&(e.fields={});var i=g.uint32()+g.pos;for(C="",A=null;g.pos<i;){var l=g.uint32();switch(l>>>3){case 1:C=g.string();break;case 2:A=$root.google.protobuf.Value.decode(g,g.uint32());break;default:g.skipType(7&l)}}e.fields[C]=A}else g.skipType(7&o)}return e},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.fields&&g.hasOwnProperty("fields")){if(!$util.isObject(g.fields))return"fields: object expected";for(var I=Object.keys(g.fields),C=0;C<I.length;++C){var A=$root.google.protobuf.Value.verify(g.fields[I[C]]);if(A)return"fields."+A}}return null},g.fromObject=function(g){if(g instanceof $root.google.protobuf.Struct)return g;var I=new $root.google.protobuf.Struct;if(g.fields){if("object"!=typeof g.fields)throw TypeError(".google.protobuf.Struct.fields: object expected");I.fields={};for(var C=Object.keys(g.fields),A=0;A<C.length;++A){if("object"!=typeof g.fields[C[A]])throw TypeError(".google.protobuf.Struct.fields: object expected");I.fields[C[A]]=$root.google.protobuf.Value.fromObject(g.fields[C[A]])}}return I},g.toObject=function(g,I){I||(I={});var C,A={};if((I.objects||I.defaults)&&(A.fields={}),g.fields&&(C=Object.keys(g.fields)).length){A.fields={};for(var t=0;t<C.length;++t)A.fields[C[t]]=$root.google.protobuf.Value.toObject(g.fields[C[t]],I)}return A},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/google.protobuf.Struct"},g}(),C.Value=function(){function g(g){if(g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}var I;return g.prototype.nullValue=null,g.prototype.numberValue=null,g.prototype.stringValue=null,g.prototype.boolValue=null,g.prototype.structValue=null,g.prototype.listValue=null,Object.defineProperty(g.prototype,"kind",{get:$util.oneOfGetter(I=["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]),set:$util.oneOfSetter(I)}),g.create=function(I){return new g(I)},g.encode=function(g,I){return I||(I=$Writer.create()),null!=g.nullValue&&Object.hasOwnProperty.call(g,"nullValue")&&I.uint32(8).int32(g.nullValue),null!=g.numberValue&&Object.hasOwnProperty.call(g,"numberValue")&&I.uint32(17).double(g.numberValue),null!=g.stringValue&&Object.hasOwnProperty.call(g,"stringValue")&&I.uint32(26).string(g.stringValue),null!=g.boolValue&&Object.hasOwnProperty.call(g,"boolValue")&&I.uint32(32).bool(g.boolValue),null!=g.structValue&&Object.hasOwnProperty.call(g,"structValue")&&$root.google.protobuf.Struct.encode(g.structValue,I.uint32(42).fork()).ldelim(),null!=g.listValue&&Object.hasOwnProperty.call(g,"listValue")&&$root.google.protobuf.ListValue.encode(g.listValue,I.uint32(50).fork()).ldelim(),I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.google.protobuf.Value;g.pos<C;){var t=g.uint32();switch(t>>>3){case 1:A.nullValue=g.int32();break;case 2:A.numberValue=g.double();break;case 3:A.stringValue=g.string();break;case 4:A.boolValue=g.bool();break;case 5:A.structValue=$root.google.protobuf.Struct.decode(g,g.uint32());break;case 6:A.listValue=$root.google.protobuf.ListValue.decode(g,g.uint32());break;default:g.skipType(7&t)}}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";var I={};if(null!=g.nullValue&&g.hasOwnProperty("nullValue")&&(I.kind=1,0!==g.nullValue))return"nullValue: enum value expected";if(null!=g.numberValue&&g.hasOwnProperty("numberValue")){if(1===I.kind)return"kind: multiple values";if(I.kind=1,"number"!=typeof g.numberValue)return"numberValue: number expected"}if(null!=g.stringValue&&g.hasOwnProperty("stringValue")){if(1===I.kind)return"kind: multiple values";if(I.kind=1,!$util.isString(g.stringValue))return"stringValue: string expected"}if(null!=g.boolValue&&g.hasOwnProperty("boolValue")){if(1===I.kind)return"kind: multiple values";if(I.kind=1,"boolean"!=typeof g.boolValue)return"boolValue: boolean expected"}if(null!=g.structValue&&g.hasOwnProperty("structValue")){if(1===I.kind)return"kind: multiple values";if(I.kind=1,C=$root.google.protobuf.Struct.verify(g.structValue))return"structValue."+C}if(null!=g.listValue&&g.hasOwnProperty("listValue")){if(1===I.kind)return"kind: multiple values";var C;if(I.kind=1,C=$root.google.protobuf.ListValue.verify(g.listValue))return"listValue."+C}return null},g.fromObject=function(g){if(g instanceof $root.google.protobuf.Value)return g;var I=new $root.google.protobuf.Value;switch(g.nullValue){default:if("number"==typeof g.nullValue){I.nullValue=g.nullValue;break}break;case"NULL_VALUE":case 0:I.nullValue=0}if(null!=g.numberValue&&(I.numberValue=Number(g.numberValue)),null!=g.stringValue&&(I.stringValue=String(g.stringValue)),null!=g.boolValue&&(I.boolValue=Boolean(g.boolValue)),null!=g.structValue){if("object"!=typeof g.structValue)throw TypeError(".google.protobuf.Value.structValue: object expected");I.structValue=$root.google.protobuf.Struct.fromObject(g.structValue)}if(null!=g.listValue){if("object"!=typeof g.listValue)throw TypeError(".google.protobuf.Value.listValue: object expected");I.listValue=$root.google.protobuf.ListValue.fromObject(g.listValue)}return I},g.toObject=function(g,I){I||(I={});var C={};return null!=g.nullValue&&g.hasOwnProperty("nullValue")&&(C.nullValue=I.enums===String?void 0===$root.google.protobuf.NullValue[g.nullValue]?g.nullValue:$root.google.protobuf.NullValue[g.nullValue]:g.nullValue,I.oneofs&&(C.kind="nullValue")),null!=g.numberValue&&g.hasOwnProperty("numberValue")&&(C.numberValue=I.json&&!isFinite(g.numberValue)?String(g.numberValue):g.numberValue,I.oneofs&&(C.kind="numberValue")),null!=g.stringValue&&g.hasOwnProperty("stringValue")&&(C.stringValue=g.stringValue,I.oneofs&&(C.kind="stringValue")),null!=g.boolValue&&g.hasOwnProperty("boolValue")&&(C.boolValue=g.boolValue,I.oneofs&&(C.kind="boolValue")),null!=g.structValue&&g.hasOwnProperty("structValue")&&(C.structValue=$root.google.protobuf.Struct.toObject(g.structValue,I),I.oneofs&&(C.kind="structValue")),null!=g.listValue&&g.hasOwnProperty("listValue")&&(C.listValue=$root.google.protobuf.ListValue.toObject(g.listValue,I),I.oneofs&&(C.kind="listValue")),C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/google.protobuf.Value"},g}(),C.NullValue=(g={},(I=Object.create(g))[g[0]="NULL_VALUE"]=0,I),C.ListValue=function(){function g(g){if(this.values=[],g)for(var I=Object.keys(g),C=0;C<I.length;++C)null!=g[I[C]]&&(this[I[C]]=g[I[C]])}return g.prototype.values=$util.emptyArray,g.create=function(I){return new g(I)},g.encode=function(g,I){if(I||(I=$Writer.create()),null!=g.values&&g.values.length)for(var C=0;C<g.values.length;++C)$root.google.protobuf.Value.encode(g.values[C],I.uint32(10).fork()).ldelim();return I},g.encodeDelimited=function(g,I){return this.encode(g,I).ldelim()},g.decode=function(g,I){g instanceof $Reader||(g=$Reader.create(g));for(var C=void 0===I?g.len:g.pos+I,A=new $root.google.protobuf.ListValue;g.pos<C;){var t=g.uint32();t>>>3==1?(A.values&&A.values.length||(A.values=[]),A.values.push($root.google.protobuf.Value.decode(g,g.uint32()))):g.skipType(7&t)}return A},g.decodeDelimited=function(g){return g instanceof $Reader||(g=new $Reader(g)),this.decode(g,g.uint32())},g.verify=function(g){if("object"!=typeof g||null===g)return"object expected";if(null!=g.values&&g.hasOwnProperty("values")){if(!Array.isArray(g.values))return"values: array expected";for(var I=0;I<g.values.length;++I){var C=$root.google.protobuf.Value.verify(g.values[I]);if(C)return"values."+C}}return null},g.fromObject=function(g){if(g instanceof $root.google.protobuf.ListValue)return g;var I=new $root.google.protobuf.ListValue;if(g.values){if(!Array.isArray(g.values))throw TypeError(".google.protobuf.ListValue.values: array expected");I.values=[];for(var C=0;C<g.values.length;++C){if("object"!=typeof g.values[C])throw TypeError(".google.protobuf.ListValue.values: object expected");I.values[C]=$root.google.protobuf.Value.fromObject(g.values[C])}}return I},g.toObject=function(g,I){I||(I={});var C={};if((I.arrays||I.defaults)&&(C.values=[]),g.values&&g.values.length){C.values=[];for(var A=0;A<g.values.length;++A)C.values[A]=$root.google.protobuf.Value.toObject(g.values[A],I)}return C},g.prototype.toJSON=function(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions)},g.getTypeUrl=function(g){return void 0===g&&(g="type.googleapis.com"),g+"/google.protobuf.ListValue"},g}(),C),A}();var protocol=$root;function encodeObjectToStruct(g,I){if(void 0===I&&(I=new Set),"object"!=typeof g||null===g)return encodeStructValue(g,I);const C={fields:{}};I.add(g);for(const A in g)if(g.hasOwnProperty(A)){const t=g[A];if(void 0===t)continue;C.fields[A]=encodeStructValue(t,I)}return I.delete(g),C}function encodeStructValue(g,I){if(null==g)return{nullValue:0};if("number"==typeof g)return{numberValue:g};if("string"==typeof g)return{stringValue:g};if("boolean"==typeof g)return{boolValue:g};if(Array.isArray(g))return{listValue:{values:g.map((g=>encodeStructValue(g,I)))}};if("object"==typeof g)return I.has(g)?(console.warn("Circular object detected"),{stringValue:"[Circular]"}):{structValue:encodeObjectToStruct(g,I)};throw new Error("Unknown type: "+typeof g)}function _defineProperty$e(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}const{google:google}=protocol;class Events extends Map{constructor(){var g;super(),g=this,_defineProperty$e(this,"packets",[]),_defineProperty$e(this,"onMessage",(g=>{if("EVENT"!==g.type);else{const{events:I}=g;I.forEach((g=>{this.handle(g.name,g.payload)}))}})),_defineProperty$e(this,"addEventListener",((g,I)=>{this.on(g,I)})),_defineProperty$e(this,"on",((g,I)=>{this.has(g)?console.warn(`Registering handler for ${g} canceled: handler already exists.`):this.set(g,I)})),_defineProperty$e(this,"emit",(function(I,C){void 0===C&&(C={}),g.packets.push({type:"EVENT",events:[{name:I,payload:encodeObjectToStruct(C)}]})})),_defineProperty$e(this,"emitMany",(g=>{this.packets.push({type:"EVENT",events:g.map((g=>({name:g.name,payload:google.protobuf.Struct.fromObject(g.payload||{})})))})})),_defineProperty$e(this,"handle",((g,I)=>{const C=this.get(g);C&&C(I)}))}}function _defineProperty$d(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Entity extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{constructor(g){super(),_defineProperty$d(this,"entId",void 0),_defineProperty$d(this,"onCreate",void 0),_defineProperty$d(this,"onUpdate",void 0),_defineProperty$d(this,"onDelete",void 0),this.entId=g}}class Entities extends three__WEBPACK_IMPORTED_MODULE_0__.ZAu{constructor(){super(...arguments),_defineProperty$d(this,"map",new Map),_defineProperty$d(this,"types",new Map),_defineProperty$d(this,"setClass",((g,I)=>{this.types.set(g.toLowerCase(),I)})),_defineProperty$d(this,"onMessage",(g=>{const{entities:I}=g;I&&I.length&&I.forEach((g=>{const{id:I,type:C,metadata:A,operation:t}=g;let e=this.map.get(I);switch(t){case"CREATE":var o;if(e)return;e=this.createEntityOfType(C,I),null===(o=e.onCreate)||void 0===o||o.call(e,A);break;case"UPDATE":var i,l;if(!e)e=this.createEntityOfType(C,I),null===(l=e.onCreate)||void 0===l||l.call(e,A);null===(i=e.onUpdate)||void 0===i||i.call(e,A);break;case"DELETE":var c,n;if(!e)return void console.warn(`Entity ${I} does not exist.`);this.map.delete(I),null===(c=e.parent)||void 0===c||c.remove(e),null===(n=e.onDelete)||void 0===n||n.call(e,A)}}))})),_defineProperty$d(this,"createEntityOfType",((g,I)=>{if(!this.types.has(g))return void console.warn(`Entity type ${g} is not registered.`);const C=new(this.types.get(g.toLowerCase()))(I);return this.map.set(I,C),this.add(C),C}))}}var events={exports:{}},R="object"==typeof Reflect?Reflect:null,ReflectApply=R&&"function"==typeof R.apply?R.apply:function(g,I,C){return Function.prototype.apply.call(g,I,C)},ReflectOwnKeys;function ProcessEmitWarning(g){console&&console.warn&&console.warn(g)}ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function(g){return Object.getOwnPropertyNames(g).concat(Object.getOwnPropertySymbols(g))}:function(g){return Object.getOwnPropertyNames(g)};var NumberIsNaN=Number.isNaN||function(g){return g!=g};function EventEmitter(){EventEmitter.init.call(this)}events.exports=EventEmitter,events.exports.once=once,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function checkListener(g){if("function"!=typeof g)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof g)}function _getMaxListeners(g){return void 0===g._maxListeners?EventEmitter.defaultMaxListeners:g._maxListeners}function _addListener(g,I,C,A){var t,e,o;if(checkListener(C),void 0===(e=g._events)?(e=g._events=Object.create(null),g._eventsCount=0):(void 0!==e.newListener&&(g.emit("newListener",I,C.listener?C.listener:C),e=g._events),o=e[I]),void 0===o)o=e[I]=C,++g._eventsCount;else if("function"==typeof o?o=e[I]=A?[C,o]:[o,C]:A?o.unshift(C):o.push(C),(t=_getMaxListeners(g))>0&&o.length>t&&!o.warned){o.warned=!0;var i=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(I)+" listeners added. Use emitter.setMaxListeners() to increase limit");i.name="MaxListenersExceededWarning",i.emitter=g,i.type=I,i.count=o.length,ProcessEmitWarning(i)}return g}function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(g,I,C){var A={fired:!1,wrapFn:void 0,target:g,type:I,listener:C},t=onceWrapper.bind(A);return t.listener=C,A.wrapFn=t,t}function _listeners(g,I,C){var A=g._events;if(void 0===A)return[];var t=A[I];return void 0===t?[]:"function"==typeof t?C?[t.listener||t]:[t]:C?unwrapListeners(t):arrayClone(t,t.length)}function listenerCount(g){var I=this._events;if(void 0!==I){var C=I[g];if("function"==typeof C)return 1;if(void 0!==C)return C.length}return 0}function arrayClone(g,I){for(var C=new Array(I),A=0;A<I;++A)C[A]=g[A];return C}function spliceOne(g,I){for(;I+1<g.length;I++)g[I]=g[I+1];g.pop()}function unwrapListeners(g){for(var I=new Array(g.length),C=0;C<I.length;++C)I[C]=g[C].listener||g[C];return I}function once(g,I){return new Promise((function(C,A){function t(C){g.removeListener(I,e),A(C)}function e(){"function"==typeof g.removeListener&&g.removeListener("error",t),C([].slice.call(arguments))}eventTargetAgnosticAddListener(g,I,e,{once:!0}),"error"!==I&&addErrorHandlerIfEventEmitter(g,t,{once:!0})}))}function addErrorHandlerIfEventEmitter(g,I,C){"function"==typeof g.on&&eventTargetAgnosticAddListener(g,"error",I,C)}function eventTargetAgnosticAddListener(g,I,C,A){if("function"==typeof g.on)A.once?g.once(I,C):g.on(I,C);else{if("function"!=typeof g.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof g);g.addEventListener(I,(function t(e){A.once&&g.removeEventListener(I,t),C(e)}))}}function _defineProperty$c(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$3(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$c(g,I,C[I])}))}return g}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(g){if("number"!=typeof g||g<0||NumberIsNaN(g))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+g+".");defaultMaxListeners=g}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function(g){if("number"!=typeof g||g<0||NumberIsNaN(g))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+g+".");return this._maxListeners=g,this},EventEmitter.prototype.getMaxListeners=function(){return _getMaxListeners(this)},EventEmitter.prototype.emit=function(g){for(var I=[],C=1;C<arguments.length;C++)I.push(arguments[C]);var A="error"===g,t=this._events;if(void 0!==t)A=A&&void 0===t.error;else if(!A)return!1;if(A){var e;if(I.length>0&&(e=I[0]),e instanceof Error)throw e;var o=new Error("Unhandled error."+(e?" ("+e.message+")":""));throw o.context=e,o}var i=t[g];if(void 0===i)return!1;if("function"==typeof i)ReflectApply(i,this,I);else{var l=i.length,c=arrayClone(i,l);for(C=0;C<l;++C)ReflectApply(c[C],this,I)}return!0},EventEmitter.prototype.addListener=function(g,I){return _addListener(this,g,I,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(g,I){return _addListener(this,g,I,!0)},EventEmitter.prototype.once=function(g,I){return checkListener(I),this.on(g,_onceWrap(this,g,I)),this},EventEmitter.prototype.prependOnceListener=function(g,I){return checkListener(I),this.prependListener(g,_onceWrap(this,g,I)),this},EventEmitter.prototype.removeListener=function(g,I){var C,A,t,e,o;if(checkListener(I),void 0===(A=this._events))return this;if(void 0===(C=A[g]))return this;if(C===I||C.listener===I)0==--this._eventsCount?this._events=Object.create(null):(delete A[g],A.removeListener&&this.emit("removeListener",g,C.listener||I));else if("function"!=typeof C){for(t=-1,e=C.length-1;e>=0;e--)if(C[e]===I||C[e].listener===I){o=C[e].listener,t=e;break}if(t<0)return this;0===t?C.shift():spliceOne(C,t),1===C.length&&(A[g]=C[0]),void 0!==A.removeListener&&this.emit("removeListener",g,o||I)}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function(g){var I,C,A;if(void 0===(C=this._events))return this;if(void 0===C.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==C[g]&&(0==--this._eventsCount?this._events=Object.create(null):delete C[g]),this;if(0===arguments.length){var t,e=Object.keys(C);for(A=0;A<e.length;++A)"removeListener"!==(t=e[A])&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(I=C[g]))this.removeListener(g,I);else if(void 0!==I)for(A=I.length-1;A>=0;A--)this.removeListener(g,I[A]);return this},EventEmitter.prototype.listeners=function(g){return _listeners(this,g,!0)},EventEmitter.prototype.rawListeners=function(g){return _listeners(this,g,!1)},EventEmitter.listenerCount=function(g,I){return"function"==typeof g.listenerCount?g.listenerCount(I):listenerCount.call(g,I)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};const PI_2=Math.PI/2,emptyQ=new three__WEBPACK_IMPORTED_MODULE_0__._fP;function rotateY(g,I,C){const A=I[0],t=I[2],e=g[0]-A,o=g[2]-t,i=Math.sin(C),l=Math.cos(C),c=[0,0,0];return c[0]=A+o*i+e*l,c[1]=g[1],c[2]=t+o*l-e*i,c}const defaultControlState={heading:0,running:!1,jumping:!1,sprinting:!1,crouching:!1,jumpCount:0,isJumping:!1,currentJumpTime:0},defaultOptions$2={sensitivity:100,minPolarAngle:.01*Math.PI,maxPolarAngle:.99*Math.PI,initialPosition:[0,80,10],rotationLerp:.9,positionLerp:1,stepLerp:.6,bodyWidth:.8,bodyHeight:1.55,bodyDepth:.8,eyeHeight:.9193548387096774,maxSpeed:6,moveForce:30,responsiveness:240,runningFriction:.1,standingFriction:4,flySpeed:40,flyForce:80,flyImpulse:2.5,flyInertia:6,sprintFactor:1.4,crouchFactor:.6,alwaysSprint:!1,airMoveMult:.7,fluidPushForce:.3,jumpImpulse:8,jumpForce:1,jumpTime:50,airJumps:0,stepHeight:.5};class RigidControls extends events.exports.EventEmitter{on(g,I){return super.on(g,I)}get ghostMode(){return this.body.aabb.width<=0}get flyMode(){return 0===this.body.gravityMultiplier&&!this.ghostMode}get voxel(){const[g,I,C]=this.body.getPosition();return ChunkUtils.mapWorldToVoxel([g,I-.5*this.options.bodyHeight,C])}get position(){const g=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(...this.body.getPosition());return g.y-=.5*this.options.bodyHeight,g}get chunk(){return ChunkUtils.mapVoxelToChunk(this.voxel,this.world.options.chunkSize)}constructor(g,I,C,A){var t;if(void 0===A&&(A={}),super(),t=this,_defineProperty$c(this,"options",void 0),_defineProperty$c(this,"camera",void 0),_defineProperty$c(this,"inputs",void 0),_defineProperty$c(this,"world",void 0),_defineProperty$c(this,"character",void 0),_defineProperty$c(this,"domElement",void 0),_defineProperty$c(this,"object",new three__WEBPACK_IMPORTED_MODULE_0__.ZAu),_defineProperty$c(this,"state",void 0),_defineProperty$c(this,"isLocked",!1),_defineProperty$c(this,"body",void 0),_defineProperty$c(this,"movements",{up:!1,down:!1,left:!1,right:!1,front:!1,back:!1,sprint:!1}),_defineProperty$c(this,"lockCallback",void 0),_defineProperty$c(this,"unlockCallback",void 0),_defineProperty$c(this,"euler",new three__WEBPACK_IMPORTED_MODULE_0__.USm(0,0,0,"YXZ")),_defineProperty$c(this,"quaternion",new three__WEBPACK_IMPORTED_MODULE_0__._fP),_defineProperty$c(this,"vector",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$c(this,"newPosition",new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),_defineProperty$c(this,"justUnlocked",!1),_defineProperty$c(this,"clock",new three__WEBPACK_IMPORTED_MODULE_0__.SUY),_defineProperty$c(this,"onMessage",(g=>{switch(g.type){case"EVENT":{const{events:I}=g;for(const g of I)if("position"===g.name.toLowerCase())this.body.setPosition(g.payload);break}}})),_defineProperty$c(this,"update",(()=>{const g=Math.min(.1,this.clock.getDelta());if(this.object.quaternion.slerp(this.quaternion,this.options.rotationLerp),this.object.position.lerp(this.newPosition,this.options.positionLerp),this.character){const{x:g,y:I,z:C}=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,0,-1).applyQuaternion(this.object.getWorldQuaternion(emptyQ)).normalize(),A=this.object.position.toArray();this.character.set(A,[g,I,C]),this.character.update()}this.moveRigidBody(),this.updateRigidBody(g)})),_defineProperty$c(this,"connect",(function(g,I){void 0===I&&(I="*");const C=[];return t.domElement.addEventListener("mousemove",(g=>{t.onMouseMove(g)})),t.domElement.ownerDocument.addEventListener("pointerlockchange",(()=>{t.onPointerlockChange()})),t.domElement.ownerDocument.addEventListener("pointerlockerror",t.onPointerlockError),t.domElement.addEventListener("click",t.onDocumentClick),C.push((()=>{t.domElement.removeEventListener("mousemove",(g=>{t.onMouseMove(g)})),t.domElement.ownerDocument.removeEventListener("pointerlockchange",(()=>{t.onPointerlockChange()})),t.domElement.ownerDocument.removeEventListener("pointerlockerror",t.onPointerlockError),t.domElement.removeEventListener("click",t.onDocumentClick)})),[["r","sprint"],["w","front"],["a","left"],["s","back"],["d","right"],[" ","up"],["shift","down"]].forEach((A=>{let[e,o]=A;C.push(g.bind(e,(()=>{t.isLocked&&(t.movements[o]=!0)}),I,{identifier:RigidControls.INPUT_IDENTIFIER})),C.push(g.bind(e,(()=>{t.isLocked&&(t.movements[o]=!1)}),I,{occasion:"keyup",identifier:RigidControls.INPUT_IDENTIFIER}))})),t.inputs=g,()=>{C.forEach((g=>{try{g()}catch(I){}}))}})),_defineProperty$c(this,"getDirection",(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(0,0,-1).applyQuaternion(this.object.quaternion).normalize())),_defineProperty$c(this,"lock",(g=>{this.domElement.requestPointerLock(),g&&(this.lockCallback=g)})),_defineProperty$c(this,"unlock",(g=>{this.domElement.ownerDocument.exitPointerLock(),g&&(this.unlockCallback=g)})),_defineProperty$c(this,"teleport",((g,I,C)=>{const{bodyHeight:A,eyeHeight:t}=this.options;this.newPosition.set(g+.5,I+A*t+1,C+.5),this.body&&this.body.setPosition([g+.5,I+A/2+1,C+.5])})),_defineProperty$c(this,"teleportToTop",((g,I)=>{if(void 0===g||void 0===I){const{x:g,z:I}=this.object.position,C=this.world.getMaxHeightAt(g,I);return void this.teleport(Math.floor(g),C,Math.floor(I))}const[C,A]=ChunkUtils.mapVoxelToChunk([g,0,I],this.world.options.chunkSize);this.teleport(g,0,I),this.world.addChunkInitListener([C,A],(()=>{const C=this.world.getMaxHeightAt(g,I);this.teleport(Math.floor(g),C,Math.floor(I))}))})),_defineProperty$c(this,"lookAt",((g,I,C)=>{const A=this.object.position.clone().add(this.object.position.clone().sub(new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(g,I,C)));this.object.lookAt(A)})),_defineProperty$c(this,"resetMovements",(()=>{this.movements={sprint:!1,front:!1,back:!1,left:!1,right:!1,down:!1,up:!1}})),_defineProperty$c(this,"toggleGhostMode",(()=>{const{aabb:g}=this.body,[I,C,A]=this.body.getPosition(),{bodyWidth:t,bodyHeight:e,bodyDepth:o}=this.options;if(this.ghostMode)g.minX=I-t/2,g.minY=C-e/2,g.minZ=A-o/2,g.maxX=g.minX+t,g.maxY=g.minY+e,g.maxZ=g.minZ+o,this.body.gravityMultiplier=1;else{const I=(g.minX+g.maxX)/2,C=(g.minY+g.maxY)/2,A=(g.minZ+g.maxZ)/2;g.minX=I+1,g.maxX=I-1,g.minY=C+1,g.maxY=C-1,g.minZ=A+1,g.maxZ=A-1,this.body.gravityMultiplier=0}})),_defineProperty$c(this,"toggleFly",(()=>{if(!this.ghostMode){const g=0===this.body.gravityMultiplier;g||this.body.applyImpulse([0,8,0]),setTimeout((()=>{this.body.gravityMultiplier=g?1:0}),100)}})),_defineProperty$c(this,"reset",(()=>{this.teleport(...this.options.initialPosition),this.object.rotation.set(0,0,0),this.resetMovements()})),_defineProperty$c(this,"moveForward",(g=>{this.vector.setFromMatrixColumn(this.object.matrix,0),this.vector.crossVectors(this.object.up,this.vector),this.object.position.addScaledVector(this.vector,g)})),_defineProperty$c(this,"moveRight",(g=>{this.vector.setFromMatrixColumn(this.object.matrix,0),this.object.position.addScaledVector(this.vector,g)})),_defineProperty$c(this,"attachCharacter",(function(g,I){void 0===I&&(I=1),g instanceof Character?(g.options.positionLerp=I,t.options.bodyHeight=g.totalHeight,t.options.bodyWidth=g.body.width,t.options.bodyDepth=g.body.depth,t.options.eyeHeight=g.eyeHeight/g.totalHeight,t.body.aabb.maxX=t.body.aabb.minX+t.options.bodyWidth,t.body.aabb.maxY=t.body.aabb.minY+t.options.bodyHeight,t.body.aabb.maxZ=t.body.aabb.minZ+t.options.bodyDepth,t.character=g):console.warn("Character not attached: not a default character.")})),_defineProperty$c(this,"moveRigidBody",(()=>{const{object:g,state:I}=this,{sprint:C,right:A,left:t,up:e,down:o,front:i,back:l}=this.movements,c=i?l?0:1:l?-1:0,n=t?A?0:1:A?-1:0,d=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4;d.setFromMatrixColumn(g.matrix,0),d.crossVectors(g.up,d);const{x:s,z:Z}=d;d.setFromMatrixColumn(g.matrix,0);const{x:b,z:a}=d,m=s+b,r=Z+a;let h=Math.atan2(m,r);0==(c|n)?(I.running=!1,I.sprinting&&(this.movements.sprint=!1,I.sprinting=!1)):(I.running=!0,c?(-1===c&&(h+=Math.PI),n&&(h+=Math.PI/4*c*n)):h+=n*Math.PI/2,I.heading=h+Math.PI/4),I.jumping=e,I.crouching=o,I.sprinting=!!this.options.alwaysSprint||C,this.ghostMode||0===this.body.gravityMultiplier&&-1===this.body.atRestY&&(this.body.gravityMultiplier=1)})),_defineProperty$c(this,"updateRigidBody",(g=>{const{airJumps:I,jumpForce:C,jumpTime:A,jumpImpulse:t,maxSpeed:e,sprintFactor:o,crouchFactor:i,moveForce:l,airMoveMult:c,responsiveness:n,runningFriction:d,standingFriction:s,flyInertia:Z,flyImpulse:b,flyForce:a,flySpeed:m,fluidPushForce:r}=this.options;if(this.body.gravityMultiplier){const Z=this.body.atRestY<0,b=Z||this.state.jumpCount<I;if(Z&&(this.state.isJumping=!1,this.state.jumpCount=0),this.state.jumping)if(this.state.isJumping){if(this.state.currentJumpTime>0){let I=C;this.state.currentJumpTime<g&&(I*=this.state.currentJumpTime/g),this.body.applyForce([0,I,0]),this.state.currentJumpTime-=g}}else b?(this.state.isJumping=!0,Z||this.state.jumpCount++,this.state.currentJumpTime=A,this.body.applyImpulse([0,t,0]),!Z&&this.body.velocity[1]<0&&(this.body.velocity[1]=0)):this.body.ratioInFluid>0&&this.body.applyImpulse([0,r,0]);else this.state.isJumping=!1;let a=[0,0,0],m=[0,0,0];if(this.state.running){let g=e;this.state.sprinting&&(g*=o),this.state.crouching&&(g*=i),a[2]=g,a=rotateY(a,[0,0,0],this.state.heading),m=[a[0]-this.body.velocity[0],a[1]-this.body.velocity[1],a[2]-this.body.velocity[2]],m[1]=0;const I=Math.sqrt(m[0]**2+m[1]**2+m[2]**2);if(m[0]/=I,m[1]/=I,m[2]/=I,I>0){let g=l;Z||(g*=c);const C=n*I;g>C&&(g=C),m[0]*=g,m[1]*=g,m[2]*=g,this.body.applyForce(m)}this.body.friction=d}else this.body.friction=s}else{this.body.velocity[0]-=this.body.velocity[0]*Z*g,this.body.velocity[1]-=this.body.velocity[1]*Z*g,this.body.velocity[2]-=this.body.velocity[2]*Z*g,this.state.jumping&&this.body.applyImpulse([0,b,0]),this.state.crouching&&this.body.applyImpulse([0,-b,0]);let I=[0,0,0],C=[0,0,0];if(this.state.running){let g=m;this.state.sprinting&&(g*=o),this.state.crouching&&(g*=i),I[2]=g,I=rotateY(I,[0,0,0],this.state.heading),C=[I[0]-this.body.velocity[0],I[1]-this.body.velocity[1],I[2]-this.body.velocity[2]],C[1]=0;const A=Math.sqrt(C[0]**2+C[1]**2+C[2]**2);if(C[0]/=A,C[1]/=A,C[2]/=A,A>0){let g=a;const I=n*A;g>I&&(g=I),C[0]*=g,C[1]*=g,C[2]*=g,this.body.applyForce(C)}this.body.friction=d}else this.body.friction=s}const[h,B,G]=this.body.getPosition(),{eyeHeight:W,bodyHeight:u}=this.options;this.newPosition.set(h,B+u*(W-.5),G)})),_defineProperty$c(this,"onMouseMove",(g=>{if(!1===this.isLocked)return;if(this.justUnlocked)return void(this.justUnlocked=!1);const I=g.movementX||0,C=g.movementY||0;this.euler.setFromQuaternion(this.quaternion),this.euler.y-=I*this.options.sensitivity*.002/100,this.euler.x-=C*this.options.sensitivity*.002/100,this.euler.x=Math.max(PI_2-this.options.maxPolarAngle,Math.min(PI_2-this.options.minPolarAngle,this.euler.x)),this.quaternion.setFromEuler(this.euler)})),_defineProperty$c(this,"onPointerlockChange",(()=>{this.domElement.ownerDocument.pointerLockElement===this.domElement?(this.onLock(),this.lockCallback&&(this.lockCallback(),this.lockCallback=void 0),this.isLocked=!0):(this.onUnlock(),this.unlockCallback&&(this.unlockCallback(),this.unlockCallback=void 0),this.isLocked=!1)})),_defineProperty$c(this,"onPointerlockError",(()=>{console.error("VOXELIZE.RigidControls: Unable to use Pointer Lock API")})),_defineProperty$c(this,"onDocumentClick",(()=>{this.isLocked||this.lock()})),_defineProperty$c(this,"onLock",(()=>{this.emit("lock")})),_defineProperty$c(this,"onUnlock",(()=>{this.emit("unlock"),this.justUnlocked=!0})),!g)throw new Error("RigidControls: Camera is required.");if(!I)throw new Error("RigidControls: DOM Element is required.");if(!C)throw new Error("RigidControls: World is required.");this.camera=g,this.world=C,this.domElement=I,this.state=defaultControlState;const{bodyWidth:e,bodyHeight:o,bodyDepth:i}=this.options=_objectSpread$3({},defaultOptions$2,A);this.object.add(this.camera),this.world.add(this.object),this.body=C.physics.addBody({aabb:new AABB(0,0,0,e,o,i),onStep:g=>{const{positionLerp:I,stepLerp:C}=this.options;this.options.positionLerp=C,this.body.aabb=g.clone();const A=setTimeout((()=>{this.options.positionLerp=I,clearTimeout(A)}),500)},stepHeight:this.options.stepHeight}),this.teleport(...this.options.initialPosition)}}_defineProperty$c(RigidControls,"INPUT_IDENTIFIER","voxelize-rigid-controls");var RigidBody=class{get atRestX(){return this.resting[0]}get atRestY(){return this.resting[1]}get atRestZ(){return this.resting[2]}constructor(g,I,C,A,t,e,o,i){this.aabb=g,this.mass=I,this.friction=C,this.restitution=A,this.gravityMultiplier=t,this.stepHeight=e,this.onStep=o,this.onCollide=i,this.resting=[0,0,0],this.velocity=[0,0,0],this.inFluid=!1,this.ratioInFluid=0,this.forces=[0,0,0],this.impulses=[0,0,0],this.sleepFrameCount=10,this.setPosition=g=>{this.aabb.setPosition([g[0]-this.aabb.width/2,g[1]-this.aabb.height/2,g[2]-this.aabb.depth/2]),this.markActive()},this.getPosition=()=>[this.aabb.minX+this.aabb.width/2,this.aabb.minY+this.aabb.height/2,this.aabb.minZ+this.aabb.depth/2],this.applyForce=g=>{this.forces[0]+=g[0],this.forces[1]+=g[1],this.forces[2]+=g[2],this.markActive()},this.applyImpulse=g=>{this.impulses[0]+=g[0],this.impulses[1]+=g[1],this.impulses[2]+=g[2],this.markActive()},this.markActive=()=>{this.sleepFrameCount=10},this.airDrag=-1,this.fluidDrag=-1}};function lineToPlane(g,I,C){const[A,t,e]=g,[o,i,l]=I,[c,n,d]=C,s=c*A+n*t+d*e;return 0===s?1/0:(c*o+n*i+d*l)/s}function between(g,I,C){return g>=I&&g<=C}function sweepAABB(g,I,C){const A=I.minX-g.maxX,t=I.minY-g.maxY,e=I.minZ-g.maxZ,o=g.width+I.width,i=g.height+I.height,l=g.depth+I.depth,[c,n,d]=C;let s=1,Z=0,b=0,a=0,m=0;return Z=lineToPlane(C,[A,t,e],[-1,0,0]),Z>=0&&c>0&&Z<s&&between(Z*n,t,t+i)&&between(Z*d,e,e+l)&&(s=Z,b=-1,a=0,m=0),Z=lineToPlane(C,[A+o,t,e],[1,0,0]),Z>=0&&c<0&&Z<s&&between(Z*n,t,t+i)&&between(Z*d,e,e+l)&&(s=Z,b=1,a=0,m=0),Z=lineToPlane(C,[A,t,e],[0,-1,0]),Z>=0&&n>0&&Z<s&&between(Z*c,A,A+o)&&between(Z*d,e,e+l)&&(s=Z,b=0,a=-1,m=0),Z=lineToPlane(C,[A,t+i,e],[0,1,0]),Z>=0&&n<0&&Z<s&&between(Z*c,A,A+o)&&between(Z*d,e,e+l)&&(s=Z,b=0,a=1,m=0),Z=lineToPlane(C,[A,t,e],[0,0,-1]),Z>=0&&d>0&&Z<s&&between(Z*c,A,A+o)&&between(Z*n,t,t+i)&&(s=Z,b=0,a=0,m=-1),Z=lineToPlane(C,[A,t,e+l],[0,0,1]),Z>=0&&d<0&&Z<s&&between(Z*c,A,A+o)&&between(Z*n,t,t+i)&&(s=Z,b=0,a=0,m=1),{h:s,nx:b,ny:a,nz:m}}function sweep(g,I,C,A,t,e){if(void 0===t&&(t=!0),void 0===e&&(e=100),e<=0)return;const[o,i,l]=C,c=Math.sqrt(o*o+i*i+l*l),n=Math.floor(o>0?I.minX:I.minX+o)-1,d=Math.floor(i>0?I.minY:I.minY+i)-1,s=Math.floor(l>0?I.minZ:I.minZ+l)-1,Z=Math.floor(o>0?I.maxX+o:I.maxX)+1,b=Math.floor(i>0?I.maxY+i:I.maxY)+1,a=Math.floor(l>0?I.maxZ+l:I.maxZ)+1;let m=[],r={h:1,nx:0,ny:0,nz:0};for(let p=n;p<=Z;p++)for(let A=s;A<=a;A++)for(let t=d;t<=b;t++){const e=g(p,t,A);for(const g of e){const e=sweepAABB(I,g,C);e.h<r.h&&(r=e,m=[p,t,A])}}const h=r.h*o+Engine.EPSILON*r.nx,B=r.h*i+Engine.EPSILON*r.ny,G=r.h*l+Engine.EPSILON*r.nz;if(t&&I.translate([h,B,G]),1===r.h)return;const W=0!==r.nx?0:0!==r.ny?1:2,u=-(r.nx+r.ny+r.nz),y=[(1-r.h)*o,(1-r.h)*i,(1-r.h)*l];0!==u&&A(c*r.h,W,u,y,m)||y[0]**2+y[1]**2+y[2]**2!=0&&sweep(g,I,y,A,t,e-1)}function approxEquals(g,I){return Math.abs(g-I)<1e-5}var _Engine=class{constructor(g,I,C){this.getVoxel=g,this.testFluid=I,this.options=C,this.bodies=[],this.addBody=g=>{const I={aabb:new AABB(0,0,0,1,1,1),mass:1,friction:1,restitution:0,gravityMultiplier:1,stepHeight:0},{aabb:C,mass:A,friction:t,restitution:e,gravityMultiplier:o,stepHeight:i,onStep:l,onCollide:c}={...I,...g},n=new RigidBody(C,A,t,e,o,i,l,c);return this.bodies.push(n),n},this.removeBody=g=>{const I=this.bodies.indexOf(g);I<0||this.bodies.splice(I,1)},this.update=g=>{const I=approxEquals(0,this.options.gravity[0]**2+this.options.gravity[1]**2+this.options.gravity[2]**2);this.bodies.forEach((C=>this.iterateBody(C,g,I)))},this.iterateBody=(g,I,C)=>{const A=[...g.resting];if(g.mass<=0)return g.velocity=[0,0,0],g.forces=[0,0,0],void(g.impulses=[0,0,0]);const t=C||0===g.gravityMultiplier;if(this.isBodyAsleep(g,I,t))return;g.sleepFrameCount--,this.applyFluidForces(g);const e=[g.forces[0]/g.mass+this.options.gravity[0]*g.gravityMultiplier,g.forces[1]/g.mass+this.options.gravity[1]*g.gravityMultiplier,g.forces[2]/g.mass+this.options.gravity[2]*g.gravityMultiplier],o=[g.impulses[0]/g.mass+e[0]*I,g.impulses[1]/g.mass+e[1]*I,g.impulses[2]/g.mass+e[2]*I];g.velocity=[g.velocity[0]+o[0],g.velocity[1]+o[1],g.velocity[2]+o[2]],g.friction&&(this.applyFrictionByAxis(0,g,o),this.applyFrictionByAxis(1,g,o),this.applyFrictionByAxis(2,g,o));let i=g.airDrag>=0?g.airDrag:this.options.airDrag;g.inFluid&&(i=g.fluidDrag>=0?g.fluidDrag:this.options.fluidDrag,i*=1-(1-g.ratioInFluid)**2);const l=Math.max(1-i*I/g.mass,0);g.velocity=[g.velocity[0]*l,g.velocity[1]*l,g.velocity[2]*l];const c=[g.velocity[0]*I,g.velocity[1]*I,g.velocity[2]*I];g.forces=[0,0,0],g.impulses=[0,0,0];const n=g.aabb.clone();this.processCollisions(g.aabb,c,g.resting),g.stepHeight>0&&this.tryAutoStepping(g,n,c);const d=[0,0,0];for(let Z=0;Z<3;++Z)g.resting[Z]&&(A[Z]||(d[Z]=-g.velocity[Z]),g.velocity[Z]=0);const s=Math.sqrt(d[0]**2+d[1]**2+d[2]**2);s>.001&&(d[0]=d[0]*g.mass,d[1]=d[1]*g.mass,d[2]=d[2]*g.mass,g.onCollide&&g.onCollide(d),g.restitution>0&&s>this.options.minBounceImpulse&&(d[0]=d[0]*g.restitution,d[1]=d[1]*g.restitution,d[2]=d[2]*g.restitution,g.applyImpulse(d)));g.velocity[0]**2+g.velocity[1]**2+g.velocity[2]**2>1e-5&&g.markActive()},this.applyFluidForces=g=>{const I=g.aabb,C=Math.floor(I.minX),A=Math.floor(I.minZ),t=Math.floor(I.minY),e=Math.floor(I.maxY);if(!this.testFluid(C,t,A))return g.inFluid=!1,void(g.ratioInFluid=0);let o=1,i=t+1;for(;i<=e&&this.testFluid(C,i,A);)o++,i++;let l=(t+o-I.minY)/(I.maxY-I.minY);l>1&&(l=1);const c=(I.maxX-I.minX)*(I.maxY-I.minY)*(I.maxZ-I.minZ)*l,n=-this.options.fluidDensity*c,d=[this.options.gravity[0]*n,this.options.gravity[1]*n,this.options.gravity[2]*n];g.applyForce(d),g.inFluid=!0,g.ratioInFluid=l},this.applyFrictionByAxis=(g,I,C)=>{const A=I.resting[g],t=C[g];if(0===A)return;if(A*t<=0)return;const e=[...I.velocity];e[g]=0;const o=Math.sqrt(e[0]**2+e[1]**2+e[2]**2);if(approxEquals(o,0))return;const i=Math.abs(I.friction*t),l=o>i?(o-i)/o:0;I.velocity[(g+1)%3]*=l,I.velocity[(g+2)%3]*=l},this.processCollisions=(g,I,C)=>{C[0]=0,C[1]=0,C[2]=0,sweep(this.getVoxel,g,I,(function(g,I,A,t){return C[I]=A,t[I]=0,!1}))},this.tryAutoStepping=(g,I,C)=>{if(g.resting[1]>=0&&!g.inFluid)return;const A=0!==g.resting[0],t=0!==g.resting[2];if(!A&&!t)return;const e=[I.minX+C[0],I.minY+C[1],I.minZ+C[2]];let o=[];sweep(this.getVoxel,I,C,(function(g,I,C,A,t){return 1===I?(A[I]=0,!1):(o=t||[],!0)}));const i=g.aabb.minY;let l=0;if(o){this.getVoxel(o[0],o[1],o[2]).forEach((g=>{g.maxY>l&&(l=g.maxY)}))}const c=Math.floor(i)+l-i+_Engine.EPSILON,n=[0,Math.min(c,g.stepHeight+.001),0];let d=!1;if(sweep(this.getVoxel,I,n,(function(){return d=!0,!0})),d)return;const s=[e[0]-I.minX,e[1]-I.minY,e[2]-I.minZ];s[1]=0;const Z=[0,0,0];if(this.processCollisions(I,s,Z),A&&!approxEquals(I.minX,e[0]))return;if(t&&!approxEquals(I.minZ,e[2]))return;const b=I.clone();sweep(this.getVoxel,b,[0,-c,0],(g=>(g>_Engine.EPSILON&&I.translate([0,-g+_Engine.EPSILON,0]),!0))),g.resting[0]=Z[0],g.resting[2]=Z[2],g.onStep?g.onStep(I,Z):g.aabb=I.clone()},this.isBodyAsleep=(g,I,C)=>{if(g.sleepFrameCount>0)return!1;if(C)return!0;let A=!1;const t=.5*I*I*g.gravityMultiplier,e=[this.options.gravity[0]*t,this.options.gravity[1]*t,this.options.gravity[2]*t];return sweep(this.getVoxel,g.aabb,e,(function(){return A=!0,!0}),!1),A},this.teleport=(g,I,C)=>{const A=1e3,t=g.getPosition(),e=(I[0]-t[0])/A,o=(I[1]-t[1])/A,i=(I[2]-t[2])/A;setInterval((()=>{g.aabb.translate([e,o,i])}),C/A)}}},Engine=_Engine;function raycastAABB(g,I,C,A){void 0===A&&(A=1/0);const[t,e,o]=I,i=(C.minX-g[0])/t,l=(C.maxX-g[0])/t,c=(C.minY-g[1])/e,n=(C.maxY-g[1])/e,d=(C.minZ-g[2])/o,s=(C.maxZ-g[2])/o,Z=Math.max(Math.max(Math.min(i,l),Math.min(c,n)),Math.min(d,s)),b=Z===i||Z===l?0:Z===c||Z===n?1:2,a=Math.min(Math.min(Math.max(i,l),Math.max(c,n)),Math.max(d,s));return a<0||Z>a?null:Z<0?a>A?null:{axis:Z===i||Z===l?0:Z===c||Z===n?1:2,distance:a}:Z>A?null:{axis:b,distance:Z}}function raycast(g,I,C,A){let t=+C[0],e=+C[1],o=+C[2];const i=Math.sqrt(t*t+e*e+o*o);if(0===i)throw new Error("Can't raycast along a zero vector");t/=i,e/=i,o/=i;const[l,c,n]=I;let d=0,s=0|Math.floor(l),Z=0|Math.floor(c),b=0|Math.floor(n);const a=t>0?1:-1,m=e>0?1:-1,r=o>0?1:-1,h=Math.abs(1/t),B=Math.abs(1/e),G=Math.abs(1/o);let W=h<1/0?h*(a>0?s+1-l:l-s):1/0,u=B<1/0?B*(m>0?Z+1-c:c-Z):1/0,y=G<1/0?G*(r>0?b+1-n:n-b):1/0;for(;d<=A;){let C;if((g(s,Z,b)||[]).forEach((g=>{const i=raycastAABB(I,[t,e,o],g.clone().translate([s,Z,b]),A);i&&(C=i)})),C)return{point:[l+C.distance*t,c+C.distance*e,n+C.distance*o],normal:[0===C.axis?-a:0,1===C.axis?-m:0,2===C.axis?-r:0],voxel:[s,Z,b]};W<u?W<y?(s+=a,d=W,W+=h):(b+=r,d=y,y+=G):u<y?(Z+=m,d=u,u+=B):(b+=r,d=y,y+=G)}return null}Engine.EPSILON=1e-10;var WorkerFactory$2=createBase64WorkerFactory("",null,!1),WorkerFactory$1=createBase64WorkerFactory("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgLy8gQHRzLWlnbm9yZQogIG9ubWVzc2FnZSA9IChlKT0+ewogICAgICBjb25zdCB7IGRhdGE6IHsgaW50ZXJ2YWwgLCBzaWduYWwgIH0gIH0gPSBlOwogICAgICBsZXQgaWQ7CiAgICAgIGlmIChzaWduYWwgPT09ICJzdGFydCIpIHsKICAgICAgICAgIGlkID0gc2V0SW50ZXJ2YWwoKCk9PnsKICAgICAgICAgICAgICBwb3N0TWVzc2FnZSgidGljayIpOwogICAgICAgICAgfSwgaW50ZXJ2YWwpOwogICAgICB9IGVsc2UgaWYgKHNpZ25hbCA9PT0gInN0b3AiKSB7CiAgICAgICAgICBjbGVhckludGVydmFsKGlkKTsKICAgICAgfQogIH07Cgp9KSgpOwoK",null,!1);function setWorkerInterval(g,I){const C=new WorkerFactory$1;return console.log(C),C.postMessage({signal:"start",interval:I}),C.onmessage=I=>{"tick"===I.data&&g()},()=>{C.postMessage({signal:"stop"})}}function _defineProperty$b(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class RawChunk{serialize(){return[{id:this.id,x:this.coords[0],z:this.coords[1],voxels:this.voxels.data.buffer,lights:this.lights.data.buffer,options:this.options},[this.voxels.data.buffer.slice(0),this.lights.data.buffer.slice(0)]]}static deserialize(g){const{id:I,x:C,z:A,voxels:t,lights:e,options:o}=g,i=new RawChunk(I,[C,A],o);return e&&e.byteLength&&(i.lights.data=new Uint32Array(e)),t&&t.byteLength&&(i.voxels.data=new Uint32Array(t)),i}setData(g){const{id:I,x:C,z:A}=g;if(this.id!==I)throw new Error("Chunk id mismatch");if(this.coords[0]!==C||this.coords[1]!==A)throw new Error("Chunk coords mismatch");const{voxels:t,lights:e}=g;e&&e.byteLength&&(this.lights.data=new Uint32Array(e)),t&&t.byteLength&&(this.voxels.data=new Uint32Array(t))}getRawValue(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.voxels.get(A,t,e)}setRawValue(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.voxels.set(t,e,o,A)}getRawLight(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.lights.get(A,t,e)}setRawLight(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.lights.set(t,e,o,A)}getVoxel(g,I,C){return BlockUtils.extractID(this.getRawValue(0|g,0|I,0|C))}setVoxel(g,I,C,A){const t=BlockUtils.insertID(0,A);return this.setRawValue(g,I,C,t),A}getVoxelRotation(g,I,C){return this.contains(g,I,C)?BlockUtils.extractRotation(this.getRawValue(g,I,C)):new BlockRotation}setVoxelRotation(g,I,C,A){const t=BlockUtils.insertRotation(this.getRawValue(g,I,C),A);this.setRawValue(g,I,C,t)}getVoxelStage(g,I,C){return this.contains(g,I,C)?BlockUtils.extractStage(this.getRawValue(g,I,C)):0}setVoxelStage(g,I,C,A){const t=BlockUtils.insertStage(this.getRawValue(g,I,C),A);return this.setRawValue(g,I,C,t),A}getRedLight(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.getLocalRedLight(A,t,e)}setRedLight(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.setLocalRedLight(t,e,o,A)}getGreenLight(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.getLocalGreenLight(A,t,e)}setGreenLight(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.setLocalGreenLight(t,e,o,A)}getBlueLight(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.getLocalBlueLight(A,t,e)}setBlueLight(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.setLocalBlueLight(t,e,o,A)}getTorchLight(g,I,C,A){switch(A){case"RED":return this.getRedLight(g,I,C);case"GREEN":return this.getGreenLight(g,I,C);case"BLUE":return this.getBlueLight(g,I,C);default:throw new Error("Received unknown light color...")}}setTorchLight(g,I,C,A,t){switch(t){case"RED":return this.setRedLight(g,I,C,A);case"GREEN":return this.setGreenLight(g,I,C,A);case"BLUE":return this.setBlueLight(g,I,C,A);default:throw new Error("Received unknown light color...")}}getSunlight(g,I,C){if(!this.contains(g,I,C))return 0;const[A,t,e]=this.toLocal(g,I,C);return this.getLocalSunlight(A,t,e)}setSunlight(g,I,C,A){if(!this.contains(g,I,C))return 0;const[t,e,o]=this.toLocal(g,I,C);return this.setLocalSunlight(t,e,o,A)}get isReady(){return 0!==this.lights.data.length&&0!==this.voxels.data.length}getLocalRedLight(g,I,C){return LightUtils.extractRedLight(this.lights.get(g,I,C))}setLocalRedLight(g,I,C,A){return this.lights.set(g,I,C,LightUtils.insertRedLight(this.lights.get(g,I,C),A))}getLocalGreenLight(g,I,C){return LightUtils.extractGreenLight(this.lights.get(g,I,C))}setLocalGreenLight(g,I,C,A){return this.lights.set(g,I,C,LightUtils.insertGreenLight(this.lights.get(g,I,C),A))}getLocalBlueLight(g,I,C){return LightUtils.extractBlueLight(this.lights.get(g,I,C))}setLocalBlueLight(g,I,C,A){return this.lights.set(g,I,C,LightUtils.insertBlueLight(this.lights.get(g,I,C),A))}getLocalSunlight(g,I,C){return LightUtils.extractSunlight(this.lights.get(g,I,C))}setLocalSunlight(g,I,C,A){return this.lights.set(g,I,C,LightUtils.insertSunlight(this.lights.get(g,I,C),A))}toLocal(g,I,C){const[A,t,e]=this.min;return[(0|g)-A,(0|I)-t,(0|C)-e]}contains(g,I,C){const{size:A,maxHeight:t}=this.options,[e,o,i]=this.toLocal(g,I,C);return e<A&&o>=0&&o<t&&i>=0&&i<A}constructor(g,I,C){_defineProperty$b(this,"options",void 0),_defineProperty$b(this,"id",void 0),_defineProperty$b(this,"name",void 0),_defineProperty$b(this,"coords",void 0),_defineProperty$b(this,"min",void 0),_defineProperty$b(this,"max",void 0),_defineProperty$b(this,"voxels",void 0),_defineProperty$b(this,"lights",void 0),this.id=g,this.name=ChunkUtils.getChunkName(I),this.coords=I,this.options=C;const{size:A,maxHeight:t}=C;this.voxels=ndarray([],[A,t,A]),this.lights=ndarray([],[A,t,A]);const[e,o]=I;this.min=[e*A,0,o*A],this.max=[(e+1)*A,t,(o+1)*A]}}function _defineProperty$a(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Chunk extends RawChunk{setData(g){const{id:I,x:C,z:A}=g;if(this.id!==I)throw new Error("Chunk id mismatch");if(this.coords[0]!==C||this.coords[1]!==A)throw new Error("Chunk coords mismatch");const{voxels:t,lights:e}=g;e&&e.byteLength&&(this.lights.data=new Uint32Array(e)),t&&t.byteLength&&(this.voxels.data=new Uint32Array(t))}dispose(){this.meshes.forEach((g=>{g.forEach((g=>{var I;g&&(null===(I=g.geometry)||void 0===I||I.dispose(),g.parent&&g.parent.remove(g))}))})),this.lights.data=new Uint32Array,this.voxels.data=new Uint32Array}constructor(g,I,C){super(g,I,C),_defineProperty$a(this,"meshes",new Map),_defineProperty$a(this,"added",!1),_defineProperty$a(this,"isDirty",!1)}}function _defineProperty$9(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Chunks{constructor(){_defineProperty$9(this,"materials",new Map),_defineProperty$9(this,"uniforms",{fogColor:{value:new three__WEBPACK_IMPORTED_MODULE_0__.Ilk("#B1CCFD")},fogNear:{value:100},fogFar:{value:200},ao:{value:new three__WEBPACK_IMPORTED_MODULE_0__.Ltg(100,170,210,255)},minLightLevel:{value:0},sunlightIntensity:{value:1},time:{value:performance.now()}}),_defineProperty$9(this,"requested",new Map),_defineProperty$9(this,"toRequest",[]),_defineProperty$9(this,"loaded",new Map),_defineProperty$9(this,"toProcess",[]),_defineProperty$9(this,"toUpdate",[]),_defineProperty$9(this,"toEmit",[])}}var omggif={},GifReader_1,GifWriter_1;function GifWriter(g,I,C,A){var t=0,e=void 0===(A=void 0===A?{}:A).loop?null:A.loop,o=void 0===A.palette?null:A.palette;if(I<=0||C<=0||I>65535||C>65535)throw new Error("Width/Height invalid.");function i(g){var I=g.length;if(I<2||I>256||I&I-1)throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");return I}g[t++]=71,g[t++]=73,g[t++]=70,g[t++]=56,g[t++]=57,g[t++]=97;var l=0,c=0;if(null!==o){for(var n=i(o);n>>=1;)++l;if(n=1<<l,--l,void 0!==A.background){if((c=A.background)>=n)throw new Error("Background index out of range.");if(0===c)throw new Error("Background index explicitly passed as 0.")}}if(g[t++]=255&I,g[t++]=I>>8&255,g[t++]=255&C,g[t++]=C>>8&255,g[t++]=(null!==o?128:0)|l,g[t++]=c,g[t++]=0,null!==o)for(var d=0,s=o.length;d<s;++d){var Z=o[d];g[t++]=Z>>16&255,g[t++]=Z>>8&255,g[t++]=255&Z}if(null!==e){if(e<0||e>65535)throw new Error("Loop count invalid.");g[t++]=33,g[t++]=255,g[t++]=11,g[t++]=78,g[t++]=69,g[t++]=84,g[t++]=83,g[t++]=67,g[t++]=65,g[t++]=80,g[t++]=69,g[t++]=50,g[t++]=46,g[t++]=48,g[t++]=3,g[t++]=1,g[t++]=255&e,g[t++]=e>>8&255,g[t++]=0}var b=!1;this.addFrame=function(I,C,A,e,l,c){if(!0===b&&(--t,b=!1),c=void 0===c?{}:c,I<0||C<0||I>65535||C>65535)throw new Error("x/y invalid.");if(A<=0||e<=0||A>65535||e>65535)throw new Error("Width/Height invalid.");if(l.length<A*e)throw new Error("Not enough pixels for the frame size.");var n=!0,d=c.palette;if(null==d&&(n=!1,d=o),null==d)throw new Error("Must supply either a local or global palette.");for(var s=i(d),Z=0;s>>=1;)++Z;s=1<<Z;var a=void 0===c.delay?0:c.delay,m=void 0===c.disposal?0:c.disposal;if(m<0||m>3)throw new Error("Disposal out of range.");var r=!1,h=0;if(void 0!==c.transparent&&null!==c.transparent&&(r=!0,(h=c.transparent)<0||h>=s))throw new Error("Transparent color index.");if((0!==m||r||0!==a)&&(g[t++]=33,g[t++]=249,g[t++]=4,g[t++]=m<<2|(!0===r?1:0),g[t++]=255&a,g[t++]=a>>8&255,g[t++]=h,g[t++]=0),g[t++]=44,g[t++]=255&I,g[t++]=I>>8&255,g[t++]=255&C,g[t++]=C>>8&255,g[t++]=255&A,g[t++]=A>>8&255,g[t++]=255&e,g[t++]=e>>8&255,g[t++]=!0===n?128|Z-1:0,!0===n)for(var B=0,G=d.length;B<G;++B){var W=d[B];g[t++]=W>>16&255,g[t++]=W>>8&255,g[t++]=255&W}return t=GifWriterOutputLZWCodeStream(g,t,Z<2?2:Z,l)},this.end=function(){return!1===b&&(g[t++]=59,b=!0),t},this.getOutputBuffer=function(){return g},this.setOutputBuffer=function(I){g=I},this.getOutputBufferPosition=function(){return t},this.setOutputBufferPosition=function(g){t=g}}function GifWriterOutputLZWCodeStream(g,I,C,A){g[I++]=C;var t=I++,e=1<<C,o=e-1,i=e+1,l=i+1,c=C+1,n=0,d=0;function s(C){for(;n>=C;)g[I++]=255&d,d>>=8,n-=8,I===t+256&&(g[t]=255,t=I++)}function Z(g){d|=g<<n,n+=c,s(8)}var b=A[0]&o,a={};Z(e);for(var m=1,r=A.length;m<r;++m){var h=A[m]&o,B=b<<8|h,G=a[B];if(void 0===G){for(d|=b<<n,n+=c;n>=8;)g[I++]=255&d,d>>=8,n-=8,I===t+256&&(g[t]=255,t=I++);4096===l?(Z(e),l=i+1,c=C+1,a={}):(l>=1<<c&&++c,a[B]=l++),b=h}else b=G}return Z(b),Z(i),s(1),t+1===I?g[t]=0:(g[t]=I-t-1,g[I++]=0),I}function GifReader(g){var I=0;if(71!==g[I++]||73!==g[I++]||70!==g[I++]||56!==g[I++]||56!=(g[I++]+1&253)||97!==g[I++])throw new Error("Invalid GIF 87a/89a header.");var C=g[I++]|g[I++]<<8,A=g[I++]|g[I++]<<8,t=g[I++],e=t>>7,o=1<<(7&t)+1;g[I++],g[I++];var i=null,l=null;e&&(i=I,l=o,I+=3*o);var c=!0,n=[],d=0,s=null,Z=0,b=null;for(this.width=C,this.height=A;c&&I<g.length;)switch(g[I++]){case 33:switch(g[I++]){case 255:if(11!==g[I]||78==g[I+1]&&69==g[I+2]&&84==g[I+3]&&83==g[I+4]&&67==g[I+5]&&65==g[I+6]&&80==g[I+7]&&69==g[I+8]&&50==g[I+9]&&46==g[I+10]&&48==g[I+11]&&3==g[I+12]&&1==g[I+13]&&0==g[I+16])I+=14,b=g[I++]|g[I++]<<8,I++;else for(I+=12;;){if(!((Y=g[I++])>=0))throw Error("Invalid block size");if(0===Y)break;I+=Y}break;case 249:if(4!==g[I++]||0!==g[I+4])throw new Error("Invalid graphics extension block.");var a=g[I++];d=g[I++]|g[I++]<<8,s=g[I++],0==(1&a)&&(s=null),Z=a>>2&7,I++;break;case 254:for(;;){if(!((Y=g[I++])>=0))throw Error("Invalid block size");if(0===Y)break;I+=Y}break;default:throw new Error("Unknown graphic control label: 0x"+g[I-1].toString(16))}break;case 44:var m=g[I++]|g[I++]<<8,r=g[I++]|g[I++]<<8,h=g[I++]|g[I++]<<8,B=g[I++]|g[I++]<<8,G=g[I++],W=G>>6&1,u=1<<(7&G)+1,y=i,p=l,V=!1;if(G>>7){V=!0;y=I,p=u,I+=3*u}var S=I;for(I++;;){var Y;if(!((Y=g[I++])>=0))throw Error("Invalid block size");if(0===Y)break;I+=Y}n.push({x:m,y:r,width:h,height:B,has_local_palette:V,palette_offset:y,palette_size:p,data_offset:S,data_length:I-S,transparent_index:s,interlaced:!!W,delay:d,disposal:Z});break;case 59:c=!1;break;default:throw new Error("Unknown gif block: 0x"+g[I-1].toString(16))}this.numFrames=function(){return n.length},this.loopCount=function(){return b},this.frameInfo=function(g){if(g<0||g>=n.length)throw new Error("Frame index out of range.");return n[g]},this.decodeAndBlitFrameBGRA=function(I,A){var t=this.frameInfo(I),e=t.width*t.height,o=new Uint8Array(e);GifReaderLZWOutputIndexStream(g,t.data_offset,o,e);var i=t.palette_offset,l=t.transparent_index;null===l&&(l=256);var c=t.width,n=C-c,d=c,s=4*(t.y*C+t.x),Z=4*((t.y+t.height)*C+t.x),b=s,a=4*n;!0===t.interlaced&&(a+=4*C*7);for(var m=8,r=0,h=o.length;r<h;++r){var B=o[r];if(0===d&&(d=c,(b+=a)>=Z&&(a=4*n+4*C*(m-1),b=s+(c+n)*(m<<1),m>>=1)),B===l)b+=4;else{var G=g[i+3*B],W=g[i+3*B+1],u=g[i+3*B+2];A[b++]=u,A[b++]=W,A[b++]=G,A[b++]=255}--d}},this.decodeAndBlitFrameRGBA=function(I,A){var t=this.frameInfo(I),e=t.width*t.height,o=new Uint8Array(e);GifReaderLZWOutputIndexStream(g,t.data_offset,o,e);var i=t.palette_offset,l=t.transparent_index;null===l&&(l=256);var c=t.width,n=C-c,d=c,s=4*(t.y*C+t.x),Z=4*((t.y+t.height)*C+t.x),b=s,a=4*n;!0===t.interlaced&&(a+=4*C*7);for(var m=8,r=0,h=o.length;r<h;++r){var B=o[r];if(0===d&&(d=c,(b+=a)>=Z&&(a=4*n+4*C*(m-1),b=s+(c+n)*(m<<1),m>>=1)),B===l)b+=4;else{var G=g[i+3*B],W=g[i+3*B+1],u=g[i+3*B+2];A[b++]=G,A[b++]=W,A[b++]=u,A[b++]=255}--d}}}function GifReaderLZWOutputIndexStream(g,I,C,A){for(var t=g[I++],e=1<<t,o=e+1,i=o+1,l=t+1,c=(1<<l)-1,n=0,d=0,s=0,Z=g[I++],b=new Int32Array(4096),a=null;;){for(;n<16&&0!==Z;)d|=g[I++]<<n,n+=8,1===Z?Z=g[I++]:--Z;if(n<l)break;var m=d&c;if(d>>=l,n-=l,m!==e){if(m===o)break;for(var r=m<i?m:a,h=0,B=r;B>e;)B=b[B]>>8,++h;var G=B;if(s+h+(r!==m?1:0)>A)return void console.log("Warning, gif stream longer than expected.");C[s++]=G;var W=s+=h;for(r!==m&&(C[s++]=G),B=r;h--;)B=b[B],C[--W]=255&B,B>>=8;null!==a&&i<4096&&(b[i++]=a<<8|G,i>=c+1&&l<12&&(++l,c=c<<1|1)),a=m}else i=o+1,c=(1<<(l=t+1))-1,a=null}return s!==A&&console.log("Warning, gif stream shorter than expected."),C}try{GifWriter_1=omggif.GifWriter=GifWriter,GifReader_1=omggif.GifReader=GifReader}catch(e){}function _defineProperty$8(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Loader{constructor(){_defineProperty$8(this,"textures",new Map),_defineProperty$8(this,"images",new Map),_defineProperty$8(this,"audioBuffers",new Map),_defineProperty$8(this,"progress",0),_defineProperty$8(this,"manager",new three__WEBPACK_IMPORTED_MODULE_0__.lLk),_defineProperty$8(this,"textureLoader",new three__WEBPACK_IMPORTED_MODULE_0__.dpR(this.manager)),_defineProperty$8(this,"audioLoader",new three__WEBPACK_IMPORTED_MODULE_0__.mTL(this.manager)),_defineProperty$8(this,"assetPromises",new Map),_defineProperty$8(this,"audioCallbacks",new Map),_defineProperty$8(this,"loadGifImages",((g,I)=>{const C=new Promise((C=>{(async()=>{const A=await fetch(g),t=await A.blob(),e=await t.arrayBuffer(),o=new Uint8Array(e),i=new GifReader_1(o),l=i.frameInfo(0),c=new Array(i.numFrames()).fill(0).map(((g,I)=>{const C=new ImageData(l.width,l.height);i.decodeAndBlitFrameRGBA(I,C.data);const A=document.createElement("canvas"),t=A.getContext("2d");A.width=C.width,A.height=C.height,t.putImageData(C,0,0);const e=new Image;return e.src=A.toDataURL(),e}));this.images.set(g,c),this.assetPromises.delete(g),null==I||I(c),C(c)})()}));return this.assetPromises.set(g,C),C})),_defineProperty$8(this,"loadTexture",((g,I)=>{const C=new Promise((C=>{this.textureLoader.load(g,(A=>{this.textures.set(g,A),this.assetPromises.delete(g),null==I||I(A),C(A)}))}));return this.assetPromises.set(g,C),C})),_defineProperty$8(this,"loadImage",((g,I)=>{const C=new Promise((C=>{const A=new Image;A.crossOrigin="anonymous",A.src=g,A.onload=()=>{this.assetPromises.delete(g),null==I||I(A),C(A)}}));return this.assetPromises.set(g,C),C})),_defineProperty$8(this,"getTexture",(g=>{const I=this.textures.get(g);if(Array.isArray(I))throw new Error("`getTexture` was called on a gif texture. Use `getGifTexture` instead.");return I})),_defineProperty$8(this,"getGifTexture",(g=>{const I=this.textures.get(g);if(!Array.isArray(I))throw new Error("`getGifTexture` was called on a non-gif texture. Use `getTexture` instead.");return I})),_defineProperty$8(this,"loadAudioBuffer",((g,I)=>new Promise((C=>{this.audioCallbacks.set(g,(async()=>new Promise((A=>{this.audioLoader.load(g,(g=>{null==I||I(g),A(g),C(g)}))}))))})))),_defineProperty$8(this,"load",(async()=>{await Promise.all(Array.from(this.assetPromises.values())),this.assetPromises.clear()})),_defineProperty$8(this,"loadAudios",(async()=>{for(const[g,I]of this.audioCallbacks){const C=await I();this.audioBuffers.set(g,C)}this.audioCallbacks.clear()})),this.manager.onProgress=(g,I,C)=>{this.progress=I/C};const g=()=>{this.loadAudios(),window.removeEventListener("click",g)};window.addEventListener("click",g)}}function _defineProperty$7(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Registry{serialize(){return JSON.parse(JSON.stringify({blocksByName:Array.from(this.blocksByName.entries()),blocksById:Array.from(this.blocksById.entries()),nameMap:Array.from(this.nameMap.entries()),idMap:Array.from(this.idMap.entries())}))}static deserialize(g){const I=new Registry;return I.blocksByName=new Map(g.blocksByName),I.blocksById=new Map(g.blocksById),I.nameMap=new Map(g.nameMap),I.idMap=new Map(g.idMap),I}constructor(){_defineProperty$7(this,"blocksByName",new Map),_defineProperty$7(this,"blocksById",new Map),_defineProperty$7(this,"nameMap",new Map),_defineProperty$7(this,"idMap",new Map)}}function _defineProperty$6(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$2(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$6(g,I,C[I])}))}return g}const DEFAULT_CHUNK_SHADERS={vertex:three__WEBPACK_IMPORTED_MODULE_0__.Vj0.basic.vertexShader.replace("#include <common>","\nattribute int light;\n\nvarying float vAO;\nvarying vec4 vLight;\nvarying vec4 vWorldPosition;\nuniform vec4 uAOTable;\nuniform float uTime;\n\nvec4 unpackLight(int l) {\n  float r = float((l >> 8) & 0xF) / 15.0;\n  float g = float((l >> 4) & 0xF) / 15.0;\n  float b = float(l & 0xF) / 15.0;\n  float s = float((l >> 12) & 0xF) / 15.0;\n  return vec4(r, g, b, s);\n}\n\n#include <common>\n").replace("#include <color_vertex>","\n#include <color_vertex>\n\nint ao = light >> 16;\n\nvAO = ((ao == 0) ? uAOTable.x :\n    (ao == 1) ? uAOTable.y :\n    (ao == 2) ? uAOTable.z : uAOTable.w) / 255.0; \n\nvLight = unpackLight(light & ((1 << 16) - 1));\n").replace("#include <worldpos_vertex>","\nvec4 worldPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n  worldPosition = instanceMatrix * worldPosition;\n#endif\nworldPosition = modelMatrix * worldPosition;\nvWorldPosition = worldPosition;\n"),fragment:three__WEBPACK_IMPORTED_MODULE_0__.Vj0.basic.fragmentShader.replace("#include <common>","\nuniform vec3 uFogColor;\nuniform float uFogNear;\nuniform float uFogFar;\nuniform float uSunlightIntensity;\nuniform float uMinLightLevel;\nuniform float uTime;\nvarying float vAO;\nvarying vec4 vLight; \nvarying vec4 vWorldPosition;\n\n#include <common>\n").replace("#include <envmap_fragment>","\n#include <envmap_fragment>\n\n// Intensity of light is wavelength ** 2 \nfloat s = min(vLight.a * vLight.a * uSunlightIntensity * (1.0 - uMinLightLevel) + uMinLightLevel, 1.0);\ns = s * (1.0 - exp(-s) * 0.02); // Smooth the intensity without clamping to a hard upper limit\nfloat scale = 2.0;\n\noutgoingLight.rgb *= vec3(s + pow(vLight.r, scale), s + pow(vLight.g, scale), s + pow(vLight.b, scale));\noutgoingLight *= vAO;\n").replace("#include <fog_fragment>","\n    vec3 fogOrigin = cameraPosition;\n\n    float depth = sqrt(pow(vWorldPosition.x - fogOrigin.x, 2.0) + pow(vWorldPosition.z - fogOrigin.z, 2.0));\n    float fogFactor = smoothstep(uFogNear, uFogFar, depth);\n\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, uFogColor, fogFactor);\n    ")},customShaders={sway(g){void 0===g&&(g={});const{speed:I,amplitude:C,rooted:A,scale:t,yScale:e}=_objectSpread$2({speed:1,amplitude:.1,rooted:!1,scale:1,yScale:1},g);return{vertexShader:DEFAULT_CHUNK_SHADERS.vertex.replace("#include <common>","\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n").replace("#include <begin_vertex>",`\nvec3 transformed = vec3(position);\nfloat scale = uTime * 0.00002 * ${I.toFixed(2)};\ntransformed.x = position.x \n             + ${A?"(position.y - floor(position.y))":"1.0"} * ${t.toFixed(2)} * snoise(vec3(position.x * scale, position.y * scale * ${e.toFixed(2)}, position.z * scale)) * 2.0 * ${C.toFixed(2)};\n`),fragmentShader:DEFAULT_CHUNK_SHADERS.fragment}}};function _defineProperty$5(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class AtlasTexture extends three__WEBPACK_IMPORTED_MODULE_0__.ROQ{drawImageToRange(g,I,C,A){void 0===C&&(C=!0),void 0===A&&(A=1);const{startU:t,endV:e}=g,o=I instanceof three__WEBPACK_IMPORTED_MODULE_0__.xEZ?I.image:I;if(!o)return;const i=this.canvas.getContext("2d");i.save();const l=this.canvas.width,c=this.canvas.height;if(i.globalAlpha=A,1!==A&&(i.globalCompositeOperation="lighter"),C&&i.clearRect((t-this.atlasOffset)*l,(1-e-this.atlasOffset)*c,this.dimension*this.atlasRatio+2*this.atlasMargin,this.dimension*this.atlasRatio+2*this.atlasMargin),I.isColor)return i.fillStyle=`#${I.getHexString()}`,void i.fillRect((t-this.atlasOffset)*l,(1-e-this.atlasOffset)*c,this.dimension*this.atlasRatio+2*this.atlasMargin,this.dimension*this.atlasRatio+2*this.atlasMargin);C&&(i.drawImage(o,(t-this.atlasOffset)*l,(1-e-this.atlasOffset)*c,this.dimension*this.atlasRatio+2*this.atlasMargin,this.dimension*this.atlasRatio+2*this.atlasMargin),i.clearRect((t-this.atlasOffset)*l+this.atlasMargin,(1-e-this.atlasOffset)*c+this.atlasMargin,this.dimension*this.atlasRatio,this.dimension*this.atlasRatio)),i.drawImage(o,(t-this.atlasOffset)*l+this.atlasMargin,(1-e-this.atlasOffset)*c+this.atlasMargin,this.dimension*this.atlasRatio,this.dimension*this.atlasRatio),i.restore(),this.needsUpdate=!0}registerAnimation(g,I,C){var A=this;void 0===C&&(C=0);const t=new FaceAnimation(g,I,C),e={animation:t,timer:null},o=function(I){void 0===I&&(I=0);const i=t.keyframes[I];A.drawImageToRange(g,i[1],1!==A.countPerSide),e.timer=setTimeout((()=>{clearTimeout(e.timer);const l=(I+1)%t.keyframes.length;if(C>0){const I=t.keyframes[l],e=function(t){void 0===t&&(t=0),t>C?o(l):(requestAnimationFrame((()=>e(t+1))),A.drawImageToRange(g,I[1],!0,t/C),A.drawImageToRange(g,i[1],!1,1-t/C),A.needsUpdate=!0)};e()}else o(l);A.needsUpdate=!0}),i[0])};this.animations.push(e),o()}makeCanvasPowerOfTwo(g){var I;let C=!1;g||(g=this.canvas,C=!0);const A=g.width,t=g.height,e=Math.pow(2,Math.round(Math.log(A)/Math.log(2))),o=Math.pow(2,Math.round(Math.log(t)/Math.log(2))),i=document.createElement("canvas");i.width=e,i.height=o,null===(I=i.getContext("2d"))||void 0===I||I.drawImage(g,0,0,e,o),C&&(this.canvas=i)}static makeUnknownImage(g,I,C){void 0===I&&(I="#0A2647"),void 0===C&&(C="#E1D7C6");const A=document.createElement("canvas"),t=A.getContext("2d");return t.imageSmoothingEnabled=!1,t.canvas.width=g,t.canvas.height=g,t.fillStyle=C,t.fillRect(0,0,g,g),t.fillStyle=I,t.textAlign="center",t.textBaseline="middle",t.fillText("?",g/2,g/2,g),A}static makeUnknownTexture(g){const I=new three__WEBPACK_IMPORTED_MODULE_0__.ROQ(AtlasTexture.makeUnknownImage(g));return I.minFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,I.magFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,I.generateMipmaps=!1,I.needsUpdate=!0,I.colorSpace=three__WEBPACK_IMPORTED_MODULE_0__.KI_,I}constructor(g,I,C){if(void 0===C&&(C=document.createElement("canvas")),super(C),_defineProperty$5(this,"countPerSide",void 0),_defineProperty$5(this,"dimension",void 0),_defineProperty$5(this,"canvas",void 0),_defineProperty$5(this,"atlasMargin",0),_defineProperty$5(this,"atlasOffset",0),_defineProperty$5(this,"atlasRatio",0),_defineProperty$5(this,"animations",[]),this.canvas=C,this.countPerSide=g,this.dimension=I,1===g)this.atlasOffset=0,this.atlasRatio=1,this.atlasMargin=0;else for(this.atlasOffset=1/(4*g),this.atlasMargin=1,this.atlasRatio=(this.atlasMargin/this.atlasOffset/g-2*this.atlasMargin)/I;this.atlasRatio!==Math.floor(this.atlasRatio);)this.atlasRatio*=2,this.atlasMargin*=2;const A=(I*this.atlasRatio+2*this.atlasMargin)*g,t=(I*this.atlasRatio+2*this.atlasMargin)*g;this.canvas.width=A,this.canvas.height=t;const e=this.canvas.getContext("2d");e.imageSmoothingEnabled=!1,this.makeCanvasPowerOfTwo(this.canvas),this.wrapS=three__WEBPACK_IMPORTED_MODULE_0__.uWy,this.wrapT=three__WEBPACK_IMPORTED_MODULE_0__.uWy,this.minFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,this.magFilter=three__WEBPACK_IMPORTED_MODULE_0__.TyD,this.generateMipmaps=!1,this.needsUpdate=!0,this.colorSpace=three__WEBPACK_IMPORTED_MODULE_0__.KI_;const o=AtlasTexture.makeUnknownImage(A/g);for(let i=0;i<g;i++)for(let I=0;I<g;I++)e.drawImage(o,i/g*A,I/g*t,A/g,t/g)}}class FaceAnimation{constructor(g,I,C){if(void 0===C&&(C=0),_defineProperty$5(this,"range",void 0),_defineProperty$5(this,"keyframes",void 0),_defineProperty$5(this,"fadeFrames",void 0),!g)throw new Error("Texture range is required for FaceAnimation.");if(I.length<=1)throw new Error("FaceAnimation must have at least two keyframe.");this.range=g,this.keyframes=I,this.fadeFrames=C}}function _defineProperty$4(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread$1(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$4(g,I,C[I])}))}return g}function ownKeys(g,I){var C=Object.keys(g);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(g);I&&(A=A.filter((function(I){return Object.getOwnPropertyDescriptor(g,I).enumerable}))),C.push.apply(C,A)}return C}function _objectSpreadProps(g,I){return I=null!=I?I:{},Object.getOwnPropertyDescriptors?Object.defineProperties(g,Object.getOwnPropertyDescriptors(I)):ownKeys(Object(I)).forEach((function(C){Object.defineProperty(g,C,Object.getOwnPropertyDescriptor(I,C))})),g}const VOXEL_NEIGHBORS=[[1,0,0],[-1,0,0],[0,0,1],[0,0,-1],[0,1,0],[0,-1,0]],defaultOptions$1={maxChunkRequestsPerUpdate:12,maxProcessesPerUpdate:4,maxUpdatesPerUpdate:1e3,shouldGenerateChunkMeshes:!0,minLightLevel:.04,chunkRerequestInterval:300,defaultRenderRadius:8,textureUnitDimension:8,chunkLoadExponent:8,skyOptions:{},cloudsOptions:{},chunkUniformsOverwrite:{},sunlightStartTimeFrac:.25,sunlightEndTimeFrac:.7,sunlightChangeSpan:.15,timeForceThreshold:.1,statsSyncInterval:500};class World extends three__WEBPACK_IMPORTED_MODULE_0__.xsS{async meshChunkLocally(g,I,C){const A=[[-1,-1],[0,-1],[1,-1],[-1,0],[0,0],[1,0],[-1,1],[0,1],[1,1]].map((C=>{let[A,t]=C;return this.getChunkByCoords(g+A,I+t)})),t=A[4],{min:e,max:o}=t,i=Math.floor(this.options.maxHeight/this.options.subChunks),l=[e[0],i*C,e[2]],c=[o[0],i*(C+1),o[2]],n=[],d=[];for(const a of A){if(!a){n.push(null);continue}const[g,I]=a.serialize();n.push(g),d.push(...I)}const s={chunksData:n,options:this.options,min:l,max:c};if(this.chunks.toProcess.find((C=>C.data.x===g&&C.data.z===I)))return;const{geometries:Z}=await new Promise((g=>{this.meshWorkerPool.addJob({message:s,buffers:d,resolve:g})}));if(this.chunks.toProcess.find((C=>C.data.x===g&&C.data.z===I)))return;const b={level:C,geometries:Z.map((g=>({indices:Array.from(g.indices),positions:Array.from(g.positions),uvs:Array.from(g.uvs),lights:Array.from(g.lights),voxel:g.voxel,faceName:g.faceName})))};this.buildChunkMesh(g,I,b)}async applyBlockTexture(g,I,C){this.checkIsInitialized("apply block texture",!1);const A=this.getBlockOf(g);I=Array.isArray(I)?I:[I];const t="string"==typeof C?await this.loader.loadImage(C):C;I.forEach((g=>{const I=A.faces.find((I=>I.name===g));if(!I)throw new Error(`Face "${g}" does not exist on block "${A.name}"`);const e=this.getBlockFaceMaterial(A.id,g);if(I.independent){if(C instanceof three__WEBPACK_IMPORTED_MODULE_0__.xEZ)e.map=C,e.uniforms.map={value:C},e.needsUpdate=!0;else if(t instanceof HTMLImageElement)e.map.image=t,e.map.needsUpdate=!0,e.needsUpdate=!0;else{if(!(t instanceof three__WEBPACK_IMPORTED_MODULE_0__.Ilk))throw new Error(`Cannot apply texture to face "${g}" on block "${A.name}" because the source is not an image or a color.`);{const g=e.map.image;g.width=1,g.height=1;const I=g.getContext("2d");I.fillStyle=t.getStyle(),I.fillRect(0,0,1,1),e.map.needsUpdate=!0,e.needsUpdate=!0}}return}e.map.drawImageToRange(I.range,t),e.map.needsUpdate=!0}))}async applyBlockTextures(g){return Promise.all(g.map((g=>{let{idOrName:I,faceNames:C,source:A}=g;return this.applyBlockTexture(I,C,A)})))}async applyBlockFrames(g,I,C,A){void 0===A&&(A=0),this.checkIsInitialized("apply block animation",!1);const t=this.getBlockOf(g),e=[];for(const[o,i]of C)"string"!=typeof i?e.push([o,i]):e.push([o,await this.loader.loadImage(i)]);(I=Array.isArray(I)?I:[I]).forEach((g=>{const I=t.faces.find((I=>I.name===g));if(!I)throw new Error(`Face "${g}" does not exist on block "${t.name}"`);const C=this.getBlockFaceMaterial(t.id,g);if(!(C.map instanceof AtlasTexture)){const{image:A}=C.map;if(!A||!A.width)throw new Error(`Cannot animate face "${g}" on block "${t.name}" because it does not have a texture.`);{const g=new AtlasTexture(1,A.width);g.drawImageToRange(I.range,A),C.map.dispose(),C.map=g,C.uniforms.map={value:g},C.needsUpdate=!0}}C.map.registerAnimation(I.range,e,A)}))}async applyBlockGif(g,I,C,A){void 0===A&&(A=66.666667),this.checkIsInitialized("apply GIF animation",!1),C.endsWith(".gif")||console.warn("There's a chance that this file isn't a GIF as it doesn't end with .gif");const t=(await this.loader.loadGifImages(C)).map((g=>[A,g]));await this.applyBlockFrames(g,I,t)}async setResolutionOf(g,I,C){this.checkIsInitialized("apply resolution",!1);const A=this.getBlockOf(g);I=Array.isArray(I)?I:[I];for(const e of I){const g=A.faces.find((g=>g.name===e));if(!g)throw new Error(`Face "${e}" does not exist on block "${A.name}"`);if(!g.independent)throw new Error(`Cannot apply resolution to face "${e}" on block "${A.name}" because it is not independent.`);const I=this.getBlockFaceMaterial(A.id,e);if(I.map instanceof AtlasTexture)throw new Error("Cannot apply resolution to a face that is using an atlas texture. Have you accidentally applied keyframes to this face?");var t;const o=null!==(t=I.map.image)&&void 0!==t?t:I.map.source.data;if(o instanceof HTMLImageElement&&await new Promise((g=>{o.complete?g():o.onload=()=>{g()}})),!o)throw new Error(`Cannot apply resolution to face "${e}" on block "${A.name}" because it does not have or has not loaded a texture.`);const{width:i,height:l}=o,c=document.createElement("canvas"),n="number"==typeof C?C:C.x,d="number"==typeof C?C:C.y;c.width=n,c.height=d;c.getContext("2d").drawImage(o,0,0,i,l,0,0,n,d),I.map.image=c,I.map.needsUpdate=!0,I.needsUpdate=!0}}getChunkByName(g){return this.checkIsInitialized("get chunk by name",!1),this.chunks.loaded.get(g)}getChunkByCoords(g,I){this.checkIsInitialized("get chunk by coords",!1);const C=ChunkUtils.getChunkName([g,I]);return this.getChunkByName(C)}getChunkByPosition(g,I,C){this.checkIsInitialized("get chunk by position",!1);const A=ChunkUtils.mapVoxelToChunk([0|g,0|I,0|C],this.options.chunkSize);return this.getChunkByCoords(...A)}getVoxelAt(g,I,C){this.checkIsInitialized("get voxel",!1);const A=this.getChunkByPosition(g,I,C);return void 0===A?0:A.getVoxel(g,I,C)}setVoxelAt(g,I,C,A){this.checkIsInitialized("set voxel",!1);const t=this.getChunkByPosition(g,I,C);void 0!==t&&(t.setVoxel(g,I,C,A),this.trackChunkAt(g,I,C))}getVoxelRotationAt(g,I,C){this.checkIsInitialized("get voxel rotation",!1);const A=this.getChunkByPosition(g,I,C);return void 0===A?new BlockRotation:A.getVoxelRotation(g,I,C)}setVoxelRotationAt(g,I,C,A){this.checkIsInitialized("set voxel rotation",!1);const t=this.getChunkByPosition(g,I,C);void 0!==t&&(t.setVoxelRotation(g,I,C,A),this.trackChunkAt(g,I,C))}getVoxelStageAt(g,I,C){this.checkIsInitialized("get voxel stage",!1);const A=this.getChunkByPosition(g,I,C);return void 0===A?0:A.getVoxelStage(g,I,C)}getSunlightAt(g,I,C){this.checkIsInitialized("get sunlight",!1);const A=this.getChunkByPosition(g,I,C);return void 0===A?0:A.getSunlight(g,I,C)}setSunlightAt(g,I,C,A){this.checkIsInitialized("set sunlight",!1);const t=this.getChunkByPosition(g,I,C);void 0!==t&&(t.setSunlight(g,I,C,A),this.trackChunkAt(g,I,C))}getTorchLightAt(g,I,C,A){this.checkIsInitialized("get torch light",!1);const t=this.getChunkByPosition(g,I,C);return void 0===t?0:t.getTorchLight(g,I,C,A)}setTorchLightAt(g,I,C,A,t){this.checkIsInitialized("set torch light",!1);const e=this.getChunkByPosition(g,I,C);void 0!==e&&(e.setTorchLight(g,I,C,A,t),this.trackChunkAt(g,I,C))}getLightColorAt(g,I,C){this.checkIsInitialized("get light color",!1);const A=this.getSunlightAt(g,I,C),t=this.getTorchLightAt(g,I,C,"RED"),e=this.getTorchLightAt(g,I,C,"GREEN"),o=this.getTorchLightAt(g,I,C,"BLUE"),{sunlightIntensity:i,minLightLevel:l}=this.chunks.uniforms,c=Math.min((A/this.options.maxLightLevel)**2*i.value*(1-l.value)+l.value,1);return new three__WEBPACK_IMPORTED_MODULE_0__.Ilk(c+Math.pow(t/this.options.maxLightLevel,2),c+Math.pow(e/this.options.maxLightLevel,2),c+Math.pow(o/this.options.maxLightLevel,2))}getBlockAt(g,I,C){this.checkIsInitialized("get block",!1);const A=this.getChunkByPosition(g,I,C);if(void 0===A)return null;const t=A.getVoxel(g,I,C);return this.getBlockById(t)}getMaxHeightAt(g,I){this.checkIsInitialized("get max height",!1);const C=0|g,A=0|I;for(let t=this.options.maxHeight-1;t>=0;t--){if(!this.getBlockAt(C,t,A).isEmpty)return t}return 0}getPreviousValueAt(g,I,C,A){void 0===A&&(A=1);const t=ChunkUtils.getVoxelName([0|g,0|I,0|C]),e=this.oldBlocks.get(t)||[];return e[e.length-A]||0}getBlockOf(g){return"number"==typeof g?this.getBlockById(g):this.getBlockByName(g.toLowerCase())}getBlockById(g){const I=this.registry.blocksById.get(g);if(!I)throw new Error(`Block with id ${g} does not exist`);return I}getBlockByName(g){const I=this.registry.blocksByName.get(g.toLowerCase());if(!I)throw new Error(`Block with name ${g} does not exist`);return I}getChunkStatus(g,I){const C=ChunkUtils.getChunkName([g,I]),A=this.chunks.requested.has(C),t=this.chunks.loaded.has(C),e=!!this.chunks.toProcess.find((C=>{let{data:A}=C;return A.x===g&&A.z===I})),o=!!this.chunks.toRequest.find((C=>{let[A,t]=C;return A===g&&t===I}));if(A&&e||A&&o||e&&o)throw new Error(`Chunk ${C} is in more than one state other than the loaded state. This should not happen. These are the states: requested: ${A}, loaded: ${t}, processing: ${e}, to request: ${o}`);return t?"loaded":e?"processing":A?"requested":o?"to request":null}getBlockFaceMaterial(g,I){this.checkIsInitialized("get material",!1);const C=this.getBlockOf(g);return I&&C.independentFaces.has(I)?this.chunks.materials.get(this.makeChunkMaterialKey(C.id,I)):this.chunks.materials.get(this.makeChunkMaterialKey(C.id))}isWithinWorld(g,I){const{minChunk:C,maxChunk:A}=this.options;return g>=C[0]&&g<=A[0]&&I>=C[1]&&I<=A[1]}isChunkInView(g,I,C,A){const[t,e]=g,[o,i]=I;if((t-o)**2+(e-i)**2<Math.floor(this.renderRadius/2)**2)return!0;const l=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(i-e,o-t,0),c=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4(C.z,C.x,0),n=MathUtils.normalizeAngle(l.angleTo(c));return Math.abs(n)<A}floodLight(g,I,C,A){if(!g.length)return;const{maxHeight:t,minChunk:e,maxChunk:o,maxLightLevel:i,chunkSize:l}=this.options,[c,n]=e,[d,s]=o,Z="SUNLIGHT"===I;for(;g.length;){const e=g.shift(),{voxel:o,level:b}=e;if(0===b)continue;const[a,m,r]=o,h=this.getBlockAt(a,m,r),B=!Z&&BlockUtils.getBlockTorchLightLevel(h,I)>0?[!0,!0,!0,!0,!0,!0]:BlockUtils.getBlockRotatedTransparency(h,this.getVoxelRotationAt(a,m,r));for(const[G,W,u]of VOXEL_NEIGHBORS){const e=m+W;if(e<0||e>=t)continue;const o=a+G,h=r+u,[y,p]=ChunkUtils.mapVoxelToChunk([o,e,h],l);if(y<c||y>d||p<n||p>s||C&&(o<C[0]||h<C[2])||A&&(o>=A[0]||h>=A[2]))continue;const V=[o,e,h],S=this.getBlockAt(o,e,h),Y=BlockUtils.getBlockRotatedTransparency(S,this.getVoxelRotationAt(o,e,h)),J=b-(Z&&!S.lightReduce&&-1===W&&b===i?0:1);!LightUtils.canEnter(B,Y,G,W,u)||(Z?this.getSunlightAt(o,e,h):this.getTorchLightAt(o,e,h,I))>=J||(Z?this.setSunlightAt(o,e,h,J):this.setTorchLightAt(o,e,h,J,I),g.push({voxel:V,level:J}))}}}removeLight(g,I){const{maxHeight:C,maxLightLevel:A,chunkSize:t,minChunk:e,maxChunk:o}=this.options,i=[],l=[],c="SUNLIGHT"===I,[n,d,s]=g;for(l.push({voxel:g,level:c?this.getSunlightAt(n,d,s):this.getTorchLightAt(n,d,s,I)}),c?this.setSunlightAt(n,d,s,0):this.setTorchLightAt(n,d,s,0,I);l.length;){const g=l.shift(),{voxel:n,level:d}=g,[s,Z,b]=n;for(const[a,m,r]of VOXEL_NEIGHBORS){const g=Z+m;if(g<0||g>=C)continue;const n=s+a,h=b+r,[B,G]=ChunkUtils.mapVoxelToChunk([n,g,h],t);if(B<e[0]||G<e[1]||B>o[0]||G>o[1])continue;const W=this.getBlockAt(n,g,h),u=this.getVoxelRotationAt(n,g,h),y=BlockUtils.getBlockRotatedTransparency(W,u);if((c||0===BlockUtils.getBlockTorchLightLevel(W,I))&&!LightUtils.canEnterInto(y,a,m,r))continue;const p=[n,g,h],V=c?this.getSunlightAt(n,g,h):this.getTorchLightAt(n,g,h,I);0!==V&&(V<d||c&&-1===m&&d===A&&V===A?(l.push({voxel:p,level:V}),c?this.setSunlightAt(n,g,h,0):this.setTorchLightAt(n,g,h,0,I)):(c&&-1===m?V>d:V>=d)&&i.push({voxel:p,level:V}))}}this.floodLight(i,I)}async initialize(){if(this.isInitialized)return void console.warn("World has already been isInitialized.");if(null===this.initialData)throw new Error("World has not received any initialization data from the server.");const{blocks:g,options:I,stats:C}=this.initialData;this._time=C.time,Object.keys(g).forEach((I=>{const C=g[I],{id:A,aabbs:t,isDynamic:e}=C,o=I.toLowerCase();C.independentFaces=new Set,C.faces.forEach((g=>{g.independent&&C.independentFaces.add(g.name)})),C.aabbs=t.map((g=>{let{minX:I,minY:C,minZ:A,maxX:t,maxY:e,maxZ:o}=g;return new AABB(I,C,A,t,e,o)})),e&&(C.dynamicFn=()=>({aabbs:C.aabbs,faces:C.faces,isTransparent:C.isTransparent})),this.registry.blocksByName.set(o,C),this.registry.blocksById.set(A,C),this.registry.nameMap.set(o,A),this.registry.idMap.set(A,o)})),this.options=_objectSpread$1({},this.options,I),this.physics.options=this.options,await this.loadMaterials();const A=this.registry.serialize();this.meshWorkerPool.postMessage({type:"init",registryData:A}),this.isInitialized=!0,this.renderRadius=this.options.defaultRenderRadius}update(g,I){if(void 0===g&&(g=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),void 0===I&&(I=new three__WEBPACK_IMPORTED_MODULE_0__.Pa4),!this.isInitialized)return;const C=this.clock.getDelta(),A=ChunkUtils.mapVoxelToChunk(g.toArray(),this.options.chunkSize);this._time=(this.time+C)%this.options.timePerDay,this.maintainChunks(A,I),this.requestChunks(A,I),this.processChunks(A),this.updatePhysics(C),this.updateUniforms(),this.updateSkyAndClouds(g),this.processClientUpdates(),this.emitServerUpdates()}onMessage(g){const{type:I}=g;switch(I){case"INIT":{const{json:I}=g;this.initialData=I;break}case"STATS":{const{json:I}=g;Math.abs(I.time-this.time)>this.options.timeForceThreshold&&(this._time=I.time);break}case"LOAD":{const{chunks:I}=g;I.forEach((g=>{const{x:I,z:C}=g,A=ChunkUtils.getChunkName([I,C]);this.chunks.requested.delete(A),this.chunks.toProcess.push({source:"load",data:g})}));break}case"UPDATE":{const{updates:I}=g;I.forEach((g=>{const{vx:I,vy:C,vz:A,voxel:t}=g,e=BlockUtils.extractID(t),o=BlockUtils.extractRotation(t),i=this.getVoxelRotationAt(I,C,A);this.getVoxelAt(I,C,A)===e&&i.value===o.value&&i.yRotation===o.yRotation||this.updateVoxel(I,C,A,e,o.value,o.yRotation,"server")}));break}}}get time(){return this._time}set time(g){this._time=g,this.isInitialized&&this.packets.push({type:"METHOD",method:{name:"vox-builtin:set-time",payload:JSON.stringify({time:g})}})}get renderRadius(){return this._renderRadius}set renderRadius(g){this.checkIsInitialized("set render radius",!1),g=Math.floor(g),this._renderRadius=g,this._deleteRadius=1.1*g;const{chunkSize:I}=this.options;this.chunks.uniforms.fogNear.value=.7*g*I,this.chunks.uniforms.fogFar.value=g*I}get deleteRadius(){return this._deleteRadius}requestChunks(g,I){const{renderRadius:C,options:{chunkRerequestInterval:A,chunkLoadExponent:t}}=this,e=this.chunks.loaded.size+this.chunks.requested.size+this.chunks.toRequest.length+this.chunks.toProcess.length,o=this.chunks.loaded.size/e,i=I.length()>0,l=1===o?3*Math.PI/8:Math.max(o**t,.1),[c,n]=g;for(let Z=-C;Z<=C;Z++)for(let t=-C;t<=C;t++){if(Z*Z+t*t>C*C)continue;const e=c+Z,o=n+t;if(!this.isWithinWorld(e,o))continue;if(i&&!this.isChunkInView(g,[e,o],I,l))continue;const d=this.getChunkStatus(e,o);if(d){if("loaded"!==d)if("requested"!==d);else{const g=ChunkUtils.getChunkName([e,o]),I=this.chunks.requested.get(g);I+1>A?(this.chunks.requested.delete(g),this.chunks.toRequest.push([e,o])):this.chunks.requested.set(g,I+1)}}else this.chunks.toRequest.find((g=>{let[I,C]=g;return I===e&&C===o}))||this.chunks.toRequest.push([e,o])}if(0===this.chunks.toRequest.length)return;this.chunks.toRequest.sort(((I,C)=>{const[A,t]=I,[e,o]=C;return(A-g[0])**2+(t-g[1])**2-((e-g[0])**2+(o-g[1])**2)}));const{maxChunkRequestsPerUpdate:d}=this.options,s=this.chunks.toRequest.splice(0,d);this.packets.push({type:"LOAD",json:{center:g,chunks:s}}),s.forEach((g=>{const I=ChunkUtils.getChunkName(g);this.chunks.requested.set(I,0)}))}processChunks(g){if(0===this.chunks.toProcess.length)return;this.chunks.toProcess.sort(((I,C)=>{const{x:A,z:t}=I.data,{x:e,z:o}=C.data;return(A-g[0])**2+(t-g[1])**2-((e-g[0])**2+(o-g[1])**2)}));const{maxProcessesPerUpdate:I,chunkSize:C,maxHeight:A,subChunks:t,shouldGenerateChunkMeshes:e}=this.options,o=g=>{const I=this.chunkInitializeListeners.get(g.name);Array.isArray(I)&&(I.forEach((I=>I(g))),this.chunkInitializeListeners.delete(g.name))};this.chunks.toProcess.splice(0,I).forEach((g=>{const{x:I,z:i,id:l,meshes:c}=g.data,n=ChunkUtils.getChunkName([I,i]);let d=this.getChunkByCoords(I,i);if(d||(d=new Chunk(l,[I,i],{maxHeight:A,subChunks:t,size:C})),d.setData(g.data),d.isDirty=!1,this.chunks.loaded.set(n,d),e){for(const g of c)this.buildChunkMesh(I,i,g);o(d)}else o(d)}))}maintainChunks(g,I){const{deleteRadius:C}=this,[A,t]=g,e=[];this.chunks.loaded.forEach((g=>{const{name:I,coords:[o,i]}=g;if((o-A)**2+(i-t)**2>C**2){const g=this.chunks.loaded.get(I);g.dispose(),this.chunks.loaded.delete(I),e.push(g.coords)}})),this.chunks.requested.forEach(((g,I)=>{const[o,i]=ChunkUtils.parseChunkName(I);(o-A)**2+(i-t)**2>C**2&&(this.chunks.requested.delete(I),e.push([o,i]))}));const o=[...this.chunks.toRequest];this.chunks.toRequest.length=0,this.chunks.toRequest.push(...o.filter((g=>{let[I,e]=g;return(I-A)**2+(e-t)**2<=C**2})));const i=[...this.chunks.toProcess];this.chunks.toProcess.length=0,this.chunks.toProcess.push(...i.filter((g=>{const{x:I,z:e}=g.data;return(I-A)**2+(e-t)**2<=C**2}))),e.forEach((g=>{const I=ChunkUtils.getChunkName(g);this.chunkInitializeListeners.delete(I)})),e.length&&this.packets.push({type:"UNLOAD",json:{chunks:e}})}triggerBlockUpdateListeners(g,I,C,A,t){this.blockUpdateListeners.forEach((e=>e({voxel:[g,I,C],oldValue:A,newValue:t})))}attemptBlockCache(g,I,C,A){const t=this.getChunkByPosition(g,I,C);if(!t)return;const e=t.getRawValue(g,I,C);if(e!==A){const t=ChunkUtils.getVoxelName([g,I,C]),o=this.oldBlocks.get(t)||[];o.push(e),this.oldBlocks.set(t,o),this.triggerBlockUpdateListeners(g,I,C,e,A)}}updateSkyAndClouds(g){var I;const{sunlightStartTimeFrac:C,sunlightEndTimeFrac:A,sunlightChangeSpan:t,timePerDay:e,minLightLevel:o}=this.options;this.sky.update(g,this.time,e),this.clouds.update(g);const i=Math.floor(C*e),l=Math.floor(A*e),c=Math.floor(t*e),n=Math.max(o,this.time<i?0:this.time<i+c?(this.time-i)/c:this.time<=l?1:this.time<=l+c?1-(this.time-l)/c:0);this.chunks.uniforms.sunlightIntensity.value=n;const d=this.clouds.material.uniforms.uCloudColor.value,s=d.getHSL({});d.setHSL(s.h,s.s,three__WEBPACK_IMPORTED_MODULE_0__.M8C.clamp(n,0,1)),null===(I=this.chunks.uniforms.fogColor.value)||void 0===I||I.copy(this.sky.uMiddleColor.value)}buildChunkMesh(g,I,C){var A,t;const e=this.getChunkByCoords(g,I);if(!e)return;const{maxHeight:o,subChunks:i,chunkSize:l}=this.options,{level:c,geometries:n}=C,d=Math.floor(o/i);if(null===(A=e.meshes.get(c))||void 0===A||A.forEach((g=>{g.geometry.dispose(),this.remove(g)})),e.meshes.delete(c),0===n.length)return;const s=n.map((C=>{const{voxel:A,faceName:t,indices:e,lights:o,positions:i,uvs:n}=C,s=new three__WEBPACK_IMPORTED_MODULE_0__.u9r;s.setAttribute("position",new three__WEBPACK_IMPORTED_MODULE_0__.a$l(i,3)),s.setAttribute("uv",new three__WEBPACK_IMPORTED_MODULE_0__.a$l(n,2)),s.setAttribute("light",new three__WEBPACK_IMPORTED_MODULE_0__.j87(o,1)),s.setIndex(e);const Z=this.getBlockFaceMaterial(A,t);if(!Z)return;const b=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(s,Z);return b.position.set(g*l,c*d,I*l),b.updateMatrix(),b.matrixAutoUpdate=!1,b.matrixWorldAutoUpdate=!1,b.userData={isChunk:!0,voxel:A},this.add(b),b}));e.meshes.has(c)||e.meshes.set(c,[]),null===(t=e.meshes.get(c))||void 0===t||t.push(...s)}setupComponents(){const{skyOptions:g,cloudsOptions:I}=this.options;this.registry=new Registry,this.loader=new Loader,this.chunks=new Chunks,I.uFogColor||(I.uFogColor=this.chunks.uniforms.fogColor),this.sky=new Sky(g),this.clouds=new Clouds(I),this.add(this.sky,this.clouds),this.physics=new Engine(((g,I,C)=>{if(!this.getChunkByPosition(g,I,C))return[];const A=this.getVoxelAt(g,I,C),t=this.getVoxelRotationAt(g,I,C),{aabbs:e,isPassable:o,isFluid:i}=this.getBlockById(A);return o||i?[]:e.map((A=>t.rotateAABB(A).translate([g,I,C])))}),((g,I,C)=>{if(!this.getChunkByPosition(g,I,C))return!1;const A=this.getVoxelAt(g,I,C),{isFluid:t}=this.getBlockById(A);return t}),this.options)}setupUniforms(){const{minLightLevel:g}=this.options;this.chunks.uniforms.minLightLevel.value=g}async loadMaterials(){const{textureUnitDimension:g}=this.options,I=g=>{let I=1;const C=Math.ceil(Math.sqrt(g));for(;I<C;)I*=2;return I},C=(g,I)=>{const C=this.makeShaderMaterial();return C.side=g?three__WEBPACK_IMPORTED_MODULE_0__.ub3:three__WEBPACK_IMPORTED_MODULE_0__.Wl3,C.transparent=g,C.map=I,C.uniforms.map.value=I,C};for(const A of this.registry.blocksById.values()){let t=A.faces.length;A.faces.forEach((g=>{g.independent&&t--}));const e=I(t),o=new AtlasTexture(e,g),i=C(A.isSeeThrough,o),l=this.makeChunkMaterialKey(A.id);this.chunks.materials.set(l,i);for(const I of A.faces){if(!I.independent)continue;const t=C(A.isSeeThrough,AtlasTexture.makeUnknownTexture(g)),e=this.makeChunkMaterialKey(A.id,I.name);this.chunks.materials.set(e,t)}}}makeChunkMaterialKey(g,I){return I?`${g}-${I}`:`${g}`}trackChunkAt(g,I,C){if(!this.isTrackingChunks)return;const{chunkSize:A,maxHeight:t,subChunks:e}=this.options,o=[0|g,0|I,0|C],[i,l]=ChunkUtils.mapVoxelToChunk(o,A),[c,,n]=ChunkUtils.mapVoxelToChunkLocal(o,A);if(this.chunksTracker.find((g=>{let[[I,C]]=g;return I===i&&C===l})))return;const d=t/e,s=Math.floor(I/d),Z=[];Z.push([i,l]),0===c&&Z.push([i-1,l]),0===n&&Z.push([i,l-1]),0===c&&0===n&&Z.push([i-1,l-1]),c===A-1&&Z.push([i+1,l]),n===A-1&&Z.push([i,l+1]),c===A-1&&n===A-1&&Z.push([i+1,l+1]);const b=[];I%d==0&&s>0?b.push(s-1):I%d==d-1&&s<e&&b.push(s+1),b.push(s);for(const[a,m]of Z)for(const g of b)this.chunksTracker.push([[a,m],g])}checkIsInitialized(g,I){if(void 0===I&&(I=!0),I?this.isInitialized:!this.isInitialized)throw new Error(`Cannot ${g} ${I?"after":"before"} the world ${I?"has been":"is"} isInitialized. ${I?"This has to be called before `world.init`.":"Remember to call the asynchronous function `world.init` beforehand."}`)}constructor(g){var I,C;void 0===g&&(g={}),super(),I=this,_defineProperty$4(this,"options",void 0),_defineProperty$4(this,"registry",void 0),_defineProperty$4(this,"loader",void 0),_defineProperty$4(this,"chunks",void 0),_defineProperty$4(this,"physics",void 0),_defineProperty$4(this,"sky",void 0),_defineProperty$4(this,"clouds",void 0),_defineProperty$4(this,"isInitialized",!1),_defineProperty$4(this,"packets",[]),_defineProperty$4(this,"oldBlocks",new Map),_defineProperty$4(this,"clock",new three__WEBPACK_IMPORTED_MODULE_0__.SUY),_defineProperty$4(this,"chunkInitializeListeners",new Map),_defineProperty$4(this,"blockUpdateListeners",new Set),_defineProperty$4(this,"initialData",null),_defineProperty$4(this,"_time",0),_defineProperty$4(this,"_renderRadius",0),_defineProperty$4(this,"_deleteRadius",0),_defineProperty$4(this,"meshWorkerPool",new WorkerPool(WorkerFactory$2,{maxWorker:null!==(C=navigator.hardwareConcurrency)&&void 0!==C?C:4})),_defineProperty$4(this,"chunksTracker",[]),_defineProperty$4(this,"isTrackingChunks",!1),_defineProperty$4(this,"addChunkInitListener",((g,I)=>{const C=ChunkUtils.getChunkName(g);if(this.chunks.loaded.has(C))return void I(this.chunks.loaded.get(C));const A=this.chunkInitializeListeners.get(C)||[];A.push(I),this.chunkInitializeListeners.set(C,A)})),_defineProperty$4(this,"addBlockUpdateListener",(g=>{this.blockUpdateListeners.add(g)})),_defineProperty$4(this,"raycastVoxels",(function(g,C,A,t){void 0===t&&(t={}),I.checkIsInitialized("raycast voxels",!1);const{ignoreFluids:e,ignorePassables:o,ignoreSeeThrough:i}=_objectSpread$1({ignoreFluids:!0,ignorePassables:!1,ignoreSeeThrough:!1},t),l=new Set(t.ignoreList||[]);return raycast(((g,C,A)=>{const t=I.getBlockAt(g,C,A);if(!t)return[];const{id:c,isFluid:n,isPassable:d,isSeeThrough:s,aabbs:Z,dynamicFn:b,isDynamic:a}=t;if(l.has(c))return[];if(a&&!b&&console.warn(`Block of ID ${c} is dynamic but has no dynamic function.`),n&&e||d&&o||s&&i)return[];const m=I.getVoxelRotationAt(g,C,A);return(a&&b?b([0|g,0|C,0|A]).aabbs:Z).map((g=>m.rotateAABB(g)))}),g,C,A)})),_defineProperty$4(this,"updateVoxel",(function(g,C,A,t,e,o,i){void 0===e&&(e=PY_ROTATION),void 0===o&&(o=0),void 0===i&&(i="client"),I.updateVoxels([{vx:g,vy:C,vz:A,type:t,rotation:e,yRotation:o}],i)})),_defineProperty$4(this,"updateVoxels",(function(g,C){void 0===C&&(C="client"),I.checkIsInitialized("update voxels",!1);const A=g.filter((g=>{if(g.vy<0||g.vy>=I.options.maxHeight)return!1;const{vx:C,vy:A,vz:t,type:e,rotation:o,yRotation:i}=g,l=I.getVoxelAt(C,A,t),c=I.getVoxelRotationAt(C,A,t);return I.getBlockById(e)?l!==e||void 0===o||c.value!==o||void 0===i||c.yRotation!==i:(console.warn(`Block ID ${e} does not exist.`),!1)})).map((g=>(isNaN(g.rotation)&&(g.rotation=0),I.getBlockById(g.type).yRotatable||(g.yRotation=0),g)));I.chunks.toUpdate.push(...A.map((g=>({source:C,update:g}))))})),_defineProperty$4(this,"makeBlockMesh",(function(g,C){if(void 0===C&&(C={}),I.checkIsInitialized("make block mesh",!1),!g)return null;const A=I.getBlockOf(g);if(!A)return null;const{separateFaces:t,crumbs:e,material:o}=_objectSpread$1({separateFaces:!1,crumbs:!1,material:"basic"},C),{faces:i,isSeeThrough:l}=A,c=new Map;i.forEach(((g,C)=>{const i=e&&t?Math.random()+.5:1,{corners:n,name:d,range:s}=g,Z=`${A.name}-${d}-${t?C:"all"}`;let b=c.get(Z);if(!b){const g=I.getBlockFaceMaterial(A.id,d),C={transparent:l,map:g.map,side:l?three__WEBPACK_IMPORTED_MODULE_0__.ub3:three__WEBPACK_IMPORTED_MODULE_0__.Wl3};b={identifier:Z,positions:[],uvs:[],indices:[],material:"basic"===o?new three__WEBPACK_IMPORTED_MODULE_0__.vBJ(C):new three__WEBPACK_IMPORTED_MODULE_0__.Wid(C)}}const{positions:a,uvs:m,indices:r}=b,h=Math.floor(a.length/3);let{startU:B,endU:G,startV:W,endV:u}=s;e&&(Math.random()<.5?(B+=(G-B)/2*Math.random(),u-=(u-W)/2*Math.random()):(G-=(G-B)/2*Math.random(),W+=(u-W)/2*Math.random())),n.forEach((g=>{let{uv:I,pos:C}=g;a.push(...C.map((g=>g*i))),m.push(I[0]*(G-B)+B,I[1]*(u-W)+W)})),r.push(h,h+1,h+2,h+2,h+1,h+3),c.set(Z,b)}));const n=new three__WEBPACK_IMPORTED_MODULE_0__.ZAu;return c.forEach((g=>{let{identifier:I,positions:C,uvs:A,indices:t,material:e}=g;const o=new three__WEBPACK_IMPORTED_MODULE_0__.u9r;o.setAttribute("position",new three__WEBPACK_IMPORTED_MODULE_0__.a$l(C,3)),o.setAttribute("uv",new three__WEBPACK_IMPORTED_MODULE_0__.a$l(A,2)),o.setIndex(t),o.computeVertexNormals();const i=new three__WEBPACK_IMPORTED_MODULE_0__.Kj0(o,e);i.name=I,n.add(i)})),n.name=A.name,n.position.x-=.5,n.position.y-=.5,n.position.z-=.5,n})),_defineProperty$4(this,"customizeMaterialShaders",(function(g,C,A){void 0===C&&(C=null),void 0===A&&(A={vertexShader:DEFAULT_CHUNK_SHADERS.vertex,fragmentShader:DEFAULT_CHUNK_SHADERS.fragment,uniforms:{}}),I.checkIsInitialized("customize material shaders",!1);const{vertexShader:t=DEFAULT_CHUNK_SHADERS.vertex,fragmentShader:e=DEFAULT_CHUNK_SHADERS.fragment,uniforms:o={}}=A,i=I.getBlockFaceMaterial(g,C);if(!i)throw new Error(`Could not find material for block ${g} and face ${C}`);return i.vertexShader=t,i.fragmentShader=e,i.uniforms=_objectSpread$1({},i.uniforms,o),i.needsUpdate=!0,i})),_defineProperty$4(this,"customizeBlockDynamic",((g,I)=>{this.checkIsInitialized("customize block dynamic",!1);const C=this.getBlockOf(g);if(!C)throw new Error(`Block with ID ${g} does not exist, could not overwrite dynamic function.`);C.dynamicFn=I})),_defineProperty$4(this,"updatePhysics",(g=>{if(!this.physics||!this.options.gravity)return;const I=this.options.gravity[0]**2+this.options.gravity[1]**2+this.options.gravity[2]**2<.01;this.physics.bodies.forEach((C=>{const A=ChunkUtils.mapVoxelToChunk(C.getPosition(),this.options.chunkSize),t=this.getChunkByPosition(...C.getPosition());(t&&t.isReady||!this.isWithinWorld(...A))&&this.physics.iterateBody(C,g,I)}))})),_defineProperty$4(this,"updateUniforms",(()=>{this.chunks.uniforms.time.value=performance.now()})),_defineProperty$4(this,"processClientUpdates",(()=>{if(0===this.chunks.toUpdate.length)return;const g=this.chunks.toUpdate.splice(0,this.options.maxUpdatesPerUpdate);g.sort(((g,I)=>I.update.vy-g.update.vy));const{maxHeight:I,maxLightLevel:C}=this.options,A=[],t=[],e=[],o=[];this.isTrackingChunks=!0;for(const l of g){const{update:{type:g,vx:i,vy:c,vz:n,rotation:d,yRotation:s}}=l,Z=this.getBlockAt(i,c,n),b=this.getVoxelRotationAt(i,c,n),a=BlockUtils.getBlockRotatedTransparency(Z,b),m=this.getBlockById(g),r=BlockRotation.encode(d,s),h=BlockUtils.getBlockRotatedTransparency(m,r),B=BlockUtils.insertAll(m.id,m.rotatable?r:void 0);if(this.attemptBlockCache(i,c,n,B),this.setVoxelAt(i,c,n,g),m.rotatable&&this.setVoxelRotationAt(i,c,n,r),m.isOpaque||m.lightReduce)this.getSunlightAt(i,c,n)>0&&this.removeLight([i,c,n],"SUNLIGHT"),[RED_LIGHT,GREEN_LIGHT,BLUE_LIGHT].map((g=>{this.getTorchLightAt(i,c,n,g)>0&&this.removeLight([i,c,n],g)}));else{let g=0;const A=[[SUNLIGHT,this.getSunlightAt(i,c,n)],[RED_LIGHT,this.getTorchLightAt(i,c,n,"RED")],[GREEN_LIGHT,this.getTorchLightAt(i,c,n,"GREEN")],[BLUE_LIGHT,this.getTorchLightAt(i,c,n,"BLUE")]];VOXEL_NEIGHBORS.forEach((t=>{let[e,o,l]=t;const d=c+o;if(d<0||d>=I)return;const s=i+e,Z=n+l,m=this.getBlockAt(s,d,Z),r=BlockUtils.getBlockRotatedTransparency(m,b);LightUtils.canEnter(a,r,e,o,l)&&!LightUtils.canEnter(h,r,e,o,l)&&A.forEach((I=>{let[A,t]=I;const e=A===SUNLIGHT,i=e?this.getSunlightAt(s,d,Z):this.getTorchLightAt(s,d,Z,A);(i<t||-1===o&&e&&i===C&&t===C)&&(g+=1,this.removeLight([s,d,Z],A))}))})),0===g&&(0!==this.getSunlightAt(i,c,n)&&this.removeLight([i,c,n],"SUNLIGHT"),[RED_LIGHT,GREEN_LIGHT,BLUE_LIGHT].map((g=>{0!==this.getTorchLightAt(i,c,n,g)&&this.removeLight([i,c,n],g)})))}m.isLight?(m.redLightLevel>0&&(this.setTorchLightAt(i,c,n,m.redLightLevel,"RED"),A.push({voxel:[i,c,n],level:m.redLightLevel})),m.greenLightLevel>0&&(this.setTorchLightAt(i,c,n,m.greenLightLevel,"GREEN"),t.push({voxel:[i,c,n],level:m.greenLightLevel})),m.blueLightLevel>0&&(this.setTorchLightAt(i,c,n,m.blueLightLevel,"BLUE"),e.push({voxel:[i,c,n],level:m.blueLightLevel}))):VOXEL_NEIGHBORS.forEach((g=>{let[l,d,s]=g;const Z=c+d;if(Z<0)return;if(Z>=I)return void(LightUtils.canEnter([!0,!0,!0,!0,!0,!0],h,l,-1,s)&&o.push({voxel:[i+l,c,n+s],level:C}));const b=i+l,r=n+s,B=this.getBlockAt(b,Z,r),G=BlockUtils.getBlockRotatedTransparency(B,this.getVoxelRotationAt(b,Z,r)),W=[b,Z,r];if(LightUtils.canEnter(a,G,l,d,s)||!LightUtils.canEnter(h,G,l,d,s))return;const u=this.getSunlightAt(b,Z,r)-(m.lightReduce?1:0);0!==u&&o.push({voxel:W,level:u});const y=this.getTorchLightAt(b,Z,r,"RED")-(m.lightReduce?1:0);0!==y&&A.push({voxel:W,level:y});const p=this.getTorchLightAt(b,Z,r,"GREEN")-(m.lightReduce?1:0);0!==p&&t.push({voxel:W,level:p});const V=this.getTorchLightAt(b,Z,r,"BLUE")-(m.lightReduce?1:0);0!==V&&e.push({voxel:W,level:V})}))}this.floodLight(o,"SUNLIGHT"),this.floodLight(A,"RED"),this.floodLight(t,"GREEN"),this.floodLight(e,"BLUE"),this.isTrackingChunks=!1;const i=this.chunksTracker.splice(0,this.chunksTracker.length);(async()=>{for(const[g,I]of i){const[C,A]=g;await this.meshChunkLocally(C,A,I)}})().then((()=>{this.chunks.toEmit.push(...g.filter((g=>{let{source:I}=g;return"client"===I})).map((g=>{let{update:I}=g;return I})))}))})),_defineProperty$4(this,"emitServerUpdates",(()=>{if(0===this.chunks.toEmit.length)return;const g=this.chunks.toEmit.splice(0,this.options.maxUpdatesPerUpdate);this.packets.push({type:"UPDATE",updates:g.map((g=>{const{type:I,rotation:C,yRotation:A}=g,t=this.getBlockById(I);let e=0;return e=BlockUtils.insertID(e,I),!t.rotatable||isNaN(C)&&isNaN(A)||(e=BlockUtils.insertRotation(e,BlockRotation.encode(C,A))),_objectSpreadProps(_objectSpread$1({},g),{voxel:e})}))})})),_defineProperty$4(this,"makeShaderMaterial",(function(g,C,A){void 0===g&&(g=DEFAULT_CHUNK_SHADERS.fragment),void 0===C&&(C=DEFAULT_CHUNK_SHADERS.vertex),void 0===A&&(A={});const t=_objectSpread$1({},I.chunks.uniforms,I.options.chunkUniformsOverwrite),e=new three__WEBPACK_IMPORTED_MODULE_0__.jyz({vertexColors:!0,fragmentShader:g,vertexShader:C,uniforms:_objectSpread$1(_objectSpreadProps(_objectSpread$1({},three__WEBPACK_IMPORTED_MODULE_0__.rDY.clone(three__WEBPACK_IMPORTED_MODULE_0__.Vj0.basic.uniforms)),{uSunlightIntensity:t.sunlightIntensity,uAOTable:t.ao,uMinLightLevel:t.minLightLevel,uFogNear:t.fogNear,uFogFar:t.fogFar,uFogColor:t.fogColor,uTime:t.time}),A)});return Object.defineProperty(e,"renderStage",{get:function(){return e.uniforms.renderStage.value},set:function(g){e.uniforms.renderStage.value=parseFloat(g)}}),e.map=AtlasTexture.makeUnknownTexture(),e.uniforms.map={value:e.map},e}));const{statsSyncInterval:A}=this.options=_objectSpread$1({},defaultOptions$1,g);this.setupComponents(),this.setupUniforms(),setWorkerInterval((()=>{this.packets.push({type:"METHOD",method:{name:"vox-builtin:get-stats",payload:{}}})}),A)}}var url_min={exports:{}},module;module=url_min,function(g){var I,C=/^[a-z]+:/,A=/[-a-z0-9]+(\.[-a-z0-9])*:\d+/i,t=/\/\/(.*?)(?::(.*?))?@/,e=/^win/i,o=/:$/,i=/^\?/,l=/^#/,c=/(.*\/)/,n=/^\/{2,}/,d=/(^\/?)/,s=/'/g,Z=/%([ef][0-9a-f])%([89ab][0-9a-f])%([89ab][0-9a-f])/gi,b=/%([cd][0-9a-f])%([89ab][0-9a-f])/gi,a=/%([0-7][0-9a-f])/gi,m=/\+/g,r=/^\w:$/,h=/[^/#?]/,B="undefined"==typeof window&&void 0!==commonjsGlobal&&"function"==typeof commonjsRequire,G=!B&&g.navigator&&g.navigator.userAgent&&~g.navigator.userAgent.indexOf("MSIE"),W=B?g.require:null,u={protocol:"protocol",host:"hostname",port:"port",path:"pathname",query:"search",hash:"hash"},y={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443};function p(){return B?I=I||"file://"+(process.platform.match(e)?"/":"")+W("fs").realpathSync("."):"about:srcdoc"===document.location.href?self.parent.document.location.href:document.location.href}function V(g){return encodeURIComponent(g).replace(s,"%27")}function S(g){return(g=(g=(g=g.replace(m," ")).replace(Z,(function(g,I,C,A){var t=parseInt(I,16)-224,e=parseInt(C,16)-128;if(0==t&&e<32)return g;var o=(t<<12)+(e<<6)+(parseInt(A,16)-128);return 65535<o?g:String.fromCharCode(o)}))).replace(b,(function(g,I,C){var A=parseInt(I,16)-192;if(A<2)return g;var t=parseInt(C,16)-128;return String.fromCharCode((A<<6)+t)}))).replace(a,(function(g,I){return String.fromCharCode(parseInt(I,16))}))}function Y(g){for(var I=g.split("&"),C=0,A=I.length;C<A;C++){var t=I[C].split("="),e=decodeURIComponent(t[0].replace(m," "));if(e){var o=void 0!==t[1]?S(t[1]):null;void 0===this[e]?this[e]=o:(this[e]instanceof Array||(this[e]=[this[e]]),this[e].push(o))}}}function J(g,I){!function(g,I,e){var s,Z,b;I=I||p(),B?s=W("url").parse(I):(s=document.createElement("a")).href=I;var a,m,r=(m={path:!0,query:!0,hash:!0},(a=I)&&C.test(a)&&(m.protocol=!0,m.host=!0,A.test(a)&&(m.port=!0),t.test(a)&&(m.user=!0,m.pass=!0)),m);for(Z in b=I.match(t)||[],u)r[Z]?g[Z]=s[u[Z]]||"":g[Z]="";if(g.protocol=g.protocol.replace(o,""),g.query=g.query.replace(i,""),g.hash=S(g.hash.replace(l,"")),g.user=S(b[1]||""),g.pass=S(b[2]||""),g.port=y[g.protocol]==g.port||0==g.port?"":g.port,!r.protocol&&h.test(I.charAt(0))&&(g.path=I.split("?")[0].split("#")[0]),!r.protocol&&e){var V=new J(p().match(c)[0]),X=V.path.split("/"),K=g.path.split("/"),H=["protocol","user","pass","host","port"],R=H.length;for(X.pop(),Z=0;Z<R;Z++)g[H[Z]]=V[H[Z]];for(;".."===K[0];)X.pop(),K.shift();g.path=("/"!==I.charAt(0)?X.join("/"):"")+"/"+K.join("/")}g.path=g.path.replace(n,"/"),G&&(g.path=g.path.replace(d,"/")),g.paths(g.paths()),g.query=new Y(g.query)}(this,g,!I)}Y.prototype.toString=function(){var g,I,C="",A=V;for(g in this){var t=this[g];if(!(t instanceof Function||void 0===t))if(t instanceof Array){var e=t.length;if(!e){C+=(C?"&":"")+A(g)+"=";continue}for(I=0;I<e;I++){var o=t[I];void 0!==o&&(C+=C?"&":"",C+=A(g)+(null===o?"":"="+A(o)))}}else C+=C?"&":"",C+=A(g)+(null===t?"":"="+A(t))}return C},J.prototype.clearQuery=function(){for(var g in this.query)this.query[g]instanceof Function||delete this.query[g];return this},J.prototype.queryLength=function(){var g=0;for(var I in this.query)this.query[I]instanceof Function||g++;return g},J.prototype.isEmptyQuery=function(){return 0===this.queryLength()},J.prototype.paths=function(g){var I,C="",A=0;if(g&&g.length&&g+""!==g){for(this.isAbsolute()&&(C="/"),I=g.length;A<I;A++)g[A]=!A&&r.test(g[A])?g[A]:V(g[A]);this.path=C+g.join("/")}for(A=0,I=(g=("/"===this.path.charAt(0)?this.path.slice(1):this.path).split("/")).length;A<I;A++)g[A]=S(g[A]);return g},J.prototype.encode=V,J.prototype.decode=S,J.prototype.isAbsolute=function(){return this.protocol||"/"===this.path.charAt(0)},J.prototype.toString=function(){return(this.protocol&&this.protocol+"://")+(this.user&&V(this.user)+(this.pass&&":"+V(this.pass))+"@")+(this.host&&this.host)+(this.port&&":"+this.port)+(this.path&&this.path)+(this.query.toString()&&"?"+this.query)+(this.hash&&"#"+V(this.hash))},g[g.exports?"exports":"Url"]=J}(module.exports?module:window);var DOMUrl=url_min.exports;function createBase64SharedWorkerFactory(g,I,C){var A;return function(t){return A=A||createURL(g,I,C),new SharedWorker(A,t)}}var WorkerFactory=createBase64SharedWorkerFactory("",null,!1);function _defineProperty$3(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function _objectSpread(g){for(var I=1;I<arguments.length;I++){var C=null!=arguments[I]?arguments[I]:{},A=Object.keys(C);"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(C).filter((function(g){return Object.getOwnPropertyDescriptor(C,g).enumerable})))),A.forEach((function(I){_defineProperty$3(g,I,C[I])}))}return g}const{Message:Message}=protocol.protocol,defaultOptions={maxPacketsPerTick:8};class Network{get concurrentWorkers(){return this.pool.workingCount}get packetQueueLength(){return this.packetQueue.length}static encodeSync(g){return g.json&&(g.json=JSON.stringify(g.json)),g.type=Message.Type[g.type],g.entities&&g.entities.forEach((g=>g.metadata=JSON.stringify(g.metadata))),g.peers&&g.peers.forEach((g=>g.metadata=JSON.stringify(g.metadata))),protocol.protocol.Message.encode(protocol.protocol.Message.create(g)).finish()}constructor(g){var I=this;void 0===g&&(g={}),_defineProperty$3(this,"options",void 0),_defineProperty$3(this,"clientInfo",{id:"",username:""}),_defineProperty$3(this,"intercepts",[]),_defineProperty$3(this,"ws",void 0),_defineProperty$3(this,"url",void 0),_defineProperty$3(this,"world",void 0),_defineProperty$3(this,"socket",void 0),_defineProperty$3(this,"connected",!1),_defineProperty$3(this,"joined",!1),_defineProperty$3(this,"onJoin",void 0),_defineProperty$3(this,"onLeave",void 0),_defineProperty$3(this,"onConnect",void 0),_defineProperty$3(this,"onDisconnect",void 0),_defineProperty$3(this,"pool",new SharedWorkerPool(WorkerFactory,{maxWorker:window.navigator.hardwareConcurrency||4})),_defineProperty$3(this,"reconnection",void 0),_defineProperty$3(this,"joinResolve",null),_defineProperty$3(this,"joinReject",null),_defineProperty$3(this,"packetQueue",[]),_defineProperty$3(this,"connect",(async function(g,C){if(void 0===C&&(C={}),!g)throw new Error("No server URL provided.");if("string"!=typeof g)throw new Error("Server URL must be a string.");I.url=new DOMUrl(g),I.url.protocol=I.url.protocol.replace(/ws/,"http"),I.url.hash="";const A=new DOMUrl(g);A.path="/ws/",I.socket=new URL(A.toString()),I.socket.protocol=I.socket.protocol.replace(/http/,"ws"),I.socket.hash="",I.socket.searchParams.set("secret",C.secret||""),I.socket.searchParams.set("client_id",I.clientInfo.id||"");let t=Math.floor(1e4*Math.random()).toString();return t=new Array(1e4.toString().length-t.length).fill("0").join("")+t,I.clientInfo.username=`Guest ${t}`,I.ws&&(I.ws.onclose=null,I.ws.onmessage=null,I.ws.close(),I.reconnection&&clearTimeout(I.reconnection)),new Promise((A=>{const t=new WebSocket(I.socket.toString());t.binaryType="arraybuffer",t.sendEvent=g=>{t.send(Network.encodeSync(g))},t.onopen=()=>{var g,C;I.connected=!0,null===(C=(g=I).onConnect)||void 0===C||C.call(g),clearTimeout(I.reconnection),A(I)},t.onerror=console.error,t.onmessage=g=>{let{data:C}=g;I.packetQueue.push(C)},t.onclose=()=>{var A,t;I.connected=!1,null===(t=(A=I).onDisconnect)||void 0===t||t.call(A),C.reconnectTimeout&&(I.reconnection=setTimeout((()=>{I.connect(g,C)}),C.reconnectTimeout))},I.ws=t}))})),_defineProperty$3(this,"join",(async g=>(this.joined&&this.leave(),this.joined=!0,this.world=g,this.send({type:"JOIN",json:{world:g,username:this.clientInfo.username}}),new Promise(((g,I)=>{this.joinResolve=g,this.joinReject=I}))))),_defineProperty$3(this,"leave",(()=>{this.joined&&(this.joined=!1,this.send({type:"LEAVE",text:this.world}))})),_defineProperty$3(this,"action",(async(g,I)=>{this.send({type:"ACTION",json:{action:g,data:I}})})),_defineProperty$3(this,"sync",(()=>{this.connected&&this.packetQueue.length&&!this.pool.isBusy&&this.decode(this.packetQueue.splice(0,Math.min(this.options.maxPacketsPerTick,this.packetQueue.length)).map((g=>new Uint8Array(g)))).then((async g=>{g.forEach((g=>{this.onMessage(g)}))}))})),_defineProperty$3(this,"flush",(()=>{this.intercepts.forEach((g=>{g.packets&&g.packets.length&&g.packets.splice(0,g.packets.length).forEach((g=>{this.send(g)}))}))})),_defineProperty$3(this,"register",(function(){for(var g=arguments.length,C=new Array(g),A=0;A<g;A++)C[A]=arguments[A];return C.forEach((g=>{I.intercepts.push(g)})),I})),_defineProperty$3(this,"unregister",(function(){for(var g=arguments.length,C=new Array(g),A=0;A<g;A++)C[A]=arguments[A];return C.forEach((g=>{const C=I.intercepts.indexOf(g);-1!==C&&I.intercepts.splice(C,1)})),I})),_defineProperty$3(this,"disconnect",(()=>{this.connected&&(this.ws&&(this.ws.onclose=null,this.ws.onmessage=null,this.ws.close()),this.reconnection&&clearTimeout(this.reconnection))})),_defineProperty$3(this,"send",(g=>{this.ws.sendEvent(g)})),_defineProperty$3(this,"setID",(g=>{this.clientInfo.id=g||""})),_defineProperty$3(this,"setUsername",(g=>{this.clientInfo.username=g||" "})),_defineProperty$3(this,"onMessage",(async g=>{const{type:I}=g;if("ERROR"===I){const{text:I}=g;return this.disconnect(),void this.joinReject(I)}if("INIT"===I){const{id:I}=g.json;if(I){if(this.clientInfo.id&&this.clientInfo.id!==I)throw new Error("Something went wrong with IDs! Better check if you're passing two same ID's to the same Voxelize server.");this.clientInfo.id=I}}if(this.intercepts.forEach((I=>{var C;null===(C=I.onMessage)||void 0===C||C.call(I,g,this.clientInfo)})),"INIT"===I){var C;if(!this.joinResolve)throw new Error("Something went wrong with joining worlds...");this.joinResolve(this),null===(C=this.onJoin)||void 0===C||C.call(this,this.world)}})),_defineProperty$3(this,"decode",(async g=>new Promise((I=>{this.pool.addJob({message:g,buffers:g.map((g=>g.buffer)),resolve:I})})))),this.options=_objectSpread({},defaultOptions,g),setWorkerInterval((()=>{this.flush(),this.sync()}),1e3/60)}}function _defineProperty$2(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Chat{send(g){if(g.body.startsWith(this._commandSymbol)){const I=g.body.substring(this._commandSymbol.length).split(" ").filter(Boolean),C=I.shift(),A=I.join(" "),t=this.commands.get(C);if(t)return void t(A.trim())}this.packets.push({type:"CHAT",chat:g})}addCommand(g,I,C){if(void 0===C&&(C=[]),this.commands.has(g))throw new Error(`Command trigger already taken: ${g}`);if(g.split(" ").length>1)throw new Error("Command trigger must be one word.");this.commands.set(g,I);for(const A of C)this.commands.has(A)?console.warn(`Command alias for "${g}", "${A}" ignored as already taken.`):this.commands.set(A,I)}removeCommand(g){return!!this.commands.delete(g)}get commandSymbol(){return this._commandSymbol}constructor(){_defineProperty$2(this,"commands",new Map),_defineProperty$2(this,"packets",[]),_defineProperty$2(this,"_commandSymbol",void 0),_defineProperty$2(this,"onChat",void 0),_defineProperty$2(this,"onMessage",(g=>{switch(g.type){case"INIT":{const{commandSymbol:I}=g.json.options;this._commandSymbol=I;break}case"CHAT":{var I;const{chat:C}=g;null===(I=this.onChat)||void 0===I||I.call(this,C);break}}}))}}var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&!(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}var REGEX=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(g){return"string"==typeof g&&REGEX.test(g)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(g){var I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,C=(byteToHex[g[I+0]]+byteToHex[g[I+1]]+byteToHex[g[I+2]]+byteToHex[g[I+3]]+"-"+byteToHex[g[I+4]]+byteToHex[g[I+5]]+"-"+byteToHex[g[I+6]]+byteToHex[g[I+7]]+"-"+byteToHex[g[I+8]]+byteToHex[g[I+9]]+"-"+byteToHex[g[I+10]]+byteToHex[g[I+11]]+byteToHex[g[I+12]]+byteToHex[g[I+13]]+byteToHex[g[I+14]]+byteToHex[g[I+15]]).toLowerCase();if(!validate(C))throw TypeError("Stringified UUID is invalid");return C}function v4(g,I,C){var A=(g=g||{}).random||(g.rng||rng)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,I){C=C||0;for(var t=0;t<16;++t)I[C+t]=A[t];return I}return stringify(A)}function _defineProperty$1(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Inputs extends events.exports.EventEmitter{on(g,I){return super.on(g,I),this}constructor(){var g;super(),g=this,_defineProperty$1(this,"namespace",void 0),_defineProperty$1(this,"clickCallbacks",new Map),_defineProperty$1(this,"scrollCallbacks",new Map),_defineProperty$1(this,"keyDownCallbacks",new Map),_defineProperty$1(this,"keyUpCallbacks",new Map),_defineProperty$1(this,"keyPressCallbacks",new Map),_defineProperty$1(this,"keyBounds",new Map),_defineProperty$1(this,"unbinds",[]),_defineProperty$1(this,"click",(function(I,C,A){var t;void 0===A&&(A="*");const e=v4();return null===(t=g.clickCallbacks.get(I))||void 0===t||t.set(e,{namespace:A,callback:C}),()=>g.clickCallbacks.get(I).delete(e)})),_defineProperty$1(this,"scroll",(function(I,C,A){void 0===A&&(A="*");const t=v4();return g.scrollCallbacks.set(t,{up:I,down:C,namespace:A}),()=>g.scrollCallbacks.delete(t)})),_defineProperty$1(this,"bind",(function(I,C,A,t){void 0===A&&(A="*"),void 0===t&&(t={}),I=g.modifyKey(I);const{occasion:e="keydown",identifier:o="default"}=t,i=I+e,l=g.keyBounds.get(i);if(l&&l[o])throw new Error(`Error registering input, key ${I}: already bound.`);switch(e){case"keydown":g.keyDownCallbacks.set(i,[...g.keyDownCallbacks.get(i)||[],C]);break;case"keyup":g.keyUpCallbacks.set(i,[...g.keyUpCallbacks.get(i)||[],C]);break;case"keypress":g.keyPressCallbacks.set(i,[...g.keyPressCallbacks.get(i)||[],C])}const c=g.keyBounds.get(i)||{},n=()=>{[["keydown",g.keyDownCallbacks],["keyup",g.keyUpCallbacks],["keypress",g.keyPressCallbacks]].forEach((g=>{let[I,A]=g;var t;if(I!==e)return;const o=A.get(i);if(o){const g=o.indexOf(C);-1!==g&&o.splice(g,1)}0===(null===(t=A.get(i))||void 0===t?void 0:t.length)&&A.delete(i)})),delete c[o]};return c[o]={unbind:n,callback:C,namespace:A},g.keyBounds.set(i,c),n})),_defineProperty$1(this,"unbind",(function(I,C){void 0===C&&(C={}),I=g.modifyKey(I);const{occasion:A="keydown",identifier:t="default"}=C,e=I+A,o=(g.keyBounds.get(e)||{})[t];if(o){const{unbind:g}=o;return g(),!0}return!1})),_defineProperty$1(this,"swap",(function(I,C,A){void 0===A&&(A={}),I=g.modifyKey(I),C=g.modifyKey(C);const{occasion:t="keydown",identifier:e="default"}=A,o=I+t,i=C+t,l=(g.keyBounds.get(o)||{})[e],c=(g.keyBounds.get(i)||{})[e];if(!l)throw new Error(`Key ${o} is not bound.`);if(!c)throw new Error(`Key ${i} is not bound.`);const{unbind:n,callback:d,namespace:s}=l,{unbind:Z,callback:b,namespace:a}=c;n(),Z(),g.bind(C,d,s,A),g.bind(I,b,a,A)})),_defineProperty$1(this,"remap",(function(I,C,A){void 0===A&&(A={}),I=g.modifyKey(I);const{occasion:t="keydown",identifier:e="default"}=A,o=I+t,i=(g.keyBounds.get(o)||{})[e];if(!i)throw new Error(`Key ${o} is not bound.`);const{unbind:l,callback:c,namespace:n}=i;l(),g.bind(C,c,n,A)})),_defineProperty$1(this,"setNamespace",(g=>{this.namespace=g,this.emit("namespace",g)})),_defineProperty$1(this,"reset",(()=>{this.keyBounds.forEach((g=>Object.values(g).forEach((g=>g.unbind())))),this.unbinds.forEach((g=>g()))})),_defineProperty$1(this,"modifyKey",(g=>(g.length>1?g.charAt(0).toUpperCase()+g.slice(1):g).toLowerCase())),_defineProperty$1(this,"initializeKeyListeners",(()=>{const g=g=>I=>{const{key:C,code:A}=I,t=(C||A).toLowerCase()+g,e=this.keyBounds.get(t);e&&Object.values(e).forEach((g=>{const{callback:I,namespace:C}=g;"*"!==C&&C!==this.namespace||I()}))};document.addEventListener("keydown",g("keydown")),document.addEventListener("keyup",g("keyup")),document.addEventListener("keypress",g("keypress"))})),_defineProperty$1(this,"initializeClickListeners",(()=>{["left","middle","right"].forEach((g=>this.clickCallbacks.set(g,new Map)));const g=g=>{let I,{button:C}=g;0===C?I=this.clickCallbacks.get("left"):1===C?I=this.clickCallbacks.get("middle"):2===C&&(I=this.clickCallbacks.get("right")),I.forEach((g=>{let{namespace:I,callback:C}=g;this.namespace!==I&&"*"!==I||C()}))};document.addEventListener("mousedown",g,!1),this.unbinds.push((()=>document.removeEventListener("mousedown",g,!1)))})),_defineProperty$1(this,"initializeScrollListeners",(()=>{const g=g=>{let{deltaY:I}=g;this.scrollCallbacks.forEach((g=>{let{up:C,down:A,namespace:t}=g;this.namespace!==t&&"*"!==t||(I>0?C(I):I<0&&A(I))}))};document.addEventListener("wheel",g),this.unbinds.push((()=>document.removeEventListener("wheel",g)))})),this.initializeKeyListeners(),this.initializeClickListeners(),this.initializeScrollListeners()}}function _defineProperty(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}class Method{constructor(){var g=this;_defineProperty(this,"packets",[]),_defineProperty(this,"call",(function(I,C){void 0===C&&(C={}),g.packets.push({type:"METHOD",method:{name:I,payload:JSON.stringify(C)}})}))}}}}]);