"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1849],{5318:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7378);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(r),b=s,g=d["".concat(c,".").concat(b)]||d[b]||p[b]||o;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function b(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,i=new Array(o);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8634:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=r(5773),s=(r(7378),r(5318));const o={sidebar_position:2},i="Register Blocks",a={unversionedId:"basics/register-blocks",id:"basics/register-blocks",title:"Register Blocks",description:"A Voxelize world consists of tens of millions of blocks, so our first step after creating a server should be registering the blocks used across this server.",source:"@site/docs/basics/2-register-blocks.md",sourceDirName:"basics",slug:"/basics/register-blocks",permalink:"/docs/basics/register-blocks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/2-register-blocks.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create the Server",permalink:"/docs/basics/create-the-server"},next:{title:"Create a World",permalink:"/docs/basics/create-a-world"}},c={},l=[{value:"Create a Registry",id:"create-a-registry",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"register-blocks"},"Register Blocks"),(0,s.kt)("p",null,"A Voxelize world consists of tens of millions of blocks, so our first step after creating a server should be registering the blocks used across this server."),(0,s.kt)("p",null,"In Voxelize, each server has a set of blocks that the developer defines. These blocks are managed by a\xa0",(0,s.kt)("strong",{parentName:"p"},"registry"),", and are shared across all worlds in the same server."),(0,s.kt)("h2",{id:"create-a-registry"},"Create a Registry"),(0,s.kt)("p",null,"Let's create our example registry, registering two blocks to it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="server/main.rs"',title:'"server/main.rs"'},'// highlight-next-line\nuse voxelize::{Block, Registry, Server, Voxelize};\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // highlight-start\n    let mut registry = Registry::new();\n\n    let dirt = Block::new("Dirt").id(1).build();\n    let stone = Block::new("Stone").id(2).build();\n\n    registry.register_blocks(&[dirt, stone]);\n\n    let server = Server::new().port(4000).registry(&registry).build();\n    // highlight-end\n\n    Voxelize::run(server).await\n}\n')),(0,s.kt)("p",null,"Just like that, we have registered two blocks on the server side."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"To further understand block customization, check out ",(0,s.kt)("a",{parentName:"p",href:"../intermediate/custom-blocks"},"this tutorial"),".")))}p.isMDXComponent=!0}}]);