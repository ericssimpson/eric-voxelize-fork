"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3799],{3601:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=r(4246),t=r(1670);const i={sidebar_position:3},s="Create a World",l={id:"basics/create-a-world",title:"Create a World",description:"With a server and two blocks, we are ready to create our first world.",source:"@site/docs/tutorials/basics/3-create-a-world.md",sourceDirName:"basics",slug:"/basics/create-a-world",permalink:"/voxelize/tutorials/basics/create-a-world",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Register Blocks",permalink:"/voxelize/tutorials/basics/register-blocks"},next:{title:"Chunk Generation",permalink:"/voxelize/tutorials/basics/chunk-generation"}},a={},d=[{value:"What is a Voxelize World?",id:"what-is-a-voxelize-world",level:2},{value:"What are Chunks?",id:"what-are-chunks",level:2},{value:"World Configuration",id:"world-configuration",level:2},{value:"World Creation",id:"world-creation",level:2},{value:"Progress Check",id:"progress-check",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"create-a-world",children:"Create a World"}),"\n",(0,o.jsx)(n.p,{children:"With a server and two blocks, we are ready to create our first world."}),"\n",(0,o.jsxs)(n.p,{children:["A server can contain multiple worlds. For demonstration purposes, we will only be creating one world for this tutorial called ",(0,o.jsx)(n.strong,{children:"tutorial"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:r(248).Z+"",width:"662",height:"541"})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-a-voxelize-world",children:"What is a Voxelize World?"}),"\n",(0,o.jsx)(n.p,{children:"A Voxelize world is a voxel world registered under a Voxelize server. It contains its own set of data, such as block data, entity data, player information, and all that."}),"\n",(0,o.jsx)(n.p,{children:"Voxel worlds are made up of chunks, so let's dive into what chunks are next."}),"\n",(0,o.jsx)(n.h2,{id:"what-are-chunks",children:"What are Chunks?"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:r(4628).Z+"",width:"2560",height:"1440"})}),"\n",(0,o.jsx)(n.p,{children:"Chunks are columns of blocks that make up an entire Voxelize world. By default, a chunk is 16x256x16 in dimension. A Voxelize world can be infinite because the world only generates the chunks around the clients, and as the client moves, more chunks are generated."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:r(4560).Z+"",width:"3456",height:"2160"})}),"\n",(0,o.jsxs)(n.p,{children:["Chunks have their own coordinate system, separate from the voxel coordinate system. Voxel coordinates are 3D in the x/y/z space, and chunk coordinates are 2D in the x/z plane. For example, if the chunk size is 16 blocks wide, the voxel ",(0,o.jsx)(n.code,{children:"(1, 1, 1)"})," would reside in the chunk ",(0,o.jsx)(n.code,{children:"(0, 0)"}),", and the voxel ",(0,o.jsx)(n.code,{children:"(17, 1, 1)"})," would reside in chunk ",(0,o.jsx)(n.code,{children:"(1, 0)"}),". If chunk has a max height of 256, a voxel coordinate such as ",(0,o.jsx)(n.code,{children:"(17, 256, 1)"})," would be invalid since the valid y-coordinate range would be ",(0,o.jsx)(n.code,{children:"0"})," - ",(0,o.jsx)(n.code,{children:"255"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"The concept of chunk allows Voxelize to organize data and run things in parallel on both the client side and server side."})}),"\n",(0,o.jsx)(n.h2,{id:"world-configuration",children:"World Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have an understanding of how Voxelize worlds work, let's talk about configuring the voxel world."}),"\n",(0,o.jsxs)(n.p,{children:["Voxelize worlds are configured through ",(0,o.jsx)(n.code,{children:"WorldConfig"}),"s. It defines how the world should be run."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="server/main.rs"',children:"// highlight-next-line\nuse voxelize::{Block, Registry, Server, Voxelize, WorldConfig};\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // ... Creating the server\n\n    // highlight-start\n    let config = WorldConfig::new().build();\n    // highlight-end\n\n    // ... Running the server\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"world-creation",children:"World Creation"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have a world configuration, we can use it to create a Voxelize world."}),"\n",(0,o.jsx)(n.p,{children:"There are two ways of doing so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="server/main.rs"',children:'// Method 1\nuse voxelize::World;\n\nlet world = World::new("tutorial", &config);\nserver.add_world(world).expect("Could not add world!");\n\n// Method 2\nlet world = server.create_world("tutorial", &config).unwrap();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Both ways add a new world called ",(0,o.jsx)(n.code,{children:'"example"'})," to the Voxelize server."]}),"\n",(0,o.jsx)(n.h2,{id:"progress-check",children:"Progress Check"}),"\n",(0,o.jsxs)(n.p,{children:["The code so far on ",(0,o.jsx)(n.code,{children:"server/main.rs"})," should look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="server/main.rs"',children:'use voxelize::{Block, FlatlandStage, Registry, Server, Voxelize, World, WorldConfig};\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    let dirt = Block::new("Dirt").id(1).build();\n    let stone = Block::new("Stone").id(2).build();\n    let grass_block = Block::new("Grass Block").id(3).build();\n\n    let config = WorldConfig::new().build();\n\n    let mut world = World::new("tutorial", &config);\n\n    let mut registry = Registry::new();\n    registry.register_blocks(&[dirt, stone, grass_block]);\n\n    let mut server = Server::new().port(4000).registry(&registry).build();\n\n    server\n        .add_world(world)\n        .expect("Failed to add world to server");\n\n    Voxelize::run(server).await\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},4560:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/chunk-generation-4eb8468d89fd105fcd8e0674f986e282.png"},4628:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/chunk-79dc2b65a3c8f51a6c29cb1e8e38bd67.png"},248:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/server-vs-client-446dd21d895117e71d6891f8d33983f1.png"},1670:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var o=r(7378);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);