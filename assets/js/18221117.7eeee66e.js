"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[127],{9093:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=r(4246),n=r(1670);const i={sidebar_position:2},o="Register Blocks",a={id:"basics/register-blocks",title:"Register Blocks",description:"A voxel world contains tens of millions of blocks, with each block having its own properties and different ways of rendering. Thus, after creating a server, we should register the block types that are used across this server.",source:"@site/docs/tutorials/basics/2-register-blocks.md",sourceDirName:"basics",slug:"/basics/register-blocks",permalink:"/tutorials/basics/register-blocks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create the Server",permalink:"/tutorials/basics/create-the-server"},next:{title:"Create a World",permalink:"/tutorials/basics/create-a-world"}},l={},c=[{value:"Create a Registry",id:"create-a-registry",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"register-blocks",children:"Register Blocks"}),"\n",(0,s.jsx)(t.p,{children:"A voxel world contains tens of millions of blocks, with each block having its own properties and different ways of rendering. Thus, after creating a server, we should register the block types that are used across this server."}),"\n",(0,s.jsxs)(t.p,{children:["In Voxelize, each server has a set of blocks that the developer defines. These blocks are managed by a\xa0",(0,s.jsx)(t.strong,{children:"registry"}),", and are shared across all worlds in the same server."]}),"\n",(0,s.jsx)(t.h2,{id:"create-a-registry",children:"Create a Registry"}),"\n",(0,s.jsx)(t.p,{children:"Let's create our example registry, registering two blocks to it:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",metastring:'title="server/main.rs"',children:'// highlight-next-line\nuse voxelize::{Block, Registry, Server, Voxelize};\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // highlight-start\n    let mut registry = Registry::new();\n\n    let dirt = Block::new("Dirt").id(1).build();\n    let stone = Block::new("Stone").id(2).build();\n    let grass_block = Block::new("Grass Block").id(3).build();\n\n    registry.register_blocks(&[dirt, stone, grass_block]);\n\n    let server = Server::new().port(4000).registry(&registry).build();\n    // highlight-end\n\n    Voxelize::run(server).await\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Just like that, we have registered three blocks on the server side. These blocks are now available in every world within the server, so let's create the worlds now."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["To further understand block customization, check out ",(0,s.jsx)(t.a,{href:"../intermediate/custom-blocks",children:"this tutorial"}),"."]})})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1670:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>o});var s=r(7378);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);