"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3576],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),k=a,h=c["".concat(o,".").concat(k)]||c[k]||d[k]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(5773),a=(n(7378),n(5318));const i={id:"Chunks",title:"Class: Chunks",sidebar_label:"Chunks",sidebar_position:0,custom_edit_url:null},l=void 0,s={unversionedId:"client/classes/Chunks",id:"client/classes/Chunks",title:"Class: Chunks",description:"Chunks is a map of chunks that are currently loaded or being loaded. This is",source:"@site/docs/api/client/classes/Chunks.md",sourceDirName:"client/classes",slug:"/client/classes/Chunks",permalink:"/api/client/classes/Chunks",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"Chunks",title:"Class: Chunks",sidebar_label:"Chunks",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"ChunkUtils",permalink:"/api/client/classes/ChunkUtils"},next:{title:"Clouds",permalink:"/api/client/classes/Clouds"}},o={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:"currentChunk",id:"currentchunk",level:3},{value:"requested",id:"requested",level:3},{value:"toAdd",id:"toadd",level:3},{value:"toProcess",id:"toprocess",level:3},{value:"toRequest",id:"torequest",level:3},{value:"toUpdate",id:"toupdate",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Chunks")," is a map of chunks that are currently loaded or being loaded. This is\nused completely within ",(0,a.kt)("a",{parentName:"p",href:"/api/client/classes/World"},"World")," and shouldn't be modified by anything else."),(0,a.kt)("p",null,"One can use ",(0,a.kt)("a",{parentName:"p",href:"/api/client/classes/Debug"},"Debug")," to view different chunk statuses."),(0,a.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Map"),"<",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("a",{parentName:"p",href:"/api/client/classes/Chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"Chunk")),">"),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Chunks"))))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"currentchunk"},"currentChunk"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"currentChunk"),": ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#coords2"},(0,a.kt)("inlineCode",{parentName:"a"},"Coords2"))),(0,a.kt)("p",null,"The current chunk that is used as the center of the world. This is used to determine which chunks\nshould be requested and loaded."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"requested"},"requested"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"requested"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Map"),"<",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),">"),(0,a.kt)("p",null,"The map of requested chunks corresponding to how many times the world has attempted\nto re-request the chunk."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"toadd"},"toAdd"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"toAdd"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"[] = ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")),(0,a.kt)("p",null,"A list of chunk representations that are ready to be added into the THREE.js scene. This list empties\nout at the rate defined at ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#worldclientparams"},"WorldClientParams.maxAddsPerTick"),"."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"toprocess"},"toProcess"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"toProcess"),": ","[",(0,a.kt)("inlineCode",{parentName:"p"},"ChunkProtocol"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),"][]"," = ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")),(0,a.kt)("p",null,"A list of ChunkProtocol objects that are received from the server and are waiting to be\nloaded into meshes within the world and actual chunk instances. This list empties out at the rate\ndefined at ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#worldclientparams"},"WorldClientParams.maxProcessesPerTick"),"."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"torequest"},"toRequest"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"toRequest"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"[] = ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")),(0,a.kt)("p",null,"A list of chunk representations ready to be sent to the server to be loaded. The rate at which\nthis list is taken out can be configured at ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#worldclientparams"},"WorldClientParams.maxRequestsPerTick"),". Items of\nthis list will be taken out whenever the server responds with any corresponding chunks."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"toupdate"},"toUpdate"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"toUpdate"),": ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#blockupdate"},(0,a.kt)("inlineCode",{parentName:"a"},"BlockUpdate")),"[] = ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")),(0,a.kt)("p",null,"A list of ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#blockupdate"},"BlockUpdate")," objects that awaits to be sent to the server to make actual voxel\nupdates. This list empties out at the rate defined at ",(0,a.kt)("a",{parentName:"p",href:"/api/client/modules#worldclientparams"},"WorldClientParams.maxUpdatesPerTick"),"."))}d.isMDXComponent=!0}}]);