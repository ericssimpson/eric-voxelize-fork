"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3228],{1974:e=>{e.exports=JSON.parse('{"pluginId":"wiki","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Calling Methods","href":"/voxelize/wiki/calling-methods","docId":"calling-methods","unlisted":false},{"type":"link","label":"Chunk Meshing","href":"/voxelize/wiki/chunk-meshing","docId":"chunk-meshing","unlisted":false},{"type":"link","label":"Custom Dispatcher","href":"/voxelize/wiki/custom-dispatcher","docId":"custom-dispatcher","unlisted":false},{"type":"link","label":"Custom Entities","href":"/voxelize/wiki/custom-entities","docId":"custom-entities","unlisted":false},{"type":"link","label":"Custom Peers","href":"/voxelize/wiki/custom-peers","docId":"custom-peers","unlisted":false},{"type":"link","label":"Handling Events","href":"/voxelize/wiki/handling-events","docId":"handling-events","unlisted":false},{"type":"link","label":"Metadata Processing","href":"/voxelize/wiki/metadata-processing","docId":"metadata-processing","unlisted":false}]},"docs":{"calling-methods":{"id":"calling-methods","title":"Calling Methods","description":"In Voxelize, you can define custom methods that can be called from the client. These methods perform actions on specific worlds, and can be used to create custom game logic.","sidebar":"tutorialSidebar"},"chunk-meshing":{"id":"chunk-meshing","title":"Chunk Meshing","description":"In this tutorial, we will discuss the process of which Voxelize mesh the chunks.","sidebar":"tutorialSidebar"},"custom-dispatcher":{"id":"custom-dispatcher","title":"Custom Dispatcher","description":"The Voxelize server is built on top of the specs ECS framework. This means that the server is made up of a series of systems that are running in parallel. By default, Voxelize has a list of systems that are used to handle things like chunk generation, network packet handling, and more. These systems come together and define what happens every game tick.","sidebar":"tutorialSidebar"},"custom-entities":{"id":"custom-entities","title":"Custom Entities","description":"In Voxelize, you can create entities such as mobs by defining custom entity loaders and entity components. These entities can be used to create custom game logic.","sidebar":"tutorialSidebar"},"custom-peers":{"id":"custom-peers","title":"Custom Peers","description":"TODOOOOOOO","sidebar":"tutorialSidebar"},"handling-events":{"id":"handling-events","title":"Handling Events","description":"In Voxelize, you can define custom events that can be sent from the server to the client. These events can be used to create custom game logic.","sidebar":"tutorialSidebar"},"metadata-processing":{"id":"metadata-processing","title":"Metadata Processing","description":"In Voxelize, metadata is a way to keep entities and players in sync with the server. Essentially, metadata is a JSON serializable object that contains the individual components that the entity itself possesses. For example, a player entity might have a position component, a rotation component, and a health component. These components are stored in the metadata object, and whenever these individual components are changed, the metadata object is updated and sent to the client.","sidebar":"tutorialSidebar"}}}')}}]);