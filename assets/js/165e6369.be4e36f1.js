"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3391],{221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});var o=n(4246),a=n(1670);const d={},i="Calling Methods",r={id:"calling-methods",title:"Calling Methods",description:"In Voxelize, you can define custom methods that can be called from the client. These methods perform actions on specific worlds, and can be used to create custom game logic.",source:"@site/docs/wiki/calling-methods.md",sourceDirName:".",slug:"/calling-methods",permalink:"/voxelize/wiki/calling-methods",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Chunk Meshing",permalink:"/voxelize/wiki/chunk-meshing"}},s={},l=[{value:"Defining a Server Method",id:"defining-a-server-method",level:2},{value:"Calling a Server Method",id:"calling-a-server-method",level:2},{value:"Difference between Methods and Events",id:"difference-between-methods-and-events",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"calling-methods",children:"Calling Methods"}),"\n",(0,o.jsx)(t.p,{children:"In Voxelize, you can define custom methods that can be called from the client. These methods perform actions on specific worlds, and can be used to create custom game logic."}),"\n",(0,o.jsx)(t.p,{children:"Unlike events, method runs world-wide and is not related to location."}),"\n",(0,o.jsx)(t.h2,{id:"defining-a-server-method",children:"Defining a Server Method"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-rust",metastring:'title="Server Method Definition"',children:'// The payload is a JSON object\n#[derive(Serialize, Deserialize)]\nstruct MyMethodPayload {\n  test: String,\n}\n\nlet world = server.create_world("my_world", &config).expect("Failed to create world");\n\nworld.set_method_handle("my_method", |world, client_id, payload| {\n  let data: MyMethodPayload = serde_json::from_value(payload).expect("Failed to parse payload");\n\n  // Do something with the world and payload\n});\n'})}),"\n",(0,o.jsx)(t.h2,{id:"calling-a-server-method",children:"Calling a Server Method"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="Client Method Call"',children:'const method = new VOXELIZE.Method();\n\nnetwork.register(method);\n\nmethod.call("my_method", {\n  test: "Hello World"\n})\n'})}),"\n",(0,o.jsx)(t.h2,{id:"difference-between-methods-and-events",children:"Difference between Methods and Events"}),"\n",(0,o.jsx)(t.p,{children:"Methods are intended to be used for actions that change the state of the world. For example, a method could be used to print a message to the console, or to spawn a new entity."}),"\n",(0,o.jsx)(t.p,{children:"On the other hand, events are intended to be reactive. For example, an event could be used to notify the client that a new entity has been spawned, or that a player has been hit."})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1670:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>i});var o=n(7378);const a={},d=o.createContext(a);function i(e){const t=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(d.Provider,{value:t},e.children)}}}]);