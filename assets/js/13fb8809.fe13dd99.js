"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[372],{9147:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=a(4246),s=a(1670);const i={},o="Metadata Processing",d={id:"metadata-processing",title:"Metadata Processing",description:"In Voxelize, metadata is a way to keep entities and players in sync with the server. Essentially, metadata is a JSON serializable object that contains the individual components that the entity itself possesses. For example, a player entity might have a position component, a rotation component, and a health component. These components are stored in the metadata object, and whenever these individual components are changed, the metadata object is updated and sent to the client.",source:"@site/docs/wiki/metadata-processing.md",sourceDirName:".",slug:"/metadata-processing",permalink:"/voxelize/wiki/metadata-processing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handling Events",permalink:"/voxelize/wiki/handling-events"}},r={},l=[{value:"Defining Metadata",id:"defining-metadata",level:2},{value:"Handling Metadata",id:"handling-metadata",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"metadata-processing",children:"Metadata Processing"}),"\n",(0,n.jsx)(t.p,{children:"In Voxelize, metadata is a way to keep entities and players in sync with the server. Essentially, metadata is a JSON serializable object that contains the individual components that the entity itself possesses. For example, a player entity might have a position component, a rotation component, and a health component. These components are stored in the metadata object, and whenever these individual components are changed, the metadata object is updated and sent to the client."}),"\n",(0,n.jsx)(t.h2,{id:"defining-metadata",children:"Defining Metadata"}),"\n",(0,n.jsxs)(t.p,{children:["Metadata uses the ",(0,n.jsx)(t.code,{children:"MetadataComp"})," component on the server. This component internally has a map of ",(0,n.jsx)(t.code,{children:"String"})," to ",(0,n.jsx)(t.code,{children:"serde_json::Value"}),". The ",(0,n.jsx)(t.code,{children:"String"})," is the name of the component, and the ",(0,n.jsx)(t.code,{children:"serde_json::Value"})," is the value of the component. For example, the ",(0,n.jsx)(t.code,{children:"PositionComp"})," might look like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'let mut metadata = MetadataComp::new();\n\nmetadata.set::<PositionComp>("position", position);\n'})}),"\n",(0,n.jsxs)(t.p,{children:["By calling ",(0,n.jsx)(t.code,{children:"set"})," and passing in a type that implements both ",(0,n.jsx)(t.code,{children:"Component"})," from ",(0,n.jsx)(t.code,{children:"specs"})," and ",(0,n.jsx)(t.code,{children:"DeserializeOwned"})," from ",(0,n.jsx)(t.code,{children:"serde"}),", the metadata will be updated with the new serialized value."]}),"\n",(0,n.jsxs)(t.p,{children:["Similarly, you can call ",(0,n.jsx)(t.code,{children:"get"})," to retrieve the value of a component:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'let position = metadata.get::<PositionComp>("position").unwrap_or_default();\n'})}),"\n",(0,n.jsx)(t.h2,{id:"handling-metadata",children:"Handling Metadata"}),"\n",(0,n.jsx)(t.p,{children:"Metadata is handled differently for peers and entities."}),"\n",(0,n.jsxs)(t.p,{children:["For peers, aka players, metadata is by default handled by the ",(0,n.jsx)(t.code,{children:"PeersMetaSystem"}),", which automatically adds in these components to the players' metadata:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"PositionComp"}),": This is added as ",(0,n.jsx)(t.code,{children:"position"})," in the metadata"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"NameComp"}),": This is added as ",(0,n.jsx)(t.code,{children:"username"})," in the metadata"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DirectionComp"}),": This is added as ",(0,n.jsx)(t.code,{children:"direction"})," in the metadata"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["For entities, metadata is handled by the ",(0,n.jsx)(t.code,{children:"EntitiesMetaSystem"}),", which automatically adds in these components to the entities' metadata:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"PositionComp"}),": This is added as ",(0,n.jsx)(t.code,{children:"position"})," in the metadata"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["When a new component is defined and should be added to the metadata system, you can define your own system that handles this similar process. For example, if you wanted to add a ",(0,n.jsx)(t.code,{children:"HealthComp"})," to the metadata, you could do something like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"use specs::{System, ReadStorage, WriteStorage, Join, Component, VecStorage};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Component, Deserialize, Serialize)]\n#[storage(VecStorage)]\nstruct HealthComp(pub u32);\n\nstruct HealthMetaSystem;\n\nimpl<'a> System<'a> for HealthMetaSystem {\n    type SystemData = (\n        ReadStorage<'a, HealthComp>,\n        WriteStorage<'a, MetadataComp>,\n    );\n\n    fn run(&mut self, (healths, mut metadatas): Self::SystemData) {\n        use rayon::prelude::*;\n        use specs::ParJoin;\n\n        (&healths, &mut metadatas).par_join().for_each(|(health, metadata)| {\n            metadata.set::<HealthComp>(\"health\", health);\n        });\n    }\n}\n\nlet mut world = World::new();\nworld.register::<HealthComp>();\n"})}),"\n",(0,n.jsxs)(t.p,{children:["After these, read on how to ",(0,n.jsx)(t.a,{href:"custom-dispatcher",children:"customize the ECS systems dispatcher"})," in order to add in ",(0,n.jsx)(t.code,{children:"HealthMetaSystem"})," to the dispatcher."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1670:(e,t,a)=>{a.d(t,{Z:()=>d,a:()=>o});var n=a(7378);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);