"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4007],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(n),k=i,c=u["".concat(s,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(c,r(r({ref:t},p),{},{components:n})):a.createElement(c,r({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var m=2;m<l;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(5773),i=(n(7378),n(5318));const l={sidebar_position:1},r="Entity Component System",o={unversionedId:"intermediate/entity-component-system",id:"intermediate/entity-component-system",title:"Entity Component System",description:"Voxelize servers run on the Specs ECS crate. It is recommended to read through the Specs ECS tutorial before continuing.",source:"@site/docs/intermediate/1-entity-component-system.md",sourceDirName:"intermediate",slug:"/intermediate/entity-component-system",permalink:"/docs/intermediate/entity-component-system",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intermediate/1-entity-component-system.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intermediate",permalink:"/docs/category/intermediate"},next:{title:"the-client-entity",permalink:"/docs/intermediate/the-client-entity"}},s={},m=[{value:"Components",id:"components",level:2},{value:"Null-storage Flags",id:"null-storage-flags",level:3},{value:"Informational Components",id:"informational-components",level:3},{value:"Physical Components",id:"physical-components",level:3},{value:"Miscellaneous Components",id:"miscellaneous-components",level:3}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"entity-component-system"},"Entity Component System"),(0,i.kt)("p",null,"Voxelize servers run on the ",(0,i.kt)("a",{parentName:"p",href:"https://specs.amethyst.rs/docs/tutorials/"},"Specs ECS crate"),". It is recommended to read through the Specs ECS tutorial before continuing."),(0,i.kt)("h2",{id:"components"},"Components"),(0,i.kt)("p",null,"Essentially, ECS allows Voxelize to decouple in-game objects into separate components. For instance, an entity that simply moves up and down could have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Position")," component and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Velocity")," component. An entity would simply be a holder of a set of components."),(0,i.kt)("p",null,"By default, Voxelize comes with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/voxelize/voxelize/blob/6f372f38b9bac4c454f4106286dc5256df79cb82/server/world/mod.rs#L186-L200"},"these components")," added to the ECS world:"),(0,i.kt)("h3",{id:"null-storage-flags"},"Null-storage Flags"),(0,i.kt)("p",null,"These flags take up no space on disk, and is simply used to distinguish clients to non-client entities."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClientFlag"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A component indicating if an entity is a client."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EntityFlag"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A component indicating if an entity is a non-client.")))),(0,i.kt)("h3",{id:"informational-components"},"Informational Components"),(0,i.kt)("p",null,"These components adds additional information about an entity, whether a client or not."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IDComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"All entities have their Voxelize given ID."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NameComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A name given to the entity."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkRequestComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A list of chunks requested by entity (client)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CurrentChunkComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Which chunk the client is in, updated each frame."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PositionComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A set of 3D coordinates describing the position of an entity."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DirectionComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A set of 3D coordinates indicating the direction the entity is looking."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ETypeComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A string to differentiate the type of entity, such as ",(0,i.kt)("inlineCode",{parentName:"li"},'"Cow"'),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MetadataComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A JSON-compatible object to store data sent to the client-side or saved to disk.")))),(0,i.kt)("h3",{id:"physical-components"},"Physical Components"),(0,i.kt)("p",null,"The components below make an entity physical in the Voxelize world."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RigidBodyComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A collision box that can collide with voxel blocks."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InteractorComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A collision box that can collide with other collision blocks."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CollisionsComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A vector storing all collisions this entity has per frame.")))),(0,i.kt)("h3",{id:"miscellaneous-components"},"Miscellaneous Components"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AddrComp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Client's Actix actor address.")))),(0,i.kt)("p",null,"To register new components to the Voxelize world, we do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use specs::{Component, VecStorage};\n\n#[derive(Component, Debug)]\n#[storage(VecStorage)]\nstruct CustomComp {\n    a: f32,\n    b: f32,\n}\n\nworld.ecs().register::<CustomComp>();\n")),(0,i.kt)("p",null,"We can then create entities with this ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomComp"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let custom_entity = world\n    .create_entity("Custom Entity")\n    .with(CustomComp { a: 1.0, b: 3.0 })\n    .build();\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/voxelize/voxelize/blob/6f372f38b9bac4c454f4106286dc5256df79cb82/server/world/mod.rs#L587-L596"},(0,i.kt)("inlineCode",{parentName:"a"},"world.create_entity(<type name>)"))," calls ",(0,i.kt)("inlineCode",{parentName:"p"},"world.ecs().create_entity()")," internally, and adds these components by default to integrate with Voxelize:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IDComp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EntityFlag")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ETypeComp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MetadataComp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CurrentChunkComp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CollisionsComp"),"\n:::")),(0,i.kt)("h2",{parentName:"admonition",id:"resources"},"Resources"),(0,i.kt)("p",{parentName:"admonition"},"Another building block of a Voxelize world is a set of ",(0,i.kt)("strong",{parentName:"p"},"resources")," built-in. Resources are stateful structs that can be shared across all systems. In Voxelize, a world comes with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/voxelize/voxelize/blob/6f372f38b9bac4c454f4106286dc5256df79cb82/server/world/mod.rs#L202-L218"},"these resources"),":"),(0,i.kt)("h3",{parentName:"admonition",id:"informational"},"Informational"),(0,i.kt)("p",{parentName:"admonition"},"These are the static resources that shouldn't be modified."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"String"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A string of the name of the world."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.WorldConfig.html"},(0,i.kt)("inlineCode",{parentName:"a"},"WorldConfig")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The configurations of the world. Can be accessed through ",(0,i.kt)("inlineCode",{parentName:"li"},"world.config()"),".")))),(0,i.kt)("h3",{parentName:"admonition",id:"managers"},"Managers"),(0,i.kt)("p",{parentName:"admonition"},"These are the structs that manage and pass around the data stored in the world."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Chunks.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Chunks")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The chunking manager of the world."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Entities.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Entities")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A manager that can handle the spawning and saving of entities."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Pipeline.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Pipeline")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The chunking pipeline that takes care of generating chunks in parallel."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/type.Clients.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Clients")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A hash map of all clients that has joined this world."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/type.MessageQueue.html"},(0,i.kt)("inlineCode",{parentName:"a"},"MessageQueue")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A list of encoded protobuf messages that gets sent to the client each tick."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Events.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Events")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Managing all events that can be emitted to the clients.")))),(0,i.kt)("p",{parentName:"admonition"},"The manager resources can be accessed through the world directly. For instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"world.chunks()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"world.chunks_mut()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"world.clients_mut()"),"."),(0,i.kt)("h3",{parentName:"admonition",id:"utilities"},"Utilities"),(0,i.kt)("p",{parentName:"admonition"},"These are the utility resources that can be used as helpers."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Stats.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Stats")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The world stats such as delta time."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Mesher.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Mesher")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A manager that takes care of all the chunk 3D meshing in parallel."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Search.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Search")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A 3-dimensional tree that has all the clients and entities to search for."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.Terrain.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Terrain")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A seeded terrain manager to generate terrain."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/voxelize/0.8.7/voxelize/struct.SeededNoise.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Noise")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A seeded noise manager to make 2D or 3D noise.")))),(0,i.kt)("p",{parentName:"admonition"},"You can add your own resources to the ECS world in order to be used in an ECS system too by doing so:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"struct CustomResource {\n    a: f32,\n}\n\nworld.ecs().insert(CustomResource { a: 1.0 }});\n")),(0,i.kt)("h2",{parentName:"admonition",id:"systems"},"Systems"),(0,i.kt)("p",{parentName:"admonition"},"Developers can then write ",(0,i.kt)("strong",{parentName:"p"},"systems")," that operate on specific ",(0,i.kt)("strong",{parentName:"p"},"components"),". An example could be a ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionUpdateSystem")," that operates on all entities with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Position")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Velocity")," component, and this system could simply add each entity's ",(0,i.kt)("inlineCode",{parentName:"p"},"Velocity")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Position")," to move the entity accordingly."),(0,i.kt)("p",{parentName:"admonition"},"Voxelize by default comes with a ",(0,i.kt)("a",{parentName:"p",href:"https://specs.amethyst.rs/docs/tutorials/03_dispatcher.html"},"Specs dispatcher")," that runs ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/voxelize/voxelize/blob/02d05e9baf07529df0d7ce5d9d4e4efc600ec6f7/server/world/mod.rs#L132-L171"},"these set of systems"),":"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateStatsSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should run at the start of the dispatcher")),(0,i.kt)("li",{parentName:"ul"},"Updates the ",(0,i.kt)("inlineCode",{parentName:"li"},"Stats")," resources to the latest delta time which can be used by systems in the ",(0,i.kt)("inlineCode",{parentName:"li"},"PhysicsSystem"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EntitiesMetaSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should run at the start of the dispatcher")),(0,i.kt)("li",{parentName:"ul"},"Adds the ",(0,i.kt)("inlineCode",{parentName:"li"},"PositionComp")," of all non-client entities into their respective ",(0,i.kt)("inlineCode",{parentName:"li"},"MetadataComp")," to be sent to the client side."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PeersMetaSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should run at the start of the dispatcher")),(0,i.kt)("li",{parentName:"ul"},"Adds the ",(0,i.kt)("inlineCode",{parentName:"li"},"PositionComp"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"DirectionComp"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"NameComp")," into all client entities' ",(0,i.kt)("inlineCode",{parentName:"li"},"MetadataComp")," to update peers."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CurrentChunkSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should run at the start of the dispatcher")),(0,i.kt)("li",{parentName:"ul"},"Calculates the current chunks of all entities."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkUpdatingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"CurrentChunkSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Handles the voxel updates by updating ",(0,i.kt)("inlineCode",{parentName:"li"},"config.max_updates_per_tick")," of received updates per tick."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkRequestsSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"CurrentChunkSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Queues all chunks from any ",(0,i.kt)("inlineCode",{parentName:"li"},"ChunkRequestComp")," into the chunk pipeline to be processed."),(0,i.kt)("li",{parentName:"ul"},"Adds any chunks that are ready to ",(0,i.kt)("inlineCode",{parentName:"li"},"world.chunks().to_send")," to be sent to the clients."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkPipeliningSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkRequestsSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Pushes ",(0,i.kt)("inlineCode",{parentName:"li"},"config.max_chunks_per_tick")," of chunks per tick into a list of chunk phases to populate them with chunk data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkMeshingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkUpdatingSystem")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkPipelineSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Meshes ",(0,i.kt)("inlineCode",{parentName:"li"},"config.max_chunks_per_tick")," of chunks per tick into ",(0,i.kt)("inlineCode",{parentName:"li"},"config.sub_chunks")," amount of sub chunk 3D meshes."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkSendingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkMeshingSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Packs the chunks from ",(0,i.kt)("inlineCode",{parentName:"li"},"world.chunks().to_send")," along with clients that had requested for those chunks into the ",(0,i.kt)("inlineCode",{parentName:"li"},"MessageQueue")," resource."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChunkSavingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkMeshingSystem"))),(0,i.kt)("li",{parentName:"ul"},"Every ",(0,i.kt)("inlineCode",{parentName:"li"},"config.save_interval")," ticks, saves the chunk data into ",(0,i.kt)("inlineCode",{parentName:"li"},"config.save_dir")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"config.saving")," is set true."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PhysicsSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"CurrentChunkSystem")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"UpdateStatsSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Updates ",(0,i.kt)("inlineCode",{parentName:"li"},"RigidBodyComp")," according to chunk data."),(0,i.kt)("li",{parentName:"ul"},"Calculates ",(0,i.kt)("inlineCode",{parentName:"li"},"CollisionsComp")," through ",(0,i.kt)("inlineCode",{parentName:"li"},"InteractorComp")," by calculating the physics collisions through ",(0,i.kt)("a",{parentName:"li",href:"https://rapier.rs/"},"rapier physics"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EntitiesSavingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"EntitiesMetaSystem")," and any non-client metadata systems.")),(0,i.kt)("li",{parentName:"ul"},"Every ",(0,i.kt)("inlineCode",{parentName:"li"},"config.save_interval"),", saves the entities data into ",(0,i.kt)("inlineCode",{parentName:"li"},"config.save_dir")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"config.saving")," is set true."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EntitiesSendingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"EntitiesMetaSystem")," and "),"any non-client metadata systems",(0,i.kt)("strong",{parentName:"li"},".")),(0,i.kt)("li",{parentName:"ul"},"If any entities have changed their metadata, the metadata is packed and pushed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"MessageQueue")," resource."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PeersSendingSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"PeersMetaSystem")," and "),"any client metadata systems",(0,i.kt)("strong",{parentName:"li"},".")),(0,i.kt)("li",{parentName:"ul"},"If any clients have changed their metadata, the metadata is packed and pushed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"MessageQueue")," resource."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BroadcastSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"EntitiesSendingSystem"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"PeersSendingSystem"),", and ",(0,i.kt)("inlineCode",{parentName:"strong"},"ChunkSendingSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Actually sends the packed messages in the ",(0,i.kt)("inlineCode",{parentName:"li"},"MessageQueue")," to the specified clients."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClearCollisionSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"EntitiesSendingSystem")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"PeersSendingSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Clears the collisions generated by ",(0,i.kt)("inlineCode",{parentName:"li"},"PhysicsSystem"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EventsSystem"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Should be dependent on ",(0,i.kt)("inlineCode",{parentName:"strong"},"BroadcastSystem"),".")),(0,i.kt)("li",{parentName:"ul"},"Packs all events in the ",(0,i.kt)("inlineCode",{parentName:"li"},"Events")," resource and send them to the specified clients.")))),(0,i.kt)("p",{parentName:"admonition"},"To customize the dispatcher, checkout ",(0,i.kt)("a",{parentName:"p",href:"./customizing-the-ecs"},"this tutorial"),".")))}d.isMDXComponent=!0}}]);