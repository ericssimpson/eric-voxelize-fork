// vite.config.mjs
import path from "path";
import { defineConfig } from "file:///Users/shaoruu/Desktop/desktop/projects/town/voxelize/node_modules/vite/dist/node/index.js";
import { copy } from "file:///Users/shaoruu/Desktop/desktop/projects/town/node_modules/.pnpm/vite-plugin-copy@0.1.6/node_modules/vite-plugin-copy/dist/vite-plugin-copy.js";
import { externalizeDeps } from "file:///Users/shaoruu/Desktop/desktop/projects/town/voxelize/node_modules/vite-plugin-externalize-deps/dist/index.js";
import glsl from "file:///Users/shaoruu/Desktop/desktop/projects/town/voxelize/node_modules/vite-plugin-glsl/src/index.js";
import stringReplace from "file:///Users/shaoruu/Desktop/desktop/projects/town/node_modules/.pnpm/vite-plugin-string-replace@1.1.3/node_modules/vite-plugin-string-replace/dist/index.js";

// package.json
var version = "0.1.223";

// vite.config.mjs
var __vite_injected_original_dirname = "/Users/shaoruu/Desktop/desktop/projects/town/voxelize/packages/core";
var vite_config_default = defineConfig({
  plugins: [
    glsl(),
    externalizeDeps({
      except: [/three\/examples\//]
    }),
    stringReplace([
      {
        search: "__VOXELIZE_VERSION__",
        replace: version
      }
    ]),
    copy([
      {
        src: path.resolve(__vite_injected_original_dirname, "./src/styles.css"),
        dest: path.resolve(__vite_injected_original_dirname, "./dist")
      }
    ])
  ],
  base: "./",
  // needed to make web workers work: https://github.com/vitejs/vite/discussions/15547#discussioncomment-8950765
  build: {
    minify: false,
    lib: {
      // Could also be a dictionary or array of multiple entry points
      entry: path.resolve(__vite_injected_original_dirname, "src/index.ts"),
      name: "index",
      formats: ["es", "cjs"],
      fileName: "index"
    },
    rollupOptions: {},
    emptyOutDir: process.env.NODE_ENV === "production"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubWpzIiwgInBhY2thZ2UuanNvbiJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9zaGFvcnV1L0Rlc2t0b3AvZGVza3RvcC9wcm9qZWN0cy90b3duL3ZveGVsaXplL3BhY2thZ2VzL2NvcmVcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9zaGFvcnV1L0Rlc2t0b3AvZGVza3RvcC9wcm9qZWN0cy90b3duL3ZveGVsaXplL3BhY2thZ2VzL2NvcmUvdml0ZS5jb25maWcubWpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9zaGFvcnV1L0Rlc2t0b3AvZGVza3RvcC9wcm9qZWN0cy90b3duL3ZveGVsaXplL3BhY2thZ2VzL2NvcmUvdml0ZS5jb25maWcubWpzXCI7aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCB7IGNvcHkgfSBmcm9tIFwidml0ZS1wbHVnaW4tY29weVwiO1xuaW1wb3J0IHsgZXh0ZXJuYWxpemVEZXBzIH0gZnJvbSBcInZpdGUtcGx1Z2luLWV4dGVybmFsaXplLWRlcHNcIjtcbmltcG9ydCBnbHNsIGZyb20gXCJ2aXRlLXBsdWdpbi1nbHNsXCI7XG5pbXBvcnQgc3RyaW5nUmVwbGFjZSBmcm9tIFwidml0ZS1wbHVnaW4tc3RyaW5nLXJlcGxhY2VcIjtcblxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbXG4gICAgZ2xzbCgpLFxuICAgIGV4dGVybmFsaXplRGVwcyh7XG4gICAgICBleGNlcHQ6IFsvdGhyZWVcXC9leGFtcGxlc1xcLy9dLFxuICAgIH0pLFxuICAgIHN0cmluZ1JlcGxhY2UoW1xuICAgICAge1xuICAgICAgICBzZWFyY2g6IFwiX19WT1hFTElaRV9WRVJTSU9OX19cIixcbiAgICAgICAgcmVwbGFjZTogdmVyc2lvbixcbiAgICAgIH0sXG4gICAgXSksXG4gICAgY29weShbXG4gICAgICB7XG4gICAgICAgIHNyYzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyYy9zdHlsZXMuY3NzXCIpLFxuICAgICAgICBkZXN0OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4vZGlzdFwiKSxcbiAgICAgIH0sXG4gICAgXSksXG4gIF0sXG4gIGJhc2U6IFwiLi9cIiwgLy8gbmVlZGVkIHRvIG1ha2Ugd2ViIHdvcmtlcnMgd29yazogaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL2Rpc2N1c3Npb25zLzE1NTQ3I2Rpc2N1c3Npb25jb21tZW50LTg5NTA3NjVcbiAgYnVpbGQ6IHtcbiAgICBtaW5pZnk6IGZhbHNlLFxuICAgIGxpYjoge1xuICAgICAgLy8gQ291bGQgYWxzbyBiZSBhIGRpY3Rpb25hcnkgb3IgYXJyYXkgb2YgbXVsdGlwbGUgZW50cnkgcG9pbnRzXG4gICAgICBlbnRyeTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCJzcmMvaW5kZXgudHNcIiksXG4gICAgICBuYW1lOiBcImluZGV4XCIsXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiLCBcImNqc1wiXSxcbiAgICAgIGZpbGVOYW1lOiBcImluZGV4XCIsXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7fSxcbiAgICBlbXB0eU91dERpcjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLFxuICB9LFxufSk7XG4iLCAie1xuICBcIm5hbWVcIjogXCJAdm94ZWxpemUvY29yZVwiLFxuICBcInZlcnNpb25cIjogXCIwLjEuMjIzXCIsXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICBcImZpbGVzXCI6IFtcbiAgICBcImRpc3RcIlxuICBdLFxuICBcIm1haW5cIjogXCJkaXN0L2luZGV4LmpzXCIsXG4gIFwibW9kdWxlXCI6IFwiZGlzdC9pbmRleC5tanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiY2xlYW5cIjogXCJyaW1yYWYgLi9kaXN0XCIsXG4gICAgXCJjb21waWxlXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwiYnVpbGRcIjogXCJwbnBtIHJ1biBjbGVhbiAmJiBwbnBtIHJ1biBjb21waWxlICYmIHBucG0gcnVuIHR5cGVzICYmIHBucG0gcnVuIGNvcHlcIixcbiAgICBcInR5cGVzXCI6IFwidHNjIC0tZW1pdERlY2xhcmF0aW9uT25seSAtLW91dERpciAuL2Rpc3QgLXAgLi90c2NvbmZpZy5qc29uIC0tZGVjbGFyYXRpb24gLS1hbGxvd0pzXCIsXG4gICAgXCJ3YXRjaFwiOiBcImNyb3NzLWVudiBOT0RFX0VOVj1kZXZlbG9wbWVudCBucG0tcnVuLWFsbCAtLXBhcmFsbGVsIHdhdGNoOipcIixcbiAgICBcIndhdGNoOmJ1aWxkXCI6IFwicG5wbSB0eXBlcyAtLXdhdGNoIC0tcHJlc2VydmVXYXRjaE91dHB1dFwiLFxuICAgIFwid2F0Y2g6Y29tcGlsZVwiOiBcInBucG0gY29tcGlsZSAtLXdhdGNoXCIsXG4gICAgXCJjb3B5XCI6IFwiY3AgLi9zcmMvc3R5bGVzLmNzcyAuL2Rpc3RcIixcbiAgICBcInRlc3RcIjogXCJ2aXRlc3QgLS1ydW5cIixcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwicG5wbSBydW4gYnVpbGRcIixcbiAgICBcInByZWluc3RhbGxcIjogXCJucHggb25seS1hbGxvdyBwbnBtXCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcInBvc3Rwcm9jZXNzaW5nXCI6IFwiXjYuMzUuMFwiLFxuICAgIFwidGhyZWVcIjogXCJeMC4xNjUuMFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkB0eXBlcy9nbC12ZWMzXCI6IFwiXjEuMS40XCIsXG4gICAgXCJAdHlwZXMvbmRhcnJheVwiOiBcIl4xLjAuMTRcIixcbiAgICBcIkB0eXBlcy9vbWdnaWZcIjogXCJeMS4wLjVcIixcbiAgICBcIkB0eXBlcy9zdGF0cy5qc1wiOiBcIl4wLjE3LjNcIixcbiAgICBcIkB0eXBlcy90aHJlZVwiOiBcIl4wLjE2NS4wXCIsXG4gICAgXCJAdHlwZXMvdXVpZFwiOiBcIl44LjMuNFwiLFxuICAgIFwidGhyZWVcIjogXCJeMC4xNjUuMFwiLFxuICAgIFwidml0ZS1wbHVnaW4tc3RyaW5nLXJlcGxhY2VcIjogXCJeMS4xLjNcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHdlZW5qcy90d2Vlbi5qc1wiOiBcIl4xOC42LjRcIixcbiAgICBcIkB2b3hlbGl6ZS9hYWJiXCI6IFwid29ya3NwYWNlOipcIixcbiAgICBcIkB2b3hlbGl6ZS9waHlzaWNzLWVuZ2luZVwiOiBcIndvcmtzcGFjZToqXCIsXG4gICAgXCJAdm94ZWxpemUvcHJvdG9jb2xcIjogXCJ3b3Jrc3BhY2U6KlwiLFxuICAgIFwiQHZveGVsaXplL3JheWNhc3RcIjogXCJ3b3Jrc3BhY2U6KlwiLFxuICAgIFwiZGVlcG1lcmdlXCI6IFwiXjQuMy4xXCIsXG4gICAgXCJkb211cmxcIjogXCJeMi4zLjRcIixcbiAgICBcImV2ZW50c1wiOiBcIl4zLjMuMFwiLFxuICAgIFwiZmZsYXRlXCI6IFwiXjAuNy40XCIsXG4gICAgXCJnbC12ZWMzXCI6IFwiXjEuMS4zXCIsXG4gICAgXCJqc29uZm5cIjogXCJeMC4zMS4wXCIsXG4gICAgXCJuZGFycmF5XCI6IFwiXjEuMC4xOVwiLFxuICAgIFwibm9pc2Vqc1wiOiBcIl4yLjEuMFwiLFxuICAgIFwib21nZ2lmXCI6IFwiXjEuMC4xMFwiLFxuICAgIFwicmVnZW5lcmF0b3ItcnVudGltZVwiOiBcIl4wLjEzLjExXCIsXG4gICAgXCJzb2NrZXQuaW8tY2xpZW50XCI6IFwiXjQuOC4xXCIsXG4gICAgXCJzdGF0cy5qc1wiOiBcIl4wLjE3LjBcIixcbiAgICBcInV1aWRcIjogXCJeOC4zLjJcIixcbiAgICBcInZpdGUtcGx1Z2luLWNvcHlcIjogXCJeMC4xLjZcIlxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTZYLE9BQU8sVUFBVTtBQUU5WSxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLFlBQVk7QUFDckIsU0FBUyx1QkFBdUI7QUFDaEMsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sbUJBQW1COzs7QUNKeEIsY0FBVzs7O0FERmIsSUFBTSxtQ0FBbUM7QUFVekMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsS0FBSztBQUFBLElBQ0wsZ0JBQWdCO0FBQUEsTUFDZCxRQUFRLENBQUMsbUJBQW1CO0FBQUEsSUFDOUIsQ0FBQztBQUFBLElBQ0QsY0FBYztBQUFBLE1BQ1o7QUFBQSxRQUNFLFFBQVE7QUFBQSxRQUNSLFNBQVM7QUFBQSxNQUNYO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxLQUFLO0FBQUEsTUFDSDtBQUFBLFFBQ0UsS0FBSyxLQUFLLFFBQVEsa0NBQVcsa0JBQWtCO0FBQUEsUUFDL0MsTUFBTSxLQUFLLFFBQVEsa0NBQVcsUUFBUTtBQUFBLE1BQ3hDO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsTUFBTTtBQUFBO0FBQUEsRUFDTixPQUFPO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixLQUFLO0FBQUE7QUFBQSxNQUVILE9BQU8sS0FBSyxRQUFRLGtDQUFXLGNBQWM7QUFBQSxNQUM3QyxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBLGVBQWUsQ0FBQztBQUFBLElBQ2hCLGFBQWEsUUFBUSxJQUFJLGFBQWE7QUFBQSxFQUN4QztBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
